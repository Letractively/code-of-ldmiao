/** * * www.FLABELL.com * New Flash Components Every Week! * * * Flash Mp3 Player v1.0 (03/23/2009) <http://www.flabell.com/> *  * Copyright (c) 2009 Vuzum Media <http://www.vuzum.com/> * For information about licencing, please visit <http://www.flabell.com/terms> * * * email: support@flabell.com * */import com.vuzum.utils.*;import mx.utils.*import flash.filters.*import caurina.*;import com.vuzum.Main;class com.vuzum.Playlist extends MovieClip {	private var playlistNodes : Number;	private var mcBackground : MovieClip;	public var mcContent : MovieClip;	private var mcMask : MovieClip;		private var heightButton : Number;	public var songsNumber : Number;	public var songsList : Array;	public var sound : Sound;	private var interval : Number;	private var timeInterval : Number;	public var timep : Number;	private var displayHours : Boolean;	public var songIndex : Number;	public var songListIndex : Number;	private var overTextColor : Number;	private var pressedTextColor : Number;	private var numPercentLoaded : Number;	public var sound_volume : SharedObject;	private var songTitles : Array;	public var songPublicIndex : Number;	public var loadSound : Boolean = false;	public var songsSource : Array;	public var songsRandom : Array = new Array();	public var songsArranged : Array = new Array();		/**	 * constructor	 */	public function Playlist()	{		caurina.transitions.properties.ColorShortcuts.init();		caurina.transitions.properties.SoundShortcuts.init();				mcBackground = this.createEmptyMovieClip("mcBackground", this.getNextHighestDepth());		mcBackground._x = Main.getInstance().mcAlbums.sidewaysGalleryMargin;				mcContent = this.createEmptyMovieClip("mcContent", this.getNextHighestDepth());		mcMask = this.createEmptyMovieClip("mcMask", this.getNextHighestDepth());		mcContent.setMask(mcMask);		mcMask.attachMovie("mcImagesMask", "mcImagesMask", mcMask.getNextHighestDepth());		mcMask._visible = false;				mcContent._x = 10;		mcContent._y = 10;		mcMask._x = 10;		mcMask._y = 10;				heightButton = 25;		songsList = new Array();		displayHours = false;				numPercentLoaded = 0;				sound = new Sound();				sound_volume = SharedObject.getLocal("volume");		if(sound_volume.data.sv != undefined) 		{			Main.getInstance().mcAlbums.mcControls.allSoundsVolume = Number(sound_volume.data.sv);			Main.getInstance().mcAlbums.mcControls.soundPublicVolume = Number(sound_volume.data.sv);			Main.getInstance().mcAlbums.mcControls.soundPublicVolume = Main.getInstance().mcAlbums.soundVol;		} 		else 		{			sound_volume.data.sv = Main.getInstance().mcAlbums.soundVol;			sound_volume.flush();			Main.getInstance().mcAlbums.mcControls.allSoundsVolume = Number(sound_volume.data.sv);		}				if(Main.getInstance().mcAlbums.mcControls.allSoundsVolume == 0)		{			Main.getInstance().mcAlbums.mcControls.soundHearing = false;		}		else		{			Main.getInstance().mcAlbums.mcControls.soundHearing = true;		}	}		/**	 * initialize playlist	 */	public function initPlaylist(nodes : Number, width : Number, height : Number, songs : Array, durations : Array, songsArray : Array, backgroundColor : Number, backgroundStrokeColor : Number, buttonOddColor : Number, buttonEvenBeginColor : Number, buttonEvenEndColor : Number, buttonStrokeColor : Number, buttonTextColor : Number, overButtonTextColor : Number, overButtonColor : Number, overButtonStrokeColor : Number, pressedButtonBeginColor : Number, pressedButtonEndColor : Number, pressedButtonTextColor : Number, pressedButtonStrokeColor : Number, buyButtonBeginColor : Number, buyButtonEndColor : Number, buyButtonStrokeColor : Number, buyButtonOverBeginColor : Number, buyButtonOverEndColor : Number, buyButtonOverStrokeColor : Number, buyButtonPressedBeginColor : Number, buyButtonPressedEndColor : Number, buyButtonPressedStrokeColor : Number, buyButtonSignColor : Number, buyArray : Array, downloadArray : Array, songsLocation : Array) : Void	{		//trace(pressedButtonStrokeColor);		mcMask._visible = true;		mcMask._width = width - 20;		mcMask._height = height - 20;		songsNumber = nodes;		mcContent._y = -heightButton* nodes;		mcContent._x = Main.getInstance().mcAlbums.sidewaysGalleryMargin + 10;		mcMask._x = Main.getInstance().mcAlbums.sidewaysGalleryMargin + 10;		songTitles = songs;		songsSource = songsLocation;		overTextColor = overButtonTextColor;		pressedTextColor = pressedButtonTextColor;				mcBackground.lineStyle(0.25, backgroundStrokeColor);		with (mcBackground) 		{ // yourMovieClipInstance is the instance of movie clip you wish to draw to			moveTo(0, 0);			beginFill(backgroundColor);			lineTo(2, 0);			lineTo(2, 2);			lineTo(0, 2);			lineTo(0, 0);			endFill();		}				mcBackground._width = width;		mcBackground._height = height;		mcBackground._alpha = 0;						this.onMouseMove = Proxy.create(this, songsMouseMove);				for(var i = 0; i < nodes; i++)		{			var mc : MovieClip = mcContent.attachMovie("mcPlaylistButton", "mcPlaylistButton" + i, i);			mc.mcSongTitle.txt.embedFonts = true;			mc.mcSongTitle.txt.autoSize = true;			mc.mcSongTitle.txt.textColor = buttonTextColor;			mc.mcSongDuration.txt.embedFonts = true;			mc.mcSongDuration.txt.autoSize = true;			mc.mcSongDuration.txt.textColor = buttonTextColor;			mc.mcSongNumber.txt.embedFonts = true;			mc.mcSongNumber.txt.autoSize = true;			mc.mcSongNumber.txt.textColor = buttonTextColor;			mc.mcSongTitle.txt.text = songs[i];			mc.mcSongDuration.txt.text = durations[i];			mc.mcSongNumber.txt.text = i + 1 + ".";						if(i%2 == 0)			{				var boxProperties:Object = {x:0, y:0, w:2, h:2}; // x and y defining x and y positions, w and h defining width and height of your box				var colArray:Array = [buttonEvenBeginColor, buttonEvenEndColor]; // your colors				var alpArray:Array = [100, 100]; // your alphas				var sprArray:Array = [0, 255]; // gradient spread				var matrixData:Object = {matrixType:"box", x:0, y:0, w:2, h:2, r:90/180*Math.PI};//imageHeight + imagesBorder + topMargin								mc.mcSongNumberBackground.lineStyle(0.25, buttonStrokeColor);				with (mc.mcSongNumberBackground) 				{ // yourMovieClipInstance is the instance of movie clip you wish to draw to					moveTo(boxProperties.x, boxProperties.y);					beginGradientFill("linear", colArray, alpArray, sprArray, matrixData);					lineTo(boxProperties.x + boxProperties.w, boxProperties.y);					lineTo(boxProperties.x + boxProperties.w, boxProperties.y + boxProperties.h);					lineTo(boxProperties.x, boxProperties.y + boxProperties.h);					lineTo(boxProperties.x, boxProperties.y);					endFill();				}								mc.mcSongLengthBackground.lineStyle(0.25, buttonStrokeColor);				with (mc.mcSongLengthBackground) 				{ // yourMovieClipInstance is the instance of movie clip you wish to draw to					moveTo(boxProperties.x, boxProperties.y);					beginGradientFill("linear", colArray, alpArray, sprArray, matrixData);					lineTo(boxProperties.x + boxProperties.w, boxProperties.y);					lineTo(boxProperties.x + boxProperties.w, boxProperties.y + boxProperties.h);					lineTo(boxProperties.x, boxProperties.y + boxProperties.h);					lineTo(boxProperties.x, boxProperties.y);					endFill();				}								mc.mcSongTitleBackground.lineStyle(0.25, buttonStrokeColor);				with (mc.mcSongTitleBackground) 				{ // yourMovieClipInstance is the instance of movie clip you wish to draw to					moveTo(boxProperties.x, boxProperties.y);					beginGradientFill("linear", colArray, alpArray, sprArray, matrixData);					lineTo(boxProperties.x + boxProperties.w, boxProperties.y);					lineTo(boxProperties.x + boxProperties.w, boxProperties.y + boxProperties.h);					lineTo(boxProperties.x, boxProperties.y + boxProperties.h);					lineTo(boxProperties.x, boxProperties.y);					endFill();				}			}			else			{				mc.mcSongNumberBackground.lineStyle(0.25, buttonStrokeColor);				with (mc.mcSongNumberBackground) 				{ // yourMovieClipInstance is the instance of movie clip you wish to draw to					moveTo(boxProperties.x, boxProperties.y);					beginFill(buttonOddColor);					lineTo(boxProperties.x + boxProperties.w, boxProperties.y);					lineTo(boxProperties.x + boxProperties.w, boxProperties.y + boxProperties.h);					lineTo(boxProperties.x, boxProperties.y + boxProperties.h);					lineTo(boxProperties.x, boxProperties.y);					endFill();				}								mc.mcSongLengthBackground.lineStyle(0.25, buttonStrokeColor);				with (mc.mcSongLengthBackground) 				{ // yourMovieClipInstance is the instance of movie clip you wish to draw to					moveTo(boxProperties.x, boxProperties.y);					beginFill(buttonOddColor);					lineTo(boxProperties.x + boxProperties.w, boxProperties.y);					lineTo(boxProperties.x + boxProperties.w, boxProperties.y + boxProperties.h);					lineTo(boxProperties.x, boxProperties.y + boxProperties.h);					lineTo(boxProperties.x, boxProperties.y);					endFill();				}								mc.mcSongTitleBackground.lineStyle(0.25, buttonStrokeColor);				with (mc.mcSongTitleBackground) 				{ // yourMovieClipInstance is the instance of movie clip you wish to draw to					moveTo(boxProperties.x, boxProperties.y);					beginFill(buttonOddColor);					lineTo(boxProperties.x + boxProperties.w, boxProperties.y);					lineTo(boxProperties.x + boxProperties.w, boxProperties.y + boxProperties.h);					lineTo(boxProperties.x, boxProperties.y + boxProperties.h);					lineTo(boxProperties.x, boxProperties.y);					endFill();				}			}									//set over shapes			mc.mcOverSongNumberBackground.lineStyle(0.25, overButtonStrokeColor);			with (mc.mcOverSongNumberBackground) 			{ // yourMovieClipInstance is the instance of movie clip you wish to draw to				moveTo(boxProperties.x, boxProperties.y);				beginFill(overButtonColor);				lineTo(boxProperties.x + boxProperties.w, boxProperties.y);				lineTo(boxProperties.x + boxProperties.w, boxProperties.y + boxProperties.h);				lineTo(boxProperties.x, boxProperties.y + boxProperties.h);				lineTo(boxProperties.x, boxProperties.y);				endFill();			}						mc.mcOverSongLengthBackground.lineStyle(0.25, overButtonStrokeColor);			with (mc.mcOverSongLengthBackground) 			{ // yourMovieClipInstance is the instance of movie clip you wish to draw to				moveTo(boxProperties.x, boxProperties.y);				beginFill(overButtonColor);				lineTo(boxProperties.x + boxProperties.w, boxProperties.y);				lineTo(boxProperties.x + boxProperties.w, boxProperties.y + boxProperties.h);				lineTo(boxProperties.x, boxProperties.y + boxProperties.h);				lineTo(boxProperties.x, boxProperties.y);				endFill();			}						mc.mcOverSongTitleBackground.lineStyle(0.25, overButtonStrokeColor);			with (mc.mcOverSongTitleBackground) 			{ // yourMovieClipInstance is the instance of movie clip you wish to draw to				moveTo(boxProperties.x, boxProperties.y);				beginFill(overButtonColor);				lineTo(boxProperties.x + boxProperties.w, boxProperties.y);				lineTo(boxProperties.x + boxProperties.w, boxProperties.y + boxProperties.h);				lineTo(boxProperties.x, boxProperties.y + boxProperties.h);				lineTo(boxProperties.x, boxProperties.y);				endFill();			}						mc.mcOverSongNumberBackground._x = 0;			mc.mcOverSongNumberBackground._width = 25;			mc.mcOverSongNumberBackground._height = heightButton;						mc.mcOverSongLengthBackground._x = mcMask._width - 51;			mc.mcOverSongLengthBackground._width = 50;			mc.mcOverSongLengthBackground._height = heightButton;						mc.mcOverSongTitleBackground._x = mc.mcOverSongNumberBackground._width + 2;			mc.mcOverSongTitleBackground._width = mcMask._width - mc.mcOverSongNumberBackground._width - mc.mcOverSongLengthBackground._width - 2;			mc.mcOverSongTitleBackground._height = heightButton;						//*******************						//set pressed shape			var colArrayPressed:Array = [pressedButtonBeginColor, pressedButtonEndColor]; // your colors			mc.mcPressedSongNumberBackground.lineStyle(0.25, pressedButtonStrokeColor);						with (mc.mcPressedSongNumberBackground) 			{ // yourMovieClipInstance is the instance of movie clip you wish to draw to				moveTo(boxProperties.x, boxProperties.y);				beginGradientFill("linear", colArrayPressed, alpArray, sprArray, matrixData);				lineTo(boxProperties.x + boxProperties.w, boxProperties.y);				lineTo(boxProperties.x + boxProperties.w, boxProperties.y + boxProperties.h);				lineTo(boxProperties.x, boxProperties.y + boxProperties.h);				lineTo(boxProperties.x, boxProperties.y);				endFill();			}						mc.mcPressedSongLengthBackground.lineStyle(0.25, pressedButtonStrokeColor);			with (mc.mcPressedSongLengthBackground) 			{ // yourMovieClipInstance is the instance of movie clip you wish to draw to				moveTo(boxProperties.x, boxProperties.y);				beginGradientFill("linear", colArrayPressed, alpArray, sprArray, matrixData);				lineTo(boxProperties.x + boxProperties.w, boxProperties.y);				lineTo(boxProperties.x + boxProperties.w, boxProperties.y + boxProperties.h);				lineTo(boxProperties.x, boxProperties.y + boxProperties.h);				lineTo(boxProperties.x, boxProperties.y);				endFill();			}						mc.mcPressedSongTitleBackground.lineStyle(0.25, pressedButtonStrokeColor);			with (mc.mcPressedSongTitleBackground) 			{ // yourMovieClipInstance is the instance of movie clip you wish to draw to				moveTo(boxProperties.x, boxProperties.y);				beginGradientFill("linear", colArrayPressed, alpArray, sprArray, matrixData);				lineTo(boxProperties.x + boxProperties.w, boxProperties.y);				lineTo(boxProperties.x + boxProperties.w, boxProperties.y + boxProperties.h);				lineTo(boxProperties.x, boxProperties.y + boxProperties.h);				lineTo(boxProperties.x, boxProperties.y);				endFill();			}						mc.mcPressedSongNumberBackground._x = 0;			mc.mcPressedSongNumberBackground._width = 25;			mc.mcPressedSongNumberBackground._height = heightButton;						mc.mcPressedSongLengthBackground._x = mcMask._width - 51;			mc.mcPressedSongLengthBackground._width = 50;			mc.mcPressedSongLengthBackground._height = heightButton;						mc.mcPressedSongTitleBackground._x = mc.mcPressedSongNumberBackground._width + 2;			mc.mcPressedSongTitleBackground._width = mcMask._width - mc.mcPressedSongNumberBackground._width - mc.mcPressedSongLengthBackground._width - 2;			mc.mcPressedSongTitleBackground._height = heightButton;						//*******************************						//buy, download buttons			var colArrayNormal:Array = [buyButtonBeginColor, buyButtonEndColor];						mc.mcBuy.mcNormal.lineStyle(0.25, buyButtonStrokeColor);			with (mc.mcBuy.mcNormal) 			{ // yourMovieClipInstance is the instance of movie clip you wish to draw to				moveTo(boxProperties.x, boxProperties.y);				beginGradientFill("linear", colArrayNormal, alpArray, sprArray, matrixData);				lineTo(boxProperties.x + boxProperties.w, boxProperties.y);				lineTo(boxProperties.x + boxProperties.w, boxProperties.y + boxProperties.h);				lineTo(boxProperties.x, boxProperties.y + boxProperties.h);				lineTo(boxProperties.x, boxProperties.y);				endFill();			}			mc.mcDownload.mcNormal.lineStyle(0.25, buyButtonStrokeColor);			with (mc.mcDownload.mcNormal) 			{ // yourMovieClipInstance is the instance of movie clip you wish to draw to				moveTo(boxProperties.x, boxProperties.y);				beginGradientFill("linear", colArrayNormal, alpArray, sprArray, matrixData);				lineTo(boxProperties.x + boxProperties.w, boxProperties.y);				lineTo(boxProperties.x + boxProperties.w, boxProperties.y + boxProperties.h);				lineTo(boxProperties.x, boxProperties.y + boxProperties.h);				lineTo(boxProperties.x, boxProperties.y);				endFill();			}			mc.mcDownload.mcNormal._width = heightButton - 9;			mc.mcDownload.mcNormal._height = heightButton - 9;			mc.mcBuy.mcNormal._width = heightButton - 9;			mc.mcBuy.mcNormal._height = heightButton - 9;									var colArrayOver:Array = [buyButtonOverBeginColor, buyButtonOverEndColor];						mc.mcBuy.mcOver.lineStyle(0.25, buyButtonOverStrokeColor);			with (mc.mcBuy.mcOver) 			{ // yourMovieClipInstance is the instance of movie clip you wish to draw to				moveTo(boxProperties.x, boxProperties.y);				beginGradientFill("linear", colArrayOver, alpArray, sprArray, matrixData);				lineTo(boxProperties.x + boxProperties.w, boxProperties.y);				lineTo(boxProperties.x + boxProperties.w, boxProperties.y + boxProperties.h);				lineTo(boxProperties.x, boxProperties.y + boxProperties.h);				lineTo(boxProperties.x, boxProperties.y);				endFill();			}			mc.mcDownload.mcOver.lineStyle(0.25, buyButtonOverStrokeColor);			with (mc.mcDownload.mcOver) 			{ // yourMovieClipInstance is the instance of movie clip you wish to draw to				moveTo(boxProperties.x, boxProperties.y);				beginGradientFill("linear", colArrayOver, alpArray, sprArray, matrixData);				lineTo(boxProperties.x + boxProperties.w, boxProperties.y);				lineTo(boxProperties.x + boxProperties.w, boxProperties.y + boxProperties.h);				lineTo(boxProperties.x, boxProperties.y + boxProperties.h);				lineTo(boxProperties.x, boxProperties.y);				endFill();			}			mc.mcDownload.mcOver._width = heightButton - 9;			mc.mcDownload.mcOver._height = heightButton - 9;			mc.mcBuy.mcOver._width = heightButton - 9;			mc.mcBuy.mcOver._height = heightButton - 9;									var colArrayPressed:Array = [buyButtonPressedBeginColor, buyButtonPressedEndColor];						mc.mcBuy.mcPressed.lineStyle(0.25, buyButtonPressedStrokeColor);			with (mc.mcBuy.mcPressed) 			{ // yourMovieClipInstance is the instance of movie clip you wish to draw to				moveTo(boxProperties.x, boxProperties.y);				beginGradientFill("linear", colArrayPressed, alpArray, sprArray, matrixData);				lineTo(boxProperties.x + boxProperties.w, boxProperties.y);				lineTo(boxProperties.x + boxProperties.w, boxProperties.y + boxProperties.h);				lineTo(boxProperties.x, boxProperties.y + boxProperties.h);				lineTo(boxProperties.x, boxProperties.y);				endFill();			}			mc.mcDownload.mcOver.lineStyle(0.25, buyButtonPressedStrokeColor);			with (mc.mcDownload.mcPressed) 			{ // yourMovieClipInstance is the instance of movie clip you wish to draw to				moveTo(boxProperties.x, boxProperties.y);				beginGradientFill("linear", colArrayPressed, alpArray, sprArray, matrixData);				lineTo(boxProperties.x + boxProperties.w, boxProperties.y);				lineTo(boxProperties.x + boxProperties.w, boxProperties.y + boxProperties.h);				lineTo(boxProperties.x, boxProperties.y + boxProperties.h);				lineTo(boxProperties.x, boxProperties.y);				endFill();			}			mc.mcDownload.mcPressed._width = heightButton - 9;			mc.mcDownload.mcPressed._height = heightButton - 9;			mc.mcBuy.mcPressed._width = heightButton - 9;			mc.mcBuy.mcPressed._height = heightButton - 9;						mc.mcDownload.mcShape.setColor(buyButtonSignColor);			mc.mcBuy.mcShape.setColor(buyButtonSignColor);						mc.mcDownload.mcNormal.cacheAsBitmap = true;			mc.mcBuy.mcNormal.cacheAsBitmap = true;			mc.mcDownload.mcOver.cacheAsBitmap = true;			mc.mcBuy.mcOver.cacheAsBitmap = true;			mc.mcDownload.mcPressed.cacheAsBitmap = true;			mc.mcBuy.mcPressed.cacheAsBitmap = true;						mc.mcDownload.mcPressed._alpha = 0;			mc.mcBuy.mcPressed._alpha = 0;			mc.mcDownload.mcOver._alpha = 0;			mc.mcBuy.mcOver._alpha = 0;						//mc.mcBuy.onRollOver = Proxy.create(this, buyRollOver, mc.mcBuy);			//mc.mcBuy.onRollOut = Proxy.create(this, buyRollOut, mc.mcBuy);			//mc.mcDownload.onRollOver = Proxy.create(this, buyRollOver, mc.mcDownload);			//mc.mcDownload.onRollOut = Proxy.create(this, buyRollOut, mc.mcDownload);						mc.mcDownload.mcShape._x = -2;			mc.mcDownload.mcShape._y = -2;			mc.mcBuy.mcShape._x = -2;			mc.mcBuy.mcShape._y = -2;			mc.mcDownload._y = 5;			mc.mcBuy._y = 5;						if(buyArray[i].toLowerCase() == "true")			{				mc.mcBuy._visible = true;				mc.mcDownload._visible = false;				mc.mcBuy._x = Math.round(mc.mcPressedSongTitleBackground._x + mc.mcPressedSongTitleBackground._width - heightButton);			}			else			{				if(downloadArray[i].toLowerCase() == "true")				{					mc.mcDownload._visible = true;					mc.mcBuy._visible = false;					mc.mcDownload._x = Math.round(mc.mcPressedSongTitleBackground._x + mc.mcPressedSongTitleBackground._width - heightButton);				}				else				{					mc.mcDownload._visible = false;					mc.mcBuy._visible = false;				}			}						//********************************						mc.mcHitBackground._width = mcMask._width;			mc.mcHitBackground._height = heightButton;			mc.mcHitBackground._alpha = 0;									mc.mcSongNumberBackground._x = 0;			mc.mcSongNumberBackground._width = 25;			mc.mcSongNumberBackground._height = heightButton;						mc.mcSongLengthBackground._x = mcMask._width - 51;			mc.mcSongLengthBackground._width = 50;			mc.mcSongLengthBackground._height = heightButton;						mc.mcSongTitleBackground._x = mc.mcSongNumberBackground._width + 2;			mc.mcSongTitleBackground._width = mcMask._width - mc.mcSongNumberBackground._width - mc.mcSongLengthBackground._width - 2;			mc.mcSongTitleBackground._height = heightButton;						mc.mcMask._x = mc.mcSongNumberBackground._width + 7;			mc.mcMask._width = mcMask._width - mc.mcSongNumberBackground._width - mc.mcSongLengthBackground._width - 15 - heightButton;						mc.mcSongDuration._x = Math.round(mc.mcSongLengthBackground._x + (mc.mcSongLengthBackground._width - mc.mcSongDuration._width)/2);			mc._y = i*(mc._height) + 10;			mc.mcSongUpBackground._width = width;			mc.mcSongDownBackground._width = width;			mc.mcSongGlow._width = width;						mc.mcSongTitle._x = mc.mcSongTitleBackground._x + 5;						mc.mcSongNumber._x = Math.round((mc.mcSongNumberBackground._width - mc.mcSongNumber._width)/2 + 1);						mc.mcHitBackground.onRollOver = Proxy.create(this, songOnRollOver, mc);			mc.mcHitBackground.onRollOut = mc.mcHitBackground.onReleaseOutside = Proxy.create(this, songOnRollOut, mc);			mc.mcHitBackground.onRelease = Proxy.create(this, songOnRelease, mc);						songsList[i] = songsArray[i];			songsArranged[i] = i;			songsRandom[i] = i;					}				caurina.transitions.Tweener.addTween(mcContent, {_y:0, time:0.1*nodes, transition:"easeOutExpo"});		caurina.transitions.Tweener.addTween(mcBackground, {_alpha:100, time:0.1*nodes, transition:"easeOutExpo"});		songOnRelease(mcContent["mcPlaylistButton" + 0]);	}		/**	 * buy, download release, out	 */	private function downloadRelease(mc : MovieClip) : Void	{		var title : String = mc._name;		var index : Number = Number(title.substring(title.lastIndexOf("n")+1,title.length));		getURL(Main.getInstance().mcAlbums.pathTo + "/" + songsSource[index], "_blank");	}	private function buyRelease(mc : MovieClip) : Void	{		var title : String = mc._name;		var index : Number = Number(title.substring(title.lastIndexOf("n")+1,title.length));		//getURL(songsSource[index]);	}		private function buyRollOver(mc : MovieClip) : Void	{		caurina.transitions.Tweener.addTween(mc.mcNormal,{_alpha:0, time:0.5, transition:"easeOutExpo"});		caurina.transitions.Tweener.addTween(mc.mcNormal,{_alpha:0, time:0.5, transition:"easeOutExpo"});				//caurina.transitions.Tweener.addTween(mc.mcBuy.mcOver,{_alpha:0, time:0.5, transition:"easeOutExpo"});		//caurina.transitions.Tweener.addTween(mc.mcDownload.mcOver,{_alpha:0, time:0.5, transition:"easeOutExpo"});		caurina.transitions.Tweener.addTween(mc.mcPressed,{_alpha:100, time:0.5, transition:"easeOutExpo"});		caurina.transitions.Tweener.addTween(mc.mcPressed,{_alpha:100, time:0.5, transition:"easeOutExpo"});	}		private function buyRollOut(mc : MovieClip) : Void	{		caurina.transitions.Tweener.addTween(mc.mcNormal,{_alpha:100, time:0.5, transition:"easeOutExpo"});		caurina.transitions.Tweener.addTween(mc.mcNormal,{_alpha:100, time:0.5, transition:"easeOutExpo"});				//caurina.transitions.Tweener.addTween(mc.mcBuy.mcOver,{_alpha:0, time:0.5, transition:"easeOutExpo"});		//caurina.transitions.Tweener.addTween(mc.mcDownload.mcOver,{_alpha:0, time:0.5, transition:"easeOutExpo"});		caurina.transitions.Tweener.addTween(mc.mcPressed,{_alpha:0, time:0.5, transition:"easeOutExpo"});		caurina.transitions.Tweener.addTween(mc.mcPressed,{_alpha:0, time:0.5, transition:"easeOutExpo"});	}			/**	 * on mouse move over the playlist function 	 */	private function songsMouseMove() : Void	{		var yMouse: Number = _root._ymouse - Main.getInstance()._y - Main.getInstance().mcAlbums._y - this._y - mcMask._y;		var xMouse: Number = _root._xmouse - Main.getInstance()._x - Main.getInstance().mcAlbums._x - this._x - mcMask._x;		var yLimit: Number = _root._y + Main.getInstance()._y + Main.getInstance().mcAlbums._y + this._y + mcMask._y + mcMask._height;		var xLimit: Number = _root._x + Main.getInstance()._x + Main.getInstance().mcAlbums._x + this._x + mcMask._x + mcMask._width;						if(mcMask._height < mcContent._height + 1)		{			if (yMouse > 0 && yMouse < mcMask._height && xMouse > 0 && xMouse < mcMask._width)			{				var buffer = mcMask._height/4;				var ratio = yMouse / mcMask._height;			  	var diffMenu = mcContent._height - mcMask._height + buffer;			  	var destYMenu = Math.floor(-ratio * diffMenu) + buffer / 2;			  	this.onEnterFrame = Proxy.create(this, songsOnEnterFrame, destYMenu);			}		}	}		/**	 * onEnterFrame to scroll the playlist function	 */	private function songsOnEnterFrame(number : Number) : Void	{		mcContent._y += Math.round((number - mcContent._y) / Main.getInstance().mcAlbums.playlistSpeed);		if (mcContent._y > 0) 		{			mcContent._y = 0;		}		else 		{			if (mcContent._y < mcMask._height - mcContent._height - 1) 			{				mcContent._y = Math.round(mcMask._height - mcContent._height - 1);			}		}	}		/**	 * roll over the playlist function	 */	private function songOnRollOver(mc : MovieClip) : Void	{		var title : String = mc._name;		var index : Number = Number(title.substring(title.lastIndexOf("n")+1,title.length));				mc.onMouseMove = Proxy.create(this, songMouseMove, mc);				if(songIndex != index)		{			caurina.transitions.Tweener.addTween(mc.mcSongTitle,{_color:overTextColor, time:0.5, transition:"easeOutExpo"});			caurina.transitions.Tweener.addTween(mc.mcSongNumber,{_color:overTextColor, time:0.5, transition:"easeOutExpo"});			caurina.transitions.Tweener.addTween(mc.mcSongDuration,{_color:overTextColor, time:0.5, transition:"easeOutExpo"});			caurina.transitions.Tweener.addTween(mc.mcOverSongNumberBackground,{_alpha:100, time:0.5, transition:"easeOutExpo"});			caurina.transitions.Tweener.addTween(mc.mcOverSongLengthBackground,{_alpha:100, time:0.5, transition:"easeOutExpo"});			caurina.transitions.Tweener.addTween(mc.mcOverSongTitleBackground,{_alpha:100, time:0.5, transition:"easeOutExpo"});						caurina.transitions.Tweener.addTween(mc.mcBuy.mcOver,{_alpha:100, time:0.5, transition:"easeOutExpo"});			caurina.transitions.Tweener.addTween(mc.mcDownload.mcOver,{_alpha:100, time:0.5, transition:"easeOutExpo"});			caurina.transitions.Tweener.addTween(mc.mcBuy.mcNormal,{_alpha:0, time:0.5, transition:"easeOutExpo"});			caurina.transitions.Tweener.addTween(mc.mcDownload.mcNormal,{_alpha:0, time:0.5, transition:"easeOutExpo"});						beginTitleSliding(mc, 0);		}	}		/**	 * ssong mouse move	 */	private function songMouseMove(mc : MovieClip) : Void	{		var title : String = mc._name;		var index : Number = Number(title.substring(title.lastIndexOf("n")+1,title.length));				if(mc.mcBuy.hitTest(_root._xmouse, _root._ymouse))		{			buyRollOver(mc.mcBuy);		}		else		{			if(songIndex != index)			{				buyRollOut(mc.mcBuy);			}		}				if(mc.mcDownload.hitTest(_root._xmouse, _root._ymouse))		{			buyRollOver(mc.mcDownload);		}		else		{			if(songIndex != index)			{				buyRollOut(mc.mcDownload);			}		}	}		/**	 * animation if title is larger than the mask associated	 */	private function beginTitleSliding(mc : MovieClip, dir : Number) : Void	{		if(mc.mcSongTitle._width > mc.mcMask._width)		{			mc.direction = dir;			_global['clearInterval'](mc.interval);			mc.interval = _global['setInterval'](this, 'songEnterFrame', 75, mc, dir);//Proxy.create(this, songEnterFrame, mc);		}		}		private function beginSongSlide(mc : MovieClip, dir : Number) : Void	{		_global['clearInterval'](mc.interval);		mc.interval = _global['setInterval'](this, 'titleEnterFrame', 75, mc, dir);	}		/**	 * song title enter frame move	 */	private function songEnterFrame(mc : MovieClip, dir : Number) : Void	{		if(dir == 0)		{			mc.mcSongTitle._x --;						if(mc.mcSongTitle._x < mc.mcMask._x + mc.mcMask._width - mc.mcSongTitle._width)			{				dir = 1;				mc.mcSongTitle._x = mc.mcMask._x + mc.mcMask._width - mc.mcSongTitle._width;				_global['clearInterval'](mc.interval);				mc.timeout = _global['setTimeout'](this, 'beginTitleSliding', 1000, mc, dir);			}		}		else		{			mc.mcSongTitle._x ++;						if(mc.mcSongTitle._x > mc.mcMask._x)			{				mc.mcSongTitle._x = mc.mcMask._x;				dir = 0;				_global['clearInterval'](mc.interval);				mc.timeout = _global['setTimeout'](this, 'beginTitleSliding', 1000, mc, dir);			}		}	}		/**	 * move song title to the right	 */	private function rightMove(mc : MovieClip) : Void	{		caurina.transitions.Tweener.addTween(mc.mcSongTitle, {_x:Math.round(mc.mcMask._x), time:5, transition:"linear"}); //, onUpdate : function() : Void{mc.mcSongTitle._x = Math.round(mc.mcSongTitle._x);}});		_global['clearTimeout'](mc.timeOutID);		mc.timeOutID = _global['setTimeout'](this, 'leftMove', 5000, mc);	}		/**	 * move song title to the left	 */	private function leftMove(mc : MovieClip) : Void	{		caurina.transitions.Tweener.addTween(mc.mcSongTitle, {_x:Math.round(mc.mcMask._width + mc.mcMask._x - mc.mcSongTitle._width), time:5, transition:"linear"}); //, onUpdate : function() : Void{mc.mcSongTitle._x = Math.round(mc.mcSongTitle._x);}});		_global['clearTimeout'](mc.timeOutID);		mc.timeOutID = _global['setTimeout'](this, 'rightMove', 5000, mc);	}		/**	 * roll out the playlist function	 */	private function songOnRollOut(mc : MovieClip) : Void	{		var title : String = mc._name;		var index : Number = Number(title.substring(title.lastIndexOf("n")+1,title.length));				if(songIndex != index)		{			_global['clearInterval'](mc.interval);			_global['clearTimeout'](mc.timeout);			buyRollOut(mc.mcDownload);			buyRollOut(mc.mcBuy);			//delete mc.onEnterFrame;			delete mc.onMouseMove;			mc.mcSongTitle._x = mc.mcMask._x;						caurina.transitions.Tweener.addTween(mc.mcOverSongNumberBackground,{_alpha:0, time:0.5, transition:"easeOutExpo"});			caurina.transitions.Tweener.addTween(mc.mcOverSongLengthBackground,{_alpha:0, time:0.5, transition:"easeOutExpo"});			caurina.transitions.Tweener.addTween(mc.mcOverSongTitleBackground,{_alpha:0, time:0.5, transition:"easeOutExpo"});			caurina.transitions.Tweener.addTween(mc.mcSongTitle,{_color:null, time:0.5, transition:"easeOutExpo"});			caurina.transitions.Tweener.addTween(mc.mcSongNumber,{_color:null, time:0.5, transition:"easeOutExpo"});			caurina.transitions.Tweener.addTween(mc.mcSongDuration,{_color:null, time:0.5, transition:"easeOutExpo"});						caurina.transitions.Tweener.addTween(mc.mcBuy.mcOver,{_alpha:0, time:0.5, transition:"easeOutExpo"});			caurina.transitions.Tweener.addTween(mc.mcDownload.mcOver,{_alpha:0, time:0.5, transition:"easeOutExpo"});			caurina.transitions.Tweener.addTween(mc.mcBuy.mcNormal,{_alpha:100, time:0.5, transition:"easeOutExpo"});			caurina.transitions.Tweener.addTween(mc.mcDownload.mcNormal,{_alpha:100, time:0.5, transition:"easeOutExpo"});		}	}		/**	 * song release, playing sound	 */	public function songOnRelease(mc : MovieClip) : Void	{		var title : String = mc._name;		var index : Number = Number(title.substring(title.lastIndexOf("n")+1,title.length));				Main.getInstance().mcAlbums.mcBack.mcBackBtn.mcSongDescription.mcName.txt.text = songTitles[index];		//initialize loading bar				_global['clearInterval'](Main.getInstance().mcAlbums.mcBack.mcBackBtn.mcSongDescription.interval);		_global['clearTimeout'](Main.getInstance().mcAlbums.mcBack.mcBackBtn.mcSongDescription.timeout);//delete Main.getInstance().mcAlbums.mcBack.mcBackBtn.mcSongDescription.onEnterFrame;		Main.getInstance().mcAlbums.mcBack.mcBackBtn.mcSongDescription.mcName._x = Main.getInstance().mcAlbums.mcBack.mcBackBtn.mcSongDescription.mcMask._x;				if(mc.mcBuy.hitTest(_root._xmouse, _root._ymouse))		{			buyRelease(mc);		}		else		{			if(mc.mcDownload.hitTest(_root._xmouse, _root._ymouse))			{				downloadRelease(mc);			}			else			{				if(songIndex != index)				{					//begin sliding animation for album title					if(Main.getInstance().mcAlbums.mcBack.mcBackBtn.mcSongDescription.mcName._width > Main.getInstance().mcAlbums.mcBack.mcBackBtn.mcSongDescription.mcMask._width)					{						beginSongSlide(Main.getInstance().mcAlbums.mcBack.mcBackBtn.mcSongDescription, 0);						//Main.getInstance().mcAlbums.mcBack.mcBackBtn.mcSongDescription.direction = 0;						// Main.getInstance().mcAlbums.mcBack.mcBackBtn.mcSongDescription.onEnterFrame = Proxy.create(this, Main.getInstance().mcAlbums.titleEnterFrame, Main.getInstance().mcAlbums.mcBack.mcBackBtn.mcSongDescription);					}					//********										mc.useHandCursor = false;					mcContent["mcPlaylistButton" + songIndex].useHandCursor = true;					Main.getInstance().mcAlbums.mcControls.initializeLoadingBar();					delete mc.onMouseMove;										Main.getInstance().mcAlbums.mcControls.mcContent.mcControlsBtns.mcPlay.gotoAndStop(1);					//Main.getInstance().mcAlbums.mcControls.soundStatus = true;					Main.getInstance().mcAlbums.mcControls.soundPosition = null;					Main.getInstance().mcAlbums.mcControls.setTime(Main.getInstance().mcAlbums.mcControls.videoTimeConvert(0));										caurina.transitions.Tweener.addTween(mc.mcOverSongNumberBackground,{_alpha:0, time:0.5, transition:"easeOutExpo"});					caurina.transitions.Tweener.addTween(mc.mcOverSongLengthBackground,{_alpha:0, time:0.5, transition:"easeOutExpo"});					caurina.transitions.Tweener.addTween(mc.mcOverSongTitleBackground,{_alpha:0, time:0.5, transition:"easeOutExpo"});										caurina.transitions.Tweener.addTween(mc.mcPressedSongNumberBackground,{_alpha:100, time:0.5, transition:"easeOutExpo"});					caurina.transitions.Tweener.addTween(mc.mcPressedSongLengthBackground,{_alpha:100, time:0.5, transition:"easeOutExpo"});					caurina.transitions.Tweener.addTween(mc.mcPressedSongTitleBackground,{_alpha:100, time:0.5, transition:"easeOutExpo"});										caurina.transitions.Tweener.addTween(mc.mcBuy.mcNormal,{_alpha:0, time:0.5, transition:"easeOutExpo"});					caurina.transitions.Tweener.addTween(mc.mcDownload.mcNormal,{_alpha:0, time:0.5, transition:"easeOutExpo"});										caurina.transitions.Tweener.addTween(mc.mcBuy.mcOver,{_alpha:0, time:0.5, transition:"easeOutExpo"});					caurina.transitions.Tweener.addTween(mc.mcDownload.mcOver,{_alpha:0, time:0.5, transition:"easeOutExpo"});					caurina.transitions.Tweener.addTween(mc.mcBuy.mcPressed,{_alpha:100, time:0.5, transition:"easeOutExpo"});					caurina.transitions.Tweener.addTween(mc.mcDownload.mcPressed,{_alpha:100, time:0.5, transition:"easeOutExpo"});										caurina.transitions.Tweener.addTween(mc.mcSongTitle,{_color:pressedTextColor, time:0.5, transition:"easeOutExpo"});					caurina.transitions.Tweener.addTween(mc.mcSongDuration,{_color:pressedTextColor, time:0.5, transition:"easeOutExpo"});					caurina.transitions.Tweener.addTween(mc.mcSongNumber,{_color:pressedTextColor, time:0.5, transition:"easeOutExpo"});										caurina.transitions.Tweener.addTween(mcContent["mcPlaylistButton" + songIndex].mcSongTitle,{_color:null, time:0.5, transition:"easeOutExpo"});					caurina.transitions.Tweener.addTween(mcContent["mcPlaylistButton" + songIndex].mcSongDuration,{_color:null, time:0.5, transition:"easeOutExpo"});					caurina.transitions.Tweener.addTween(mcContent["mcPlaylistButton" + songIndex].mcSongNumber,{_color:null, time:0.5, transition:"easeOutExpo"});										caurina.transitions.Tweener.addTween(mcContent["mcPlaylistButton" + songIndex].mcPressedSongNumberBackground,{_alpha:0, time:0.5, transition:"easeOutExpo"});					caurina.transitions.Tweener.addTween(mcContent["mcPlaylistButton" + songIndex].mcPressedSongLengthBackground,{_alpha:0, time:0.5, transition:"easeOutExpo"});					caurina.transitions.Tweener.addTween(mcContent["mcPlaylistButton" + songIndex].mcPressedSongTitleBackground,{_alpha:0, time:0.5, transition:"easeOutExpo"});										caurina.transitions.Tweener.addTween(mcContent["mcPlaylistButton" + songIndex].mcBuy.mcPressed,{_alpha:0, time:0.5, transition:"easeOutExpo"});					caurina.transitions.Tweener.addTween(mcContent["mcPlaylistButton" + songIndex].mcDownload.mcPressed,{_alpha:0, time:0.5, transition:"easeOutExpo"});										caurina.transitions.Tweener.addTween(mcContent["mcPlaylistButton" + songIndex].mcBuy.mcNormal,{_alpha:100, time:0.5, transition:"easeOutExpo"});					caurina.transitions.Tweener.addTween(mcContent["mcPlaylistButton" + songIndex].mcDownload.mcNormal,{_alpha:100, time:0.5, transition:"easeOutExpo"});										_global['clearInterval'](mcContent["mcPlaylistButton" + songIndex].interval);					_global['clearTimeout'](mcContent["mcPlaylistButton" + songIndex].timeout);//delete mcContent["mcPlaylistButton" + songIndex].onEnterFrame;					mcContent["mcPlaylistButton" + songIndex].mcSongTitle._x = mcContent["mcPlaylistButton" + songIndex].mcMask._x;										loadSound = false;					_soundbuftime = 3;					numPercentLoaded = 0;					//recreate the sound					sound.stop();					sound = new Sound();					clearInterval(interval);					if(Main.getInstance().mcAlbums.mcControls.soundActivePlaying == true)					{						loadSound = true;						//trace("let's load");						sound.loadSound(Main.getInstance().mcAlbums.pathTo + "/" + songsList[index], true);						sound.onLoad = Proxy.create(this, soundOnLoad);						interval = setInterval(checkProgress, 100, sound);						sound.onSoundComplete = Proxy.create(this, soundOnSoundComplete);					}					songPublicIndex = index;										sound.setVolume(Main.getInstance().mcAlbums.mcControls.allSoundsVolume);					Main.getInstance().mcAlbums.mcControls.updateSlider();					//caurina.transitions.Tweener.addTween(Main.getInstance().mcAlbums.mcPlaylist.sound, {_sound_volume:Main.getInstance().mcAlbums.mcControls.allSoundsVolume, time:1, transition:"linear"});					if(Main.getInstance().mcAlbums.mcControls.soundActivePlaying == true)					{						Main.getInstance().mcAlbums.mcControls.playSong(sound);					}					else					{						sound.stop();					}					songIndex = index;					songListIndex = index;				}			}		}	}		/**	 * sound load	 */	public function soundLoadEvent(str : String) : Void	{		sound.loadSound(str, true);		sound.onLoad = Proxy.create(this, soundOnLoad);		sound.onSoundComplete = Proxy.create(this, soundOnSoundComplete);	}		/**	 * song name enter frame move	 */	public function titleEnterFrame(mc : MovieClip, dir : Number) : Void	{		if(dir == 0)		{			mc.mcName._x --;						if(mc.mcName._x < mc.mcMask._x + mc.mcMask._width - mc.mcName._width)			{				dir = 1;				mc.mcName._x = mc.mcMask._x + mc.mcMask._width - mc.mcName._width;				_global['clearInterval'](mc.interval);				mc.timeout = _global['setTimeout'](this, 'beginSongSlide', 1000, mc, dir);			}		}		else		{			mc.mcName._x ++;						if(mc.mcName._x > mc.mcMask._x)			{				mc.mcName._x = mc.mcMask._x;				dir = 0;				_global['clearInterval'](mc.interval);				mc.timeout = _global['setTimeout'](this, 'beginSongSlide', 1000, mc, dir);			}		}	}		/**	 * sound complete event, start next sound from playlist and set the playlist looping	 */	private function soundOnSoundComplete() : Void	{		//caurina.transitions.Tweener.addTween(sound, {_sound_volume:0, time:1, transition:"linear"});		clearInterval(Main.getInstance().mcAlbums.mcControls.timeInterval);	    //trace(songListIndex);	    if(songListIndex < songsNumber - 1)	    {	    	songListIndex++;	    	songOnRelease(mcContent["mcPlaylistButton" + songsRandom[songListIndex]]);	    }	    else	    {	    	if(Main.getInstance().mcAlbums.playlistLooping == "true")	    	{		    	songListIndex = 0;		    	songOnRelease(mcContent["mcPlaylistButton" + songsRandom[songListIndex]]);	    	}	    }	}	/**	 * sound onLoad	 */	private function soundOnLoad(success : Boolean) : Void	{		if(success)		{			//clearInterval(interval);			Main.getInstance().mcAlbums.mcControls.removeLoadingBar();		}		else		{			trace("Sound doesn't load");		}	}		/**	 * the downloading progress of the Sound object passed as a reference.	 */	private function checkProgress (soundObj : Object) : Void 	{	    var numBytesLoaded : Number = soundObj.getBytesLoaded();	    var numBytesTotal : Number = soundObj.getBytesTotal();	    	    if (!isNaN(Math.floor(numBytesLoaded / numBytesTotal * 100))) 	    {	        var width : Number = Main.getInstance().mcAlbums.mcControls.barLength;	        Main.getInstance().mcAlbums.mcControls.initProgressLoadingBar(Math.floor(numBytesLoaded / numBytesTotal * 100) * width/100);	        		}	}		/**	 * delete the existing playlist to create another one	 */	public function deletePlaylist(nodes : Number) : Void	{		delete this.onMouseMove;		delete this.onEnterFrame;		caurina.transitions.Tweener.addTween(mcContent,{_y:-27* nodes, time:1, onComplete:removePlaylist(nodes), transition:"easeOutExpo"});		caurina.transitions.Tweener.addTween(mcBackground,{_alpha:0, time:0.5, transition:"easeOutExpo"});		caurina.transitions.Tweener.addTween(sound, {_sound_volume:0, time:1, onComplete:function(){this.stop();},transition:"linear"});			}		/**	 * remove playlist function	 */	private function removePlaylist(nodes : Number) : Void	{		mcMask._visible = false;		songIndex = null;		for(var i = 0; i < nodes; i++)		{			mcContent["mcPlaylistButton" + i].removeMovieClip();		}	}		/**	 * randomize array	 */	public function randomizeArray(arr : Array) : Array	{		var i = arr.length;		if (i == 0) return;		while (--i)		{			var j = Math.floor(Math.random()*(i+1));			var tmp1 = arr[i];			var tmp2 = arr[j];			arr[i] = tmp2;			arr[j] = tmp1;		}		return arr;	}}