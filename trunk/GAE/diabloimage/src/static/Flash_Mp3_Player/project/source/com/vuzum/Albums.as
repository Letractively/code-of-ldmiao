/** * * www.FLABELL.com * New Flash Components Every Week! * * * Flash Mp3 Player v1.0 (03/23/2009) <http://www.flabell.com/> *  * Copyright (c) 2009 Vuzum Media <http://www.vuzum.com/> * For information about licencing, please visit <http://www.flabell.com/terms> * * * email: support@flabell.com * */ import mx.utils.*import caurina.*;import com.vuzum.utils.*;import com.vuzum.Main;import flash.filters.*;import flash.geom.Rectangle;class com.vuzum.Albums extends MovieClip {	//xml data	private var xmlData : XML;	public var settingsData : XML;	private var albumImage : Array;	private var titles : Array;	private var authors : Array;	private var glowFilter : GlowFilter;	private var albumTimeout : Number;		private var albumsNumber : Number;	public var sWidth : Number;	public var sHeight : Number;	private var imageWidth : Number;	private var imageHeight : Number;	private var titleHeight : Number;	private var controlsHeight : Number;	private var settingsPath : String;	private var contentPath : String;	private var xmlLoaded : Boolean;	public var clickOnAlbum : Boolean = true;		private var index : Number;	private var albumsOrPlaylist : Boolean;	public var diffBet : Number = 10;	private var xTooltip : Number;	private var playlistVisible : Boolean = false;	private var titleAnimation : Number;	private var isAlbum : Boolean = true;	private var lastAlbumClicked : Number;		//internal menbers	private var mcBackground : MovieClip;	private var mcMata : MovieClip;	private var mcContainer : MovieClip;	private var mcScrollbar : MovieClip;	private var mcMask : MovieClip;	public var mcBack : MovieClip;	private var mcUpBar : MovieClip;	private var mcDownBar : MovieClip;	private var mcMiddleLine : MovieClip;	private var mcStartText : MovieClip;	public var mcPlaylist : MovieClip;	public var mcControls : MovieClip;	private var mcBottomBackground : MovieClip;	public var mcEmbedCode : MovieClip;	public var mcTooltip : MovieClip;	private var imageReflection : Reflect;	private var reflectionInterval : Number;		///xml settings	public var backgroundColor : Number;	public var scrollBackgroundColor : Number;	public var scrollButtonBamcAlbumDescriptionckgroundColor : Number;	public var imagesBorder : Number;	public var imagesBorderColor : Number;	public var imagesBorderOverColor : Number;	public var topMargin : Number;	public var playerMargin : Number;	public var reflectionSize : Number;	public var reflectionAlpha : Number;	public var playlistBackgroundBeginColor : Number;	public var playlistBackgroundEndColor : Number;	public var scrollBgLargeHeight : Number;	public var scrollBtnHeight : Number;	public var scrollBgHeight : Number;	public var scrollButtonBeginColor : Number;	public var scrollButtonEndColor : Number;	public var scrollBgBeginColor : Number;	public var scrollBgMiddleColor : Number;	public var scrollBgEndColor : Number;	public var scrollLargeBgBeginColor : Number;	public var scrollLargeBgEndColor : Number;	public var pathTo : String;	public var firstPageBarHeight : Number;	public var firstPageBarBeginColor : Number;	public var firstPageBarEndColor : Number;	public var autoscrollingSpeed : Number;	public var middleLineColor : Number;	public var startText : String;	public var startTextColor : Number;	public var scrollbarControlLinesColor : Number;	public var scrollbarControlBeginColor : Number;	public var scrollbarControlEndColor : Number;	public var autoscrollBegin : String;	public var firstPageStrokeColor : Number;	public var scrollBgStrokeColor : Number;	public var scrollBgLargeStrokeColor : Number;	public var albumBackgroundBeginColor : Number;	public var albumBackgroundEndColor : Number;	public var albumBackgroundStrokeColor : Number;	public var albumNameBackgroundColor : Number;	public var albumNameBackgroundStrokeColor : Number;	public var albumNameTextColor : Number;	public var albumAuthorTextColor : Number;	public var albumInfoColor : Number;	public var albumInfoOverColor : Number;	public var albumArrowColor : Number;	public var albumArrowBackgroundColor : Number;	public var albumArrowOverColor : Number;		public var backButtonOverColor : Number;	public var backAlbumsBackgroundBeginColor : Number;	public var backAlbumsBackgroundEndColor : Number;	public var backAlbumsBackgroundStrokeColor : Number;	public var backAlbumsTextColor : Number;	public var backAlbumsShapeColor : Number;	public var albumBackgroundHeight : Number;	public var backBackgroundHeight : Number;	public var backButtonText : String;	public var albumSongTime : Number;	public var albumTitleHeight : Number;	public var playlistBackgroundColor : Number;	public var playlistBackgroundStrokeColor : Number;	public var playlistEvenButtonBeginColor : Number;	public var playlistEvenButtonEndColor : Number;	public var playlistOddButtonColor : Number;	public var playlistButtonTextColor : Number;	public var playlistOverButtonColor : Number;	public var playlistOverButtonTextColor : Number;	public var playlistPressedButtonBeginColor : Number;	public var playlistPressedButtonEndColor : Number;	public var playlistPressedButtonTextColor : Number;	public var playlistButtonStrokeColor : Number;	public var playlistOverButtonStrokeColor : Number;	public var controlsBackgroundBeginColor : Number;	public var controlsBackgroundEndColor : Number;	public var controlsBackgroundStrokeColor : Number;	public var controlsBackgroundHeight : Number;	public var controlsTimeBarBeginColor : Number; 	public var controlsTimeBarEndColor : Number;	public var controlsTimeBarBackgroundBeginColor : Number;	public var controlsTimeBarBackgroundMiddleColor : Number;	public var controlsTimeBarBackgroundEndColor : Number;	public var controlsTimeBarBackgroundStrokeColor : Number;	public var controlsTimeBarBackgroundHeight : Number; 	public var controlsTimeBarLoadingColor : Number; 	public var controlsTextColor : Number; 	public var controlsButtonsBackgroundColor : Number; 	public var controlsButtonsBackgroundStrokeColor : Number; 	public var controlsButtonsBeginColor : Number; 	public var controlsButtonsMiddleColor : Number; 	public var controlsButtonsEndColor : Number; 	public var controlsButtonsOverBeginColor : Number; 	public var controlsButtonsOverMiddleColor : Number; 	public var controlsButtonsOverEndColor : Number; 	public var controlsButtonsBackgroundOverColor : Number;	public var volumeButtonActiveBeginColor : Number;	public var volumeButtonActiveEndColor : Number;	public var volumeButtonNormalBeginColor : Number;	public var volumeButtonNormalEndColor : Number;	public var volumeButtonInactiveColor : Number;	public var volumeSliderStrokeBeginColor : Number;	public var volumeSliderStrokeEndColor : Number;	public var volumeSliderMainBackColor : Number;	public var volumeSliderMainBackStrokeColor : Number;	public var volumeSliderBeginColor : Number;	public var volumeSliderEndColor : Number;	public var mainSliderColor : Number;	public var bottomBackgroundBeginColor : Number; 	public var bottomBackgroundEndColor : Number;	public var boolReflect : String;	public var playlistPressedButtonStrokeColor : Number;	public var embedButtonStrokeColor : Number;	public var embedButtonBeginColor : Number;	public var embedButtonMiddleColor : Number;	public var embedButtonEndColor : Number;	public var embedButtonSymbolColor : Number;	public var embedButtonSymbolOverColor : Number;	public var embedButtonVisibility : String;		public var embedWindowMainStrokeColor : Number;	public var embedWindowMainColor : Number;	public var embedWindowColor : Number;	public var embedWindowStrokeColor : Number;	public var embedWindowTextColor : Number;	public var embedWindowButtonsColor : Number;	public var embedWindowButtonsStrokeColor : Number;	public var embedWindowButtonsTextColor : Number;	public var embedWindowTitleText : String;	public var embedWindowCopyText : String;	public var embedWindowButtonRollOverColor : Number;	public var controlsButtonsStrokeColor : Number;	public var embedWindowButtonBackgroundRollOverColor : Number;	public var embedCodeTextColor : Number;		public var distanceBetweenImages : Number;	public var sidewaysGalleryMargin : Number;		public var stopMoving : String;	public var playlistLooping : String;	public var splashscreen : String;	public var tooltipVisibility : String;	public var tooltipBackgroundColor : Number;	public var tooltipTextColor : Number;	public var tooltipRoundsColor : Number;		//share, buy buttons properties	public var buyButtonBeginColor : Number;	public var buyButtonEndColor : Number;	public var buyButtonStrokeColor : Number;	public var buyButtonOverBeginColor : Number	public var buyButtonOverEndColor : Number;	public var buyButtonOverStrokeColor : Number;	public var buyButtonPressedBeginColor : Number;	public var buyButtonPressedEndColor : Number;	public var buyButtonPressedStrokeColor : Number;	public var buyButtonSignColor : Number;		//shuffle button	public var shuffleColor : Number;	public var shuffleOverColor : Number;	public var autoslidePause : Number;	public var soundVol : Number;	public var playlistSpeed : Number;			/*	 * class constructor	 */	public function Albums()	{		//set flashvars		pathTo = String(_root.pathToFiles);				if(pathTo == "undefined" || pathTo == undefined)		{			pathTo = "player";		}				//sWidth = Number(_root.stageW);		//sHeight = Number(_root.stageH);		//if(isNaN(sWidth)) sWidth = Stage.width;		//if(isNaN(sHeight)) sHeight = Stage.height;				settingsPath = pathTo + "/" + _root.settingsPath;		if(isNaN(settingsPath)) settingsPath = pathTo + "/" + "xml/settings.xml";				contentPath = pathTo + "/" + _root.xmlPath;		if(isNaN(contentPath)) contentPath = pathTo + "/" + "xml/mp3_player.xml";				titleHeight = 35;		controlsHeight = 30;		albumsOrPlaylist = true;		xmlLoaded = false;				caurina.transitions.properties.ColorShortcuts.init();		caurina.transitions.properties.SoundShortcuts.init();			}		/**	 * inititate albums in the main class	 */	public function initAlbums() : Void	{		loadSettingsData(settingsPath);	}		/**	 *load xml data file function	 */	private function loadXMLData(str : String) : Void	{		xmlData = new XML();		xmlData.ignoreWhite = true;		xmlData.load(str);		xmlData.onLoad = Proxy.create(this, xmlOnLoad);	}		/**	 * load settings xml file	 */	private function loadSettingsData(str : String) : Void	{		settingsData = new XML();		settingsData.ignoreWhite = true;		settingsData.load(str);		settingsData.onLoad = Proxy.create(this, xmlOnLoad);	}		/**	 * attach controls function	 */	private function attachControls() : Void	{		mcControls = this.attachMovie("mcControls", "mcControls", this.getNextHighestDepth());		mcControls._alpha = 0;		mcControls._visible = false;		mcControls._y = sHeight;			mcControls._x = sidewaysGalleryMargin + playerMargin;		mcControls.initControls(sWidth - 2* playerMargin - 2* sidewaysGalleryMargin, controlsBackgroundHeight, controlsBackgroundBeginColor, controlsBackgroundEndColor, controlsBackgroundStrokeColor, controlsTimeBarBeginColor, controlsTimeBarEndColor, controlsTimeBarBackgroundHeight, controlsTimeBarBackgroundBeginColor, controlsTimeBarBackgroundMiddleColor, controlsTimeBarBackgroundEndColor, controlsTimeBarBackgroundStrokeColor, controlsTimeBarLoadingColor, controlsTextColor, controlsButtonsBackgroundColor, controlsButtonsBackgroundOverColor, controlsButtonsBackgroundStrokeColor, controlsButtonsBeginColor, controlsButtonsMiddleColor, controlsButtonsEndColor, controlsButtonsOverBeginColor, controlsButtonsOverMiddleColor, controlsButtonsOverEndColor, volumeButtonActiveBeginColor, volumeButtonActiveEndColor, volumeButtonInactiveColor, volumeSliderStrokeBeginColor, volumeSliderStrokeEndColor, volumeSliderMainBackColor, volumeSliderMainBackStrokeColor, volumeSliderBeginColor, volumeSliderEndColor, mainSliderColor, embedButtonStrokeColor, embedButtonBeginColor, embedButtonMiddleColor, embedButtonEndColor, embedButtonSymbolColor, embedButtonSymbolOverColor, controlsButtonsStrokeColor, shuffleColor, shuffleOverColor, embedButtonVisibility, volumeButtonNormalBeginColor, volumeButtonNormalEndColor);	}		/*	 * xml file onLoad function	 */	private function xmlOnLoad(success : Boolean) : Void	{		if(success)		{			if(xmlLoaded == false)			{				xmlLoaded = true;								if(_root.stageW != undefined)				{					sWidth = Number(_root.stageW);				}				else				{					sWidth = (settingsData.firstChild.childNodes[27].attributes.width != undefined) ? Number(settingsData.firstChild.childNodes[27].attributes.width) : Stage.width;				}								if(_root.stageH != undefined)				{					sHeight = Number(_root.stageH);				}				else				{					sHeight = (settingsData.firstChild.childNodes[27].attributes.height != undefined) ? Number(settingsData.firstChild.childNodes[27].attributes.height) : Stage.height;				}								if(_root.imageWidth != undefined)				{					imageWidth = Number(_root.imageWidth);				}				else				{					imageWidth = (settingsData.firstChild.childNodes[29].attributes.width != undefined) ? Number(settingsData.firstChild.childNodes[29].attributes.width) : 140;				}								if(_root.imageHeight != undefined)				{					imageHeight = Number(_root.imageHeight);				}				else				{					imageHeight = (settingsData.firstChild.childNodes[29].attributes.height != undefined) ? Number(settingsData.firstChild.childNodes[29].attributes.height) : 200;				}												soundVol = (settingsData.firstChild.childNodes[28].attributes.value != undefined) ? Number(settingsData.firstChild.childNodes[28].attributes.value) : 60;								playlistSpeed = (settingsData.firstChild.childNodes[30].attributes.value != undefined) ? Number(settingsData.firstChild.childNodes[30].attributes.value) : 10;				//trace("xml loaded: " + xmlLoaded);				//*****************set variables for customization				backgroundColor = (settingsData.firstChild.firstChild.attributes.color != undefined) ? Number(settingsData.firstChild.firstChild.attributes.color) : 0x000000;								//scroll settings				scrollButtonBeginColor = (settingsData.firstChild.childNodes[2].attributes.beginColor != undefined) ? Number(settingsData.firstChild.childNodes[2].attributes.beginColor) : 0x000000;				scrollButtonEndColor = (settingsData.firstChild.childNodes[2].attributes.endColor != undefined) ? Number(settingsData.firstChild.childNodes[2].attributes.endColor) : 0x000000;				imagesBorder = (settingsData.firstChild.childNodes[6].attributes.size != undefined) ? Number(settingsData.firstChild.childNodes[6].attributes.size) : 0x000000;				imagesBorderColor = (settingsData.firstChild.childNodes[6].attributes.color != undefined) ? Number(settingsData.firstChild.childNodes[6].attributes.color) : 0x000000;				imagesBorderOverColor = (settingsData.firstChild.childNodes[6].attributes.rollOver != undefined) ? Number(settingsData.firstChild.childNodes[6].attributes.rollOver) : 0x000000;				topMargin = (settingsData.firstChild.childNodes[4].attributes.size != undefined) ? Number(settingsData.firstChild.childNodes[4].attributes.size) : 0x000000;				playerMargin = (settingsData.firstChild.childNodes[5].attributes.size != undefined) ? Number(settingsData.firstChild.childNodes[5].attributes.size) : 0x000000;				reflectionSize = (settingsData.firstChild.childNodes[7].attributes.size != undefined) ? Number(settingsData.firstChild.childNodes[7].attributes.size) : 0x000000;				reflectionAlpha = (settingsData.firstChild.childNodes[7].attributes.alpha != undefined) ? Number(settingsData.firstChild.childNodes[7].attributes.alpha) : 0x000000;				playlistBackgroundBeginColor = (settingsData.firstChild.childNodes[8].attributes.beginColor != undefined) ? Number(settingsData.firstChild.childNodes[8].attributes.beginColor) : 0x000000;				playlistBackgroundEndColor = (settingsData.firstChild.childNodes[8].attributes.endColor != undefined) ? Number(settingsData.firstChild.childNodes[8].attributes.endColor) : 0x000000;				scrollBgLargeHeight = (settingsData.firstChild.childNodes[1].attributes.height != undefined) ? Number(settingsData.firstChild.childNodes[1].attributes.height) : 0x000000;				scrollBtnHeight = (settingsData.firstChild.childNodes[2].attributes.height != undefined) ? Number(settingsData.firstChild.childNodes[2].attributes.height) : 0x000000;				scrollBgHeight = (settingsData.firstChild.childNodes[3].attributes.height != undefined) ? Number(settingsData.firstChild.childNodes[3].attributes.height) : 0x000000;				scrollBgBeginColor = (settingsData.firstChild.childNodes[3].attributes.beginColor != undefined) ? Number(settingsData.firstChild.childNodes[3].attributes.beginColor) : 0x000000;				scrollBgMiddleColor = (settingsData.firstChild.childNodes[3].attributes.middleColor != undefined) ? Number(settingsData.firstChild.childNodes[3].attributes.middleColor) : 0x000000;				scrollBgStrokeColor = (settingsData.firstChild.childNodes[3].attributes.strokeColor != undefined) ? Number(settingsData.firstChild.childNodes[3].attributes.strokeColor) : 0x000000;				scrollBgEndColor = (settingsData.firstChild.childNodes[3].attributes.endColor != undefined) ? Number(settingsData.firstChild.childNodes[3].attributes.endColor) : 0x000000;				scrollLargeBgBeginColor = (settingsData.firstChild.childNodes[1].attributes.beginColor != undefined) ? Number(settingsData.firstChild.childNodes[1].attributes.beginColor) : 0x000000;				scrollLargeBgEndColor = (settingsData.firstChild.childNodes[1].attributes.endColor != undefined) ? Number(settingsData.firstChild.childNodes[1].attributes.endColor) : 0x000000;				scrollBgLargeStrokeColor = (settingsData.firstChild.childNodes[1].attributes.strokeColor != undefined) ? Number(settingsData.firstChild.childNodes[1].attributes.strokeColor) : 0x000000;				autoscrollingSpeed = (settingsData.firstChild.childNodes[9].attributes.value != undefined) ? Number(settingsData.firstChild.childNodes[9].attributes.value) : 1;				scrollbarControlLinesColor = (settingsData.firstChild.childNodes[10].attributes.lineColor != undefined) ? Number(settingsData.firstChild.childNodes[10].attributes.lineColor) : 0x000000;				scrollbarControlBeginColor = (settingsData.firstChild.childNodes[10].attributes.beginColor != undefined) ? Number(settingsData.firstChild.childNodes[10].attributes.beginColor) : 0x000000;				scrollbarControlEndColor = (settingsData.firstChild.childNodes[10].attributes.endColor != undefined) ? Number(settingsData.firstChild.childNodes[10].attributes.endColor) : 0x000000;				autoscrollBegin = (settingsData.firstChild.childNodes[11].attributes.value != undefined) ? settingsData.firstChild.childNodes[11].attributes.value : "true";								//first page settings				//firstPageBarHeight = (settingsData.firstChild.childNodes[9].attributes.height != undefined) ? Number(settingsData.firstChild.childNodes[9].attributes.height) : 0x000000;				//firstPageBarBeginColor = (settingsData.firstChild.childNodes[9].attributes.beginColor != undefined) ? Number(settingsData.firstChild.childNodes[9].attributes.beginColor) : 0x000000;				//firstPageBarEndColor = (settingsData.firstChild.childNodes[9].attributes.endColor != undefined) ? Number(settingsData.firstChild.childNodes[9].attributes.endColor) : 0x000000;				//firstPageStrokeColor = (settingsData.firstChild.childNodes[9].attributes.strokeColor != undefined) ? Number(settingsData.firstChild.childNodes[9].attributes.strokeColor) : 0x000000;					//middleLineColor = (settingsData.firstChild.childNodes[9].attributes.middleLineColor != undefined) ? Number(settingsData.firstChild.childNodes[9].attributes.middleLineColor) : 0x000000;				//startText = (settingsData.firstChild.childNodes[11].attributes.text != undefined) ? settingsData.firstChild.childNodes[11].attributes.text : "Ready to launch";				//startTextColor = (settingsData.firstChild.childNodes[11].attributes.color != undefined) ? Number(settingsData.firstChild.childNodes[11].attributes.color) : 0x000000;								//album name settings				albumBackgroundBeginColor = (settingsData.firstChild.childNodes[12].attributes.authorBackgroundBeginColor != undefined) ? Number(settingsData.firstChild.childNodes[12].attributes.authorBackgroundBeginColor) : 0x000000;				albumBackgroundEndColor = (settingsData.firstChild.childNodes[12].attributes.authorBackgroundEndColor != undefined) ? Number(settingsData.firstChild.childNodes[12].attributes.authorBackgroundEndColor) : 0x000000;				albumBackgroundStrokeColor = (settingsData.firstChild.childNodes[12].attributes.authorBackgroundStrokeColor != undefined) ? Number(settingsData.firstChild.childNodes[12].attributes.authorBackgroundStrokeColor) : 0x000000;				albumNameBackgroundColor = (settingsData.firstChild.childNodes[12].attributes.albumBackgroundColor != undefined) ? Number(settingsData.firstChild.childNodes[12].attributes.albumBackgroundColor) : 0x000000;				albumNameBackgroundStrokeColor = (settingsData.firstChild.childNodes[12].attributes.albumBackgroundStrokeColor != undefined) ? Number(settingsData.firstChild.childNodes[12].attributes.albumBackgroundStrokeColor) : 0x000000;				albumNameTextColor = (settingsData.firstChild.childNodes[12].attributes.albumNameColor != undefined) ? Number(settingsData.firstChild.childNodes[12].attributes.albumNameColor) : 0x000000;				albumAuthorTextColor = (settingsData.firstChild.childNodes[12].attributes.authorNameColor != undefined) ? Number(settingsData.firstChild.childNodes[12].attributes.authorNameColor) : 0x000000;				albumBackgroundHeight = (settingsData.firstChild.childNodes[12].attributes.backgroundHeight != undefined) ? Number(settingsData.firstChild.childNodes[12].attributes.backgroundHeight) : 60;				albumTitleHeight = (settingsData.firstChild.childNodes[12].attributes.albumTitleHeight != undefined) ? Number(settingsData.firstChild.childNodes[12].attributes.albumTitleHeight) : 10;				albumInfoColor = (settingsData.firstChild.childNodes[12].attributes.infoColor != undefined) ? Number(settingsData.firstChild.childNodes[12].attributes.infoColor) : 0xffffff;				albumInfoOverColor = (settingsData.firstChild.childNodes[12].attributes.infoRollOverColor != undefined) ? Number(settingsData.firstChild.childNodes[12].attributes.infoRollOverColor) : 0x000000;				albumArrowColor = (settingsData.firstChild.childNodes[12].attributes.arrowColor != undefined) ? Number(settingsData.firstChild.childNodes[12].attributes.arrowColor) : 0xffffff;				albumArrowBackgroundColor = (settingsData.firstChild.childNodes[12].attributes.arrowBackgroundColor != undefined) ? Number(settingsData.firstChild.childNodes[12].attributes.arrowBackgroundColor) : 0x000000;				albumArrowOverColor = (settingsData.firstChild.childNodes[12].attributes.arrowOverColor != undefined) ? Number(settingsData.firstChild.childNodes[12].attributes.arrowOverColor) : 0x000000;								//back to albums button settings				backAlbumsBackgroundBeginColor = (settingsData.firstChild.childNodes[13].attributes.backgroundBeginColor != undefined) ? Number(settingsData.firstChild.childNodes[13].attributes.backgroundBeginColor) : 0x000000;				backAlbumsBackgroundEndColor = (settingsData.firstChild.childNodes[13].attributes.backgroundEndColor != undefined) ? Number(settingsData.firstChild.childNodes[13].attributes.backgroundEndColor) : 0x000000;				backAlbumsBackgroundStrokeColor = (settingsData.firstChild.childNodes[13].attributes.backgroundStrokeColor != undefined) ? Number(settingsData.firstChild.childNodes[13].attributes.backgroundStrokeColor) : 0x000000;				backAlbumsTextColor = (settingsData.firstChild.childNodes[13].attributes.textColor != undefined) ? Number(settingsData.firstChild.childNodes[13].attributes.textColor) : 0x000000;				backAlbumsShapeColor = (settingsData.firstChild.childNodes[13].attributes.shapeColor != undefined) ? Number(settingsData.firstChild.childNodes[13].attributes.shapeColor) : 0x000000;				backBackgroundHeight = (settingsData.firstChild.childNodes[13].attributes.backgroundHeight != undefined) ? Number(settingsData.firstChild.childNodes[13].attributes.backgroundHeight) : 20;				backButtonText = (settingsData.firstChild.childNodes[13].attributes.backText != undefined) ? settingsData.firstChild.childNodes[13].attributes.backText : "Back";				backButtonOverColor = (settingsData.firstChild.childNodes[13].attributes.textOverColor != undefined) ? Number(settingsData.firstChild.childNodes[13].attributes.textOverColor) : 0x000000;				albumSongTime = (settingsData.firstChild.childNodes[13].attributes.album_song_changeTime != undefined) ? Number(settingsData.firstChild.childNodes[13].attributes.album_song_changeTime) : 5;								//playlist settings				playlistBackgroundColor = (settingsData.firstChild.childNodes[14].attributes.backgroundColor != undefined) ? Number(settingsData.firstChild.childNodes[14].attributes.backgroundColor) : 0x000000;				playlistBackgroundStrokeColor = (settingsData.firstChild.childNodes[14].attributes.backgroundStrokeColor != undefined) ? Number(settingsData.firstChild.childNodes[14].attributes.backgroundStrokeColor) : 0x000000;				playlistEvenButtonBeginColor = (settingsData.firstChild.childNodes[14].childNodes[0].attributes.beginColor != undefined) ? Number(settingsData.firstChild.childNodes[14].childNodes[0].attributes.beginColor) : 0x000000;				playlistEvenButtonEndColor = (settingsData.firstChild.childNodes[14].childNodes[0].attributes.endColor != undefined) ? Number(settingsData.firstChild.childNodes[14].childNodes[0].attributes.endColor) : 0x000000;				playlistOddButtonColor = (settingsData.firstChild.childNodes[14].childNodes[0].attributes.oddNodeColor != undefined) ? Number(settingsData.firstChild.childNodes[14].childNodes[0].attributes.oddNodeColor) : 0x000000;				playlistButtonTextColor = (settingsData.firstChild.childNodes[14].childNodes[0].attributes.textColor != undefined) ? Number(settingsData.firstChild.childNodes[14].childNodes[0].attributes.textColor) : 0x000000;				playlistButtonStrokeColor = (settingsData.firstChild.childNodes[14].childNodes[0].attributes.strokeColor != undefined) ? Number(settingsData.firstChild.childNodes[14].childNodes[0].attributes.strokeColor) : 0x000000;								playlistOverButtonColor = (settingsData.firstChild.childNodes[14].childNodes[1].attributes.color != undefined) ? Number(settingsData.firstChild.childNodes[14].childNodes[1].attributes.color) : 0x000000;				playlistOverButtonStrokeColor = (settingsData.firstChild.childNodes[14].childNodes[1].attributes.strokeColor != undefined) ? Number(settingsData.firstChild.childNodes[14].childNodes[1].attributes.strokeColor) : 0x000000;				playlistOverButtonTextColor = (settingsData.firstChild.childNodes[14].childNodes[1].attributes.textColor != undefined) ? Number(settingsData.firstChild.childNodes[14].childNodes[1].attributes.textColor) : 0x000000;								playlistPressedButtonBeginColor = (settingsData.firstChild.childNodes[14].childNodes[2].attributes.beginColor != undefined) ? Number(settingsData.firstChild.childNodes[14].childNodes[2].attributes.beginColor) : 0x000000;				playlistPressedButtonEndColor = (settingsData.firstChild.childNodes[14].childNodes[2].attributes.endColor != undefined) ? Number(settingsData.firstChild.childNodes[14].childNodes[2].attributes.endColor) : 0x000000;				playlistPressedButtonTextColor = (settingsData.firstChild.childNodes[14].childNodes[2].attributes.textColor != undefined) ? Number(settingsData.firstChild.childNodes[14].childNodes[2].attributes.textColor) : 0x000000;				playlistPressedButtonStrokeColor = (settingsData.firstChild.childNodes[14].childNodes[2].attributes.strokeColor != undefined) ? settingsData.firstChild.childNodes[14].childNodes[2].attributes.strokeColor : 0x000000;								//controls settings				controlsBackgroundBeginColor = (settingsData.firstChild.childNodes[15].attributes.beginColor != undefined) ? Number(settingsData.firstChild.childNodes[15].attributes.beginColor) : 0x000000;				controlsBackgroundEndColor = (settingsData.firstChild.childNodes[15].attributes.endColor != undefined) ? Number(settingsData.firstChild.childNodes[15].attributes.endColor) : 0x000000;				controlsBackgroundStrokeColor = (settingsData.firstChild.childNodes[15].attributes.strokeColor != undefined) ? Number(settingsData.firstChild.childNodes[15].attributes.strokeColor) : 0x000000;				controlsBackgroundHeight = (settingsData.firstChild.childNodes[15].attributes.height != undefined) ? Number(settingsData.firstChild.childNodes[15].attributes.height) : 0x000000;								controlsTimeBarBeginColor = (settingsData.firstChild.childNodes[15].childNodes[0].attributes.beginColor != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[0].attributes.beginColor) : 0x000000;				controlsTimeBarEndColor = (settingsData.firstChild.childNodes[15].childNodes[0].attributes.endColor != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[0].attributes.endColor) : 0x000000;								controlsTimeBarBackgroundBeginColor = (settingsData.firstChild.childNodes[15].childNodes[1].attributes.beginColor != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[1].attributes.beginColor) : 0x000000;				controlsTimeBarBackgroundMiddleColor = (settingsData.firstChild.childNodes[15].childNodes[1].attributes.middleColor != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[1].attributes.middleColor) : 0x000000;				controlsTimeBarBackgroundEndColor = (settingsData.firstChild.childNodes[15].childNodes[1].attributes.endColor != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[1].attributes.endColor) : 0x000000;				controlsTimeBarBackgroundStrokeColor = (settingsData.firstChild.childNodes[15].childNodes[1].attributes.strokeColor != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[1].attributes.strokeColor) : 0x000000;				controlsTimeBarBackgroundHeight = (settingsData.firstChild.childNodes[15].childNodes[1].attributes.height != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[1].attributes.height) : 0x000000;								controlsTimeBarLoadingColor = (settingsData.firstChild.childNodes[15].childNodes[2].attributes.color != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[2].attributes.color) : 0x000000;								controlsTextColor = (settingsData.firstChild.childNodes[15].childNodes[3].attributes.color != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[3].attributes.color) : 0x000000;								controlsButtonsBackgroundColor = (settingsData.firstChild.childNodes[15].childNodes[4].attributes.color != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[4].attributes.color) : 0x000000;				controlsButtonsBackgroundOverColor = (settingsData.firstChild.childNodes[15].childNodes[4].attributes.overColor != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[4].attributes.overColor) : 0x000000;				controlsButtonsBackgroundStrokeColor = (settingsData.firstChild.childNodes[15].childNodes[4].attributes.strokeColor != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[4].attributes.strokeColor) : 0x000000;								controlsButtonsBeginColor = (settingsData.firstChild.childNodes[15].childNodes[5].attributes.beginColor != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[5].attributes.beginColor) : 0x000000;				controlsButtonsMiddleColor = (settingsData.firstChild.childNodes[15].childNodes[5].attributes.middleColor != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[5].attributes.middleColor) : 0x000000;				controlsButtonsEndColor = (settingsData.firstChild.childNodes[15].childNodes[5].attributes.endColor != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[5].attributes.endColor) : 0x000000;				controlsButtonsOverBeginColor = (settingsData.firstChild.childNodes[15].childNodes[5].attributes.overBeginColor != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[5].attributes.overBeginColor) : 0x000000;				controlsButtonsOverMiddleColor = (settingsData.firstChild.childNodes[15].childNodes[5].attributes.overMiddleColor != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[5].attributes.overMiddleColor) : 0x000000;				controlsButtonsOverEndColor = (settingsData.firstChild.childNodes[15].childNodes[5].attributes.overEndColor != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[5].attributes.overEndColor) : 0x000000;				controlsButtonsStrokeColor = (settingsData.firstChild.childNodes[15].childNodes[5].attributes.strokeColor != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[5].attributes.strokeColor) : 0x000000;								volumeButtonActiveBeginColor = (settingsData.firstChild.childNodes[15].childNodes[6].attributes.beginActiveColor != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[6].attributes.beginActiveColor) : 0x000000;				volumeButtonActiveEndColor = (settingsData.firstChild.childNodes[15].childNodes[6].attributes.endActiveColor != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[6].attributes.endActiveColor) : 0x000000;				volumeButtonNormalBeginColor = (settingsData.firstChild.childNodes[15].childNodes[6].attributes.beginNormalColor != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[6].attributes.beginNormalColor) : 0x000000;				volumeButtonNormalEndColor = (settingsData.firstChild.childNodes[15].childNodes[6].attributes.endNormalColor != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[6].attributes.endNormalColor) : 0x000000;				volumeButtonInactiveColor = (settingsData.firstChild.childNodes[15].childNodes[6].attributes.inactiveColor != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[6].attributes.inactiveColor) : 0x000000;								volumeSliderStrokeBeginColor = (settingsData.firstChild.childNodes[15].childNodes[7].attributes.backgroundStrokeBeginColor != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[7].attributes.backgroundStrokeBeginColor) : 0x000000;				volumeSliderStrokeEndColor = (settingsData.firstChild.childNodes[15].childNodes[7].attributes.backgroundStrokeEndColor != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[7].attributes.backgroundStrokeEndColor) : 0x000000;				volumeSliderMainBackColor = (settingsData.firstChild.childNodes[15].childNodes[7].attributes.sliderBackColor != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[7].attributes.sliderBackColor) : 0x000000;				volumeSliderMainBackStrokeColor = (settingsData.firstChild.childNodes[15].childNodes[7].attributes.sliderBackStrokeColor != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[7].attributes.sliderBackStrokeColor) : 0x000000;				volumeSliderBeginColor = (settingsData.firstChild.childNodes[15].childNodes[7].attributes.sliderBeginColor != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[7].attributes.sliderBeginColor) : 0x000000;				volumeSliderEndColor = (settingsData.firstChild.childNodes[15].childNodes[7].attributes.sliderEndColor != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[7].attributes.sliderEndColor) : 0x000000;				mainSliderColor = (settingsData.firstChild.childNodes[15].childNodes[7].attributes.mainBackgroundColor != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[7].attributes.mainBackgroundColor) : 0x000000;								embedButtonStrokeColor = (settingsData.firstChild.childNodes[15].childNodes[8].attributes.strokeColor != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[8].attributes.strokeColor) : 0x000000;				embedButtonBeginColor = (settingsData.firstChild.childNodes[15].childNodes[8].attributes.beginColor != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[8].attributes.beginColor) : 0x000000; 				embedButtonMiddleColor = (settingsData.firstChild.childNodes[15].childNodes[8].attributes.middleColor != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[8].attributes.middleColor) : 0x000000;				embedButtonEndColor = (settingsData.firstChild.childNodes[15].childNodes[8].attributes.endColor != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[8].attributes.endColor) : 0x000000;				embedButtonSymbolColor = (settingsData.firstChild.childNodes[15].childNodes[8].attributes.symbolColor != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[8].attributes.symbolColor) : 0x000000;				embedButtonSymbolOverColor = (settingsData.firstChild.childNodes[15].childNodes[8].attributes.symbolOverColor != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[8].attributes.symbolOverColor) : 0x000000;								embedWindowMainStrokeColor = (settingsData.firstChild.childNodes[15].childNodes[9].attributes.mainStrokeColor != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[9].attributes.mainStrokeColor) : 0x000000;				embedWindowMainColor = (settingsData.firstChild.childNodes[15].childNodes[9].attributes.mainColor != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[9].attributes.mainColor) : 0x000000;				embedWindowColor = (settingsData.firstChild.childNodes[15].childNodes[9].attributes.color != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[9].attributes.color) : 0x000000;				embedWindowStrokeColor = (settingsData.firstChild.childNodes[15].childNodes[9].attributes.strokeColor != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[9].attributes.strokeColor) : 0x000000;				embedWindowTextColor = (settingsData.firstChild.childNodes[15].childNodes[9].attributes.textColor != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[9].attributes.textColor) : 0x000000;				embedWindowButtonsColor = (settingsData.firstChild.childNodes[15].childNodes[9].attributes.buttonColor != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[9].attributes.buttonColor) : 0x000000;				embedWindowButtonsStrokeColor = (settingsData.firstChild.childNodes[15].childNodes[9].attributes.buttonStrokeColor != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[9].attributes.buttonStrokeColor) : 0x000000;				embedWindowButtonsTextColor = (settingsData.firstChild.childNodes[15].childNodes[9].attributes.buttonTextColor != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[9].attributes.buttonTextColor) : 0x000000;				embedWindowTitleText = (settingsData.firstChild.childNodes[15].childNodes[9].attributes.titleText != undefined) ? String(settingsData.firstChild.childNodes[15].childNodes[9].attributes.titleText) : "SELECT THIS TEXT:";				embedWindowCopyText = (settingsData.firstChild.childNodes[15].childNodes[9].attributes.copyButtonText != undefined) ? String(settingsData.firstChild.childNodes[15].childNodes[9].attributes.copyButtonText) : "COPY";				embedWindowButtonRollOverColor = (settingsData.firstChild.childNodes[15].childNodes[9].attributes.buttonRollOverColor != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[9].attributes.buttonRollOverColor) : 0x000000;				embedWindowButtonBackgroundRollOverColor = (settingsData.firstChild.childNodes[15].childNodes[9].attributes.backgroundOverColor != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[9].attributes.backgroundOverColor) : 0x000000;				embedCodeTextColor = (settingsData.firstChild.childNodes[15].childNodes[9].attributes.embedTextColor != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[9].attributes.embedTextColor) : 0x000000;								//shuffle				shuffleColor = (settingsData.firstChild.childNodes[15].childNodes[10].attributes.color != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[10].attributes.color) : 0x000000;				shuffleOverColor = (settingsData.firstChild.childNodes[15].childNodes[10].attributes.overColor != undefined) ? Number(settingsData.firstChild.childNodes[15].childNodes[10].attributes.overColor) : 0x000000;								//bottom background shape				bottomBackgroundBeginColor = (settingsData.firstChild.childNodes[17].attributes.beginColor != undefined) ? Number(settingsData.firstChild.childNodes[17].attributes.beginColor) : 0x000000;				bottomBackgroundEndColor = (settingsData.firstChild.childNodes[17].attributes.endColor != undefined) ? Number(settingsData.firstChild.childNodes[17].attributes.endColor) : 0x000000;								//reflection or not				boolReflect = (settingsData.firstChild.childNodes[14].attributes.value != undefined) ? String(settingsData.firstChild.childNodes[14].attributes.value).toLowerCase() : "true";								distanceBetweenImages = (settingsData.firstChild.childNodes[18].attributes.value != undefined) ? Number(settingsData.firstChild.childNodes[18].attributes.value) : 25;				sidewaysGalleryMargin = (settingsData.firstChild.childNodes[19].attributes.value != undefined) ? Number(settingsData.firstChild.childNodes[19].attributes.value) : 10;								stopMoving = (settingsData.firstChild.childNodes[21].attributes.value != undefined) ? String(settingsData.firstChild.childNodes[21].attributes.value).toLowerCase() : "true";				playlistLooping = (settingsData.firstChild.childNodes[22].attributes.value != undefined) ? String(settingsData.firstChild.childNodes[22].attributes.value).toLowerCase() : "true";				splashscreen = (settingsData.firstChild.childNodes[23].attributes.value != undefined) ? String(settingsData.firstChild.childNodes[23].attributes.value).toLowerCase() : "false";								//tooltip				tooltipVisibility = (settingsData.firstChild.childNodes[20].attributes.visible != undefined) ? String(settingsData.firstChild.childNodes[20].attributes.visible).toLowerCase() : "false";				tooltipBackgroundColor = (settingsData.firstChild.childNodes[20].attributes.backgroundColor != undefined) ? Number(settingsData.firstChild.childNodes[20].attributes.backgroundColor) : 0x000000;				tooltipTextColor = (settingsData.firstChild.childNodes[20].attributes.textColor != undefined) ? Number(settingsData.firstChild.childNodes[20].attributes.textColor) : 0x000000;				tooltipRoundsColor = (settingsData.firstChild.childNodes[20].attributes.roundsColor != undefined) ? Number(settingsData.firstChild.childNodes[20].attributes.roundsColor) : 0x000000;								//share, buy buttons properties set				buyButtonBeginColor = (settingsData.firstChild.childNodes[24].attributes.beginColor != undefined) ? Number(settingsData.firstChild.childNodes[24].attributes.beginColor) : 0x000000;				buyButtonEndColor = (settingsData.firstChild.childNodes[24].attributes.endColor != undefined) ? Number(settingsData.firstChild.childNodes[24].attributes.endColor) : 0x000000;				buyButtonStrokeColor = (settingsData.firstChild.childNodes[24].attributes.strokeColor != undefined) ? Number(settingsData.firstChild.childNodes[24].attributes.strokeColor) : 0x000000;				buyButtonOverBeginColor = (settingsData.firstChild.childNodes[24].attributes.overBeginColor != undefined) ? Number(settingsData.firstChild.childNodes[24].attributes.overBeginColor) : 0x000000;				buyButtonOverEndColor = (settingsData.firstChild.childNodes[24].attributes.overEndColor != undefined) ? Number(settingsData.firstChild.childNodes[24].attributes.overEndColor) : 0x000000;				buyButtonOverStrokeColor = (settingsData.firstChild.childNodes[24].attributes.overStrokeColor != undefined) ? Number(settingsData.firstChild.childNodes[24].attributes.overStrokeColor) : 0x000000;				buyButtonPressedBeginColor = (settingsData.firstChild.childNodes[24].attributes.pressedBeginColor != undefined) ? Number(settingsData.firstChild.childNodes[24].attributes.pressedBeginColor) : 0x000000;				buyButtonPressedEndColor = (settingsData.firstChild.childNodes[24].attributes.pressedEndColor != undefined) ? Number(settingsData.firstChild.childNodes[24].attributes.pressedEndColor) : 0x000000;				buyButtonPressedStrokeColor = (settingsData.firstChild.childNodes[24].attributes.pressedStrokeColor != undefined) ? Number(settingsData.firstChild.childNodes[24].attributes.pressedStrokeColor) : 0x000000;				buyButtonSignColor = (settingsData.firstChild.childNodes[24].attributes.signColor != undefined) ? Number(settingsData.firstChild.childNodes[24].attributes.signColor) : 0x000000;								//embed button visibility				embedButtonVisibility = (settingsData.firstChild.childNodes[25].attributes.value != undefined) ? String(settingsData.firstChild.childNodes[25].attributes.value).toLowerCase() : "true";				autoslidePause = (settingsData.firstChild.childNodes[26].attributes.value != undefined) ? Number(settingsData.firstChild.childNodes[26].attributes.value) : 5;								//trace("xml loaded: " + xmlLoaded);				//*****************************				Main.getInstance().mcMask._width = sWidth - 2* playerMargin;				Main.getInstance().mcMask._height = sHeight - 2* playerMargin;				Main.getInstance().mcMask._x = playerMargin;				Main.getInstance().mcMask._y = playerMargin;				caurina.transitions.Tweener.addTween(Main.getInstance().mcBackground, {_color : backgroundColor, time : 0.1, transition:"easeOutExpo"});								var boxProperties:Object = {x:imagesBorder, y:imagesBorder, w:sWidth - 2* imagesBorder, h:sHeight - 2 * imagesBorder}; // x and y defining x and y positions, w and h defining width and height of your box				var colArray:Array = [playlistBackgroundBeginColor, playlistBackgroundEndColor]; // your colors				var alpArray:Array = [100, 100]; // your alphas				var sprArray:Array = [0, 255]; // gradient spread				var matrixData:Object = {matrixType:"box", x:0, y:0, w:sWidth - 2* imagesBorder, h:sHeight - 2 * imagesBorder, r:90/180*Math.PI};//imageHeight + imagesBorder + topMargin				//set background of the albums				mcBackground = this.createEmptyMovieClip("mcBackground", this.getNextHighestDepth());								with (mcBackground) 				{ // yourMovieClipInstance is the instance of movie clip you wish to draw to					moveTo(boxProperties.x, boxProperties.y);					beginGradientFill("linear", colArray, alpArray, sprArray, matrixData);					lineTo(boxProperties.x + boxProperties.w, boxProperties.y);					lineTo(boxProperties.x + boxProperties.w, boxProperties.y + boxProperties.h);					lineTo(boxProperties.x, boxProperties.y + boxProperties.h);					lineTo(boxProperties.x, boxProperties.y);					endFill();				}								//middle line//				mcMiddleLine = this.createEmptyMovieClip("mcMiddleLine", this.getNextHighestDepth());//				mcMiddleLine.lineStyle(2, middleLineColor);//				mcMiddleLine.moveTo(0, 0);//				mcMiddleLine.lineTo(sWidth - 2* imagesBorder, 0);//				mcMiddleLine._x = imagesBorder;//				mcMiddleLine._y = Math.round(sHeight/2 + 4);								//****** bottom background				mcBottomBackground = this.createEmptyMovieClip("mcBottomBackground", this.getNextHighestDepth());								var boxPropertiesBottom:Object = {x:imagesBorder, y:imagesBorder + playerMargin + imageHeight + topMargin, w:sWidth - 2* playerMargin, h:sHeight - 2 * playerMargin - imagesBorder - imageHeight - topMargin}; // x and y defining x and y positions, w and h defining width and height of your box				var colArrayBottom:Array = [bottomBackgroundBeginColor, bottomBackgroundEndColor]; // your colors				var alpArrayBottom:Array = [100, 100]; // your alphas				var sprArrayBottom:Array = [0, 255]; // gradient spread				var matrixDataBottom:Object = {matrixType:"box", x:imagesBorder, y:imagesBorder + playerMargin + imageHeight + topMargin, w:sWidth - 2* playerMargin, h:sHeight - 2 * playerMargin - imagesBorder - imageHeight - topMargin, r:90/180*Math.PI};//imageHeight + imagesBorder + topMargin								with (mcBottomBackground) 				{ // yourMovieClipInstance is the instance of movie clip you wish to draw to					moveTo(boxPropertiesBottom.x, boxPropertiesBottom.y);					beginGradientFill("linear", colArrayBottom, alpArrayBottom, sprArrayBottom, matrixDataBottom);					lineTo(boxPropertiesBottom.x + boxPropertiesBottom.w, boxPropertiesBottom.y);					lineTo(boxPropertiesBottom.x + boxPropertiesBottom.w, boxPropertiesBottom.y + boxPropertiesBottom.h);					lineTo(boxPropertiesBottom.x, boxPropertiesBottom.y + boxPropertiesBottom.h);					lineTo(boxPropertiesBottom.x, boxPropertiesBottom.y);					endFill();				}								mcBottomBackground._y = sHeight;								///****************attach embed window				mcEmbedCode = this.createEmptyMovieClip("mcEmbedCode", this.getNextHighestDepth());				mcEmbedCode.createEmptyMovieClip("mcMainBackground", mcEmbedCode.getNextHighestDepth());				mcEmbedCode.createEmptyMovieClip("mcTextBackground", mcEmbedCode.getNextHighestDepth());				mcEmbedCode.createEmptyMovieClip("mcText", mcEmbedCode.getNextHighestDepth());				mcEmbedCode.createEmptyMovieClip("mcTitle", mcEmbedCode.getNextHighestDepth());				mcEmbedCode.createEmptyMovieClip("mcCloseBtn", mcEmbedCode.getNextHighestDepth());				mcEmbedCode.createEmptyMovieClip("mcCopyBtn", mcEmbedCode.getNextHighestDepth());				mcEmbedCode._visible = false;								var embedWidth : Number;				var embedHeight : Number;								if(sWidth > 600 && sHeight > 400)				{					embedWidth = 400;					embedHeight = 200;				}				else				{					embedWidth = Math.round(sWidth - imageWidth - 4* imagesBorder - 2* sidewaysGalleryMargin - 2* playerMargin);					embedHeight = Math.round((sWidth - imageWidth - 4* imagesBorder - 2* sidewaysGalleryMargin - 2 * playerMargin)/2 + 5);				}								mcEmbedCode.mcMainBackground.lineStyle(1, embedWindowMainStrokeColor);				with(mcEmbedCode.mcMainBackground)				{					moveTo(5, 0);					beginFill(this.embedWindowMainColor, 100);					lineTo(embedWidth - 5, 0);					curveTo(embedWidth, 0, embedWidth, 5);					lineTo(embedWidth, embedHeight - 5);					curveTo(embedWidth, embedHeight, embedWidth - 5, embedHeight);					lineTo(5, embedHeight);					curveTo(0, embedHeight, 0, embedHeight - 5);					lineTo(0, 5);					curveTo(0, 0, 5, 0);					endFill();				}				mcEmbedCode.mcMainBackground.cacheAsBitmap = true;				mcEmbedCode.mcMainBackground._alpha = 90;								mcEmbedCode.mcTextBackground.lineStyle(1, embedWindowStrokeColor);				with(mcEmbedCode.mcTextBackground)				{					moveTo(5, 0);					beginFill(this.embedWindowMainColor, 100);					lineTo(embedWidth - 55, 0);					curveTo(embedWidth - 50, 0, embedWidth - 50, 5);					lineTo(embedWidth - 50, Math.round(embedHeight/2) - 5);					curveTo(embedWidth - 50, Math.round(embedHeight/2), embedWidth - 55, Math.round(embedHeight/2));					lineTo(5, Math.round(embedHeight/2));					curveTo(0, Math.round(embedHeight/2), 0, Math.round(embedHeight/2) - 5);					lineTo(0, 5);					curveTo(0, 0, 5, 0);					endFill();				}				mcEmbedCode.mcTextBackground.cacheAsBitmap = true;								mcEmbedCode.mcTextBackground._x = 25;				mcEmbedCode.mcTextBackground._y = Math.round(1/4* embedHeight);								mcEmbedCode.mcTitle.attachMovie("mcEmbedTextTitle", "mcEmbedTextTitle", mcEmbedCode.mcTitle.getNextHighestDepth());				mcEmbedCode.mcTitle.mcEmbedTextTitle.txt.autoSize = true;				mcEmbedCode.mcTitle.mcEmbedTextTitle.txt.embedFonts = true;				mcEmbedCode.mcTitle.mcEmbedTextTitle.txt.textColor = embedWindowTextColor;				mcEmbedCode.mcTitle.mcEmbedTextTitle.txt.text = embedWindowTitleText;				mcEmbedCode.mcTitle._x = Math.round(mcEmbedCode.mcTextBackground._x);				mcEmbedCode.mcTitle._y= Math.round(mcEmbedCode.mcTextBackground._y - mcEmbedCode.mcTitle._height);								mcEmbedCode.mcText.attachMovie("mcEmbedTextCode", "mcEmbedTextCode", mcEmbedCode.mcTitle.getNextHighestDepth());				//mcEmbedCode.mcText.onRollOver = Proxy.create(this, textRollOver);				mcEmbedCode.mcText.useHandCursor = false;				//mcEmbedCode.mcText.mcEmbedTextCode.txt.scrollable = true;				mcEmbedCode.mcText.mcEmbedTextCode.txt._width = Math.round(mcEmbedCode.mcTextBackground._width - 10);				mcEmbedCode.mcText.mcEmbedTextCode.txt._height = Math.round(mcEmbedCode.mcTextBackground._height);				mcEmbedCode.mcText.mcEmbedTextCode.txt.embedFonts = true;				mcEmbedCode.mcText.mcEmbedTextCode.txt.textColor = embedCodeTextColor;												//set sharing window text				mcEmbedCode.mcText.mcEmbedTextCode.txt.text = '<object width="' + sWidth + '" height="' + sHeight +'">\n';		        mcEmbedCode.mcText.mcEmbedTextCode.txt.text += '	<param name="movie" value="'+ this._url + '?stageW=' + sWidth + '&stageH=' + sHeight + '&pathToFiles=' + this._url.substr(0, this._url.lastIndexOf("/") + 1) + pathTo + '&settingsPath=' + this._url.substr(0, this._url.lastIndexOf("/") + 1) + settingsPath + '&xmlPath=' + this._url.substr(0, this._url.lastIndexOf("/") + 1) + contentPath + '&imageWidth=' + imageWidth + '&imageHeight=' + imageHeight +'"></param>\n';		        mcEmbedCode.mcText.mcEmbedTextCode.txt.text += '	<param name="allowFullScreen" value="true"></param>';		        mcEmbedCode.mcText.mcEmbedTextCode.txt.text += '	<param name="allowscriptaccess" value="always"></param>';		        mcEmbedCode.mcText.mcEmbedTextCode.txt.text += '	<embed src="'+ this._url + '?stageW=' + sWidth + '&stageH=' + sHeight + '&pathToFiles=' + this._url.substr(0, this._url.lastIndexOf("/") + 1) + pathTo + '&settingsPath=' + this._url.substr(0, this._url.lastIndexOf("/") + 1) + settingsPath + '&xmlPath=' + this._url.substr(0, this._url.lastIndexOf("/") + 1) + contentPath + '&imageWidth=' + imageWidth + '&imageHeight=' + imageHeight + '" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="' + sWidth + '" height="' + sHeight + '"></embed>';				mcEmbedCode.mcText.mcEmbedTextCode.txt.text += '</object>';								mcEmbedCode.mcText._x = Math.round(mcEmbedCode.mcTextBackground._x + 5);				mcEmbedCode.mcText._y= Math.round(mcEmbedCode.mcTextBackground._y + 2);				mcEmbedCode.mcText.mcEmbedTextCode.txt.mouseWheelEnabled = true;				mcEmbedCode.mcTextBackground.cacheAsBitmap = true;								mcEmbedCode.mcCloseBtn.attachMovie("mcCloseEmbed", "mcCloseEmbed", mcEmbedCode.mcCloseBtn.getNextHighestDepth());								//mcEmbedCode.mcCloseBtn.mcCloseEmbed.mcBackground.lineStyle(0.25, embedWindowButtonsStrokeColor);								with(mcEmbedCode.mcCloseBtn.mcCloseEmbed.mcBackground)				{					moveTo(5, 0);					beginFill(this.embedWindowButtonsColor, 100);					lineTo(15, 0);					curveTo(20, 0, 20, 5);					lineTo(20, 15);					curveTo(20, 20, 15, 20);					lineTo(5, 20);					curveTo(0, 20, 0, 15);					lineTo(0, 5);					curveTo(0, 0, 5, 0);					endFill();				}				mcEmbedCode.mcCloseBtn.mcCloseEmbed.cacheAsBitmap = true;								mcEmbedCode.mcCloseBtn.mcCloseEmbed.mcSign.setColor(embedWindowButtonsTextColor);				mcEmbedCode.mcCloseBtn.mcCloseEmbed.mcSign._x = Math.round((mcEmbedCode.mcCloseBtn.mcCloseEmbed.mcBackground._width - mcEmbedCode.mcCloseBtn.mcCloseEmbed.mcSign._width)/2);				mcEmbedCode.mcCloseBtn.mcCloseEmbed.mcSign._y = Math.round((mcEmbedCode.mcCloseBtn.mcCloseEmbed.mcBackground._height - mcEmbedCode.mcCloseBtn.mcCloseEmbed.mcSign._height)/2);								mcEmbedCode.mcCloseBtn.mcCloseEmbed.mcBackground.onRollOver = Proxy.create(this, embedButtonsRollOver, mcEmbedCode.mcCloseBtn.mcCloseEmbed.mcSign);				mcEmbedCode.mcCloseBtn.mcCloseEmbed.mcBackground.onRollOut = Proxy.create(this, embedButtonsRollOut, mcEmbedCode.mcCloseBtn.mcCloseEmbed.mcSign);				mcEmbedCode.mcCloseBtn.mcCloseEmbed.mcBackground.onRelease = Proxy.create(this, embedButtonsRelease, mcEmbedCode.mcCloseBtn.mcCloseEmbed.mcBackground);								mcEmbedCode.mcCopyBtn.attachMovie("mcCopyEmbed", "mcCopyEmbed", mcEmbedCode.mcCopyBtn.getNextHighestDepth());				mcEmbedCode.mcCopyBtn.mcCopyEmbed.mcSign.setColor(embedWindowButtonsTextColor);				mcEmbedCode.mcCopyBtn.mcCopyEmbed.mcSign.txt.embedFonts = true;				mcEmbedCode.mcCopyBtn.mcCopyEmbed.mcSign.txt.autoSize = true;				mcEmbedCode.mcCopyBtn.mcCopyEmbed.mcSign.txt.text = embedWindowCopyText;								//mcEmbedCode.mcCopyBtn.mcCopyEmbed.mcBackground.lineStyle(0.25, embedWindowButtonsStrokeColor);				with(mcEmbedCode.mcCopyBtn.mcCopyEmbed.mcBackground)				{					moveTo(5, 0);					beginFill(this.embedWindowButtonsColor, 100);					lineTo(45, 0);					curveTo(50, 0, 50, 5);					lineTo(50, 15);					curveTo(50, 20, 45, 20);					lineTo(5, 20);					curveTo(0, 20, 0, 15);					lineTo(0, 5);					curveTo(0, 0, 5, 0);					endFill();				}								mcEmbedCode.mcCopyBtn.mcCopyEmbed.cacheAsBitmap = true;								mcEmbedCode.mcCopyBtn.mcCopyEmbed.mcSign._x = Math.round((mcEmbedCode.mcCopyBtn.mcCopyEmbed.mcBackground._width - mcEmbedCode.mcCopyBtn.mcCopyEmbed.mcSign._width)/2);				mcEmbedCode.mcCopyBtn.mcCopyEmbed.mcSign._y = Math.round((mcEmbedCode.mcCopyBtn.mcCopyEmbed.mcBackground._height - mcEmbedCode.mcCopyBtn.mcCopyEmbed.mcSign._height)/2 + 4);								mcEmbedCode.mcCopyBtn._y = Math.round(mcEmbedCode.mcTextBackground._y + mcEmbedCode.mcTextBackground._height + 10);				mcEmbedCode.mcCopyBtn._x = Math.round(mcEmbedCode.mcTextBackground._x + mcEmbedCode.mcTextBackground._width - mcEmbedCode.mcCopyBtn._width);								mcEmbedCode.mcCopyBtn.mcCopyEmbed.mcBackground.onRollOver = Proxy.create(this, embedButtonsRollOver, mcEmbedCode.mcCopyBtn.mcCopyEmbed.mcSign);				mcEmbedCode.mcCopyBtn.mcCopyEmbed.mcBackground.onRollOut = Proxy.create(this, embedButtonsRollOut, mcEmbedCode.mcCopyBtn.mcCopyEmbed.mcSign);				mcEmbedCode.mcCopyBtn.mcCopyEmbed.mcBackground.onRelease = Proxy.create(this, embedButtonsRelease, mcEmbedCode.mcCopyBtn.mcCopyEmbed.mcBackground);								mcEmbedCode.mcCloseBtn._y = 5;				mcEmbedCode.mcCloseBtn._x = mcEmbedCode._width - 25;								mcEmbedCode._x = Math.round((sWidth - mcEmbedCode._width)/2);				mcEmbedCode._y = Math.round((sHeight - controlsBackgroundHeight - mcEmbedCode._height)/2);				mcEmbedCode.mcMainBackground.onPress = Proxy.create(this, embedPress);				mcEmbedCode.mcMainBackground.onRelease = mcEmbedCode.mcMainBackground.onReleaseOutside = Proxy.create(this, embedRelease);				//*************************************** 								//set splash screen visibility				if(splashscreen != "true")				{					mcUpBar._visible = false;					mcDownBar._visible = false;					mcMiddleLine._visible = false;					mcStartText._visible = false;				}								//load data content				loadXMLData(contentPath);			}			else			{				albumImage = new Array();				titles = new Array();				authors = new Array();				albumsNumber = xmlData.firstChild.childNodes.length;								//attach albums on the stage				_global['setTimeout'](this, 'createAlbums', 1000);				caurina.transitions.Tweener.addTween(mcMiddleLine, {_alpha : 0, time : 0.5, delay : 1, onComplete:function(){this._visible = false;}, transition:"easeOutExpo"});				caurina.transitions.Tweener.addTween(mcUpBar, {_y : -firstPageBarHeight, time:1, delay : 1, onComplete:function(){this._visible = false;}, transition:"easeOutExpo"});				caurina.transitions.Tweener.addTween(mcStartText, {_y : -firstPageBarHeight - mcStartText._height/3, time:1, delay : 1, onComplete:function(){this._visible = false;}, transition:"easeOutExpo"});				caurina.transitions.Tweener.addTween(mcDownBar, {_y: sHeight + firstPageBarHeight, time:1, delay : 1, onComplete:function(){this._visible = false;}, transition:"easeOutExpo"});								//attach the controls bar				attachControls();								mcPlaylist = this.attachMovie("mcPlaylist", "mcPlaylist", this.getNextHighestDepth());				mcPlaylist._x = imageWidth + imagesBorder* 2 + 2* playerMargin;				mcPlaylist._y = Math.round(sHeight - 2 * playerMargin - 2 * imagesBorder - imageHeight - controlsHeight - 7);								mcControls.swapDepths(mcPlaylist);			}		}		else		{			trace("Loading XML file error");		}	}		/**	 * embed window roll overs	 */	private function embedButtonsRollOver(mc : MovieClip) : Void	{		caurina.transitions.Tweener.addTween(mc, {_color : embedWindowButtonRollOverColor, time : 0.5, transition:"easeOutExpo"});		caurina.transitions.Tweener.addTween(mc._parent.mcBackground, {_color : embedWindowButtonBackgroundRollOverColor, time : 0.5, transition:"easeOutExpo"});	}		/**	 * embed window roll out	 */	private function embedButtonsRollOut(mc : MovieClip) : Void	{		caurina.transitions.Tweener.addTween(mc, {_color : embedWindowButtonsTextColor, time : 0.5, transition:"easeOutExpo"});		caurina.transitions.Tweener.addTween(mc._parent.mcBackground, {_color : null, time : 0.5, transition:"easeOutExpo"});	}		/**	 * embed window release	 */	private function embedButtonsRelease(mc : MovieClip) : Void	{		if(mc == mcEmbedCode.mcCloseBtn.mcCloseEmbed.mcBackground)		{			mcEmbedCode._visible = false;			Main.getInstance().mcAlbums.mcControls.embedCanPress = true;			Selection.setFocus(mcEmbedCode.mcText.mcEmbedTextCode.txt);    		Selection.setSelection(0, 0);		}		if(mc == mcEmbedCode.mcCopyBtn.mcCopyEmbed.mcBackground)		{			Selection.setFocus(mcEmbedCode.mcText.mcEmbedTextCode.txt);    		Selection.setSelection(0, mcEmbedCode.mcText.mcEmbedTextCode.txt.text.length);    		System.setClipboard(mcEmbedCode.mcText.mcEmbedTextCode.txt.text);		}		//caurina.transitions.Tweener.addTween(mc, {_color : embedWindowButtonsTextColor, time : 0.5, transition:"easeOutExpo"});	}		//just to have 	private function textRollOver() : Void	{			}		/**	 * start embed window dragging	 */	private function embedPress() : Void	{		mcEmbedCode.startDrag();		mcEmbedCode.onMouseMove = Proxy.create(this, embedCodeMove);		//mcEmbedCode.addEventListener(MouseEvent.MOUSE_MOVE, embedCodeMove);		caurina.transitions.Tweener.addTween(mcEmbedCode.mcMainBackground,{_alpha:50, time:0.5, transition:"easeOutExpo"});	}		/**	 * moving the mebed code window	 */	private function embedCodeMove() : Void	{		if(mcEmbedCode._x < playerMargin)		{			mcEmbedCode._x = playerMargin;		}		if(mcEmbedCode._y < playerMargin)		{			mcEmbedCode._y = playerMargin;		}		if(mcEmbedCode._x > sWidth - mcEmbedCode._width - playerMargin)		{			mcEmbedCode._x = sWidth - mcEmbedCode._width - playerMargin;		}		if(mcEmbedCode._y > sHeight - mcEmbedCode._height - playerMargin)		{			mcEmbedCode._y = sHeight - mcEmbedCode._height - playerMargin;		}	}		/**	 * stop embed window dragging	 */	private function embedRelease() : Void	{		mcEmbedCode.stopDrag();		delete mcEmbedCode.onMouseMove;				embedCodeMove();				caurina.transitions.Tweener.addTween(mcEmbedCode.mcMainBackground,{_alpha:90, time:0.5, transition:"easeOutExpo"});	}		/**	 * create albums function	 */	private function createAlbums() : Void	{		caurina.transitions.Tweener.addTween(mcBottomBackground, {_y: sHeight - (sHeight - 2 * playerMargin - imagesBorder - imageHeight - topMargin) - (imagesBorder + playerMargin + imageHeight + topMargin), time:1, transition:"easeOutExpo"});				mcContainer = this.createEmptyMovieClip("mcContainer", this.getNextHighestDepth());		mcContainer._x = playerMargin + sidewaysGalleryMargin;		mcMask = this.createEmptyMovieClip("mcMask", this.getNextHighestDepth());		mcMask.attachMovie("mcImagesMask", "mcImagesMask", mcMask.getNextHighestDepth());		mcMask._width = sWidth - 2* playerMargin - 2* sidewaysGalleryMargin;		mcMask._x = playerMargin + sidewaysGalleryMargin;		mcMask._height = 1;		mcMask._y = Math.round(sHeight/2);		mcContainer.setMask(mcMask);				mcContainer.swapDepths(mcControls);				//back to albums button		mcBack = this.createEmptyMovieClip("mcBack", this.getNextHighestDepth());		mcBack.attachMovie("mcBackBtn", "mcBackBtn", mcBack.getNextHighestDepth());		mcBack.mcBackBtn.mcText._alpha = 0;		mcBack.mcBackBtn.mcShape._alpha = 0;		mcBack.mcBackBtn.mcText.txt.autoSize = true;		mcBack.mcBackBtn.mcText.txt.textColor = backAlbumsTextColor;		mcBack.mcBackBtn.mcText.txt.embedFonts = true;		mcBack.mcBackBtn.mcText.txt.text = backButtonText;		mcBack.mcBackBtn._x = playerMargin + sidewaysGalleryMargin;		mcBack.mcBackBtn._y = playerMargin;				//fill the back button background		var boxProperties:Object = {x:0, y:0, w:2, h:2}; // x and y defining x and y positions, w and h defining width and height of your box		var colArray:Array = [backAlbumsBackgroundBeginColor, backAlbumsBackgroundEndColor]; // your colors		var alpArray:Array = [100, 100]; // your alphas		var sprArray:Array = [0, 255]; // gradient spread		var matrixData:Object = {matrixType:"box", x:0, y:0, w:2, h:2, r:90/180*Math.PI};//imageHeight + imagesBorder + topMargin				mcBack.mcBackBtn.mcBackground.lineStyle(0.25, backAlbumsBackgroundStrokeColor);		with(mcBack.mcBackBtn.mcBackground)		{			moveTo(boxProperties.x, boxProperties.y);			beginGradientFill("linear", colArray, alpArray, sprArray, matrixData);			lineTo(boxProperties.x + boxProperties.w, boxProperties.y);			lineTo(boxProperties.x + boxProperties.w, boxProperties.y + boxProperties.h);			lineTo(boxProperties.x, boxProperties.y + boxProperties.h);			lineTo(boxProperties.x, boxProperties.y);			endFill();		}				//fill the back button triangle shape		var colorShape : Number = backAlbumsShapeColor;		var matrixShapeData:Object = {matrixType:"box", x:0, y:0, w:mcBack.mcBackBtn.mcText._width, h:mcBack.mcBackBtn.mcText._height, r:90/180*Math.PI};		glowFilter = new GlowFilter(backAlbumsBackgroundStrokeColor, 0.25, 1.1, 1.1, 20, 15, false, false);		var filterArray : Array = new Array();		filterArray.push(glowFilter);				//mcBack.mcBackBtn.mcShape.lineStyle(1, backAlbumsBackgroundStrokeColor);		with(mcBack.mcBackBtn.mcShape)		{			moveTo(5, 0);			beginGradientFill("linear", colArray, alpArray, sprArray, matrixShapeData);			lineTo(this.mcBack.mcBackBtn.mcText._width, 0);			curveTo(this.mcBack.mcBackBtn.mcText._width + 5, 0, this.mcBack.mcBackBtn.mcText._width + 5, 5);			lineTo(this.mcBack.mcBackBtn.mcText._width + 5, this.mcBack.mcBackBtn.mcText._height - 5);			curveTo(this.mcBack.mcBackBtn.mcText._width + 5, this.mcBack.mcBackBtn.mcText._height, this.mcBack.mcBackBtn.mcText._width, this.mcBack.mcBackBtn.mcText._height);			lineTo(5, this.mcBack.mcBackBtn.mcText._height);			curveTo(0, this.mcBack.mcBackBtn.mcText._height, 0, this.mcBack.mcBackBtn.mcText._height - 5);			lineTo(0, 5);			curveTo(0, 0, 5, 0);			endFill();		}				mcBack.mcBackBtn.mcShape.filters = filterArray;		mcBack.mcBackBtn.mcShape.cacheAsBitmap = true;		mcBack.mcBackBtn.mcShape.forceSmoothing = true;				mcBack.mcBackBtn.mcBackground._width = sWidth - 2 * playerMargin - 2 * sidewaysGalleryMargin + 1;		mcBack.mcBackBtn.mcBackground._height = backBackgroundHeight;		mcBack.mcBackBtn.mcText._x = Math.round(mcBack.mcBackBtn.mcBackground._width - mcBack.mcBackBtn.mcText._width - 10);		mcBack.mcBackBtn.mcText._y = Math.round((mcBack.mcBackBtn.mcBackground._height - mcBack.mcBackBtn.mcText._height)/2 + 2);				mcBack.mcBackBtn.mcShape._x = Math.round(mcBack.mcBackBtn.mcText._x - 2);		mcBack.mcBackBtn.mcShape._y = Math.round((mcBack.mcBackBtn.mcBackground._height - mcBack.mcBackBtn.mcShape._height)/2);				mcBack.mcBackBtn.mcAuthor.txt.embedFonts = true;		mcBack.mcBackBtn.mcAuthor.txt.autoSize = true;		mcBack.mcBackBtn.mcAuthor.txt.textColor =  albumAuthorTextColor;		mcBack.mcBackBtn.mcAuthor._x = 10;		mcBack.mcBackBtn.mcAuthor._y = 5;				mcBack.mcBackBtn.mcAlbumDescription.mcName.txt.textColor = albumNameTextColor;		mcBack.mcBackBtn.mcAlbumDescription.mcTitle.txt.textColor = albumNameTextColor;		mcBack.mcBackBtn.mcAlbumDescription.mcName.txt.autoSize = true;		mcBack.mcBackBtn.mcAlbumDescription.mcName.txt.embedFonts = true;		mcBack.mcBackBtn.mcAlbumDescription.mcTitle.txt.embedFonts = true;		mcBack.mcBackBtn.mcAlbumDescription.mcTitle.txt.autoSize = true;		mcBack.mcBackBtn.mcAlbumDescription.mcTitle._y = 2;		mcBack.mcBackBtn.mcAlbumDescription.mcTitle.txt.text = "Album: ";		mcBack.mcBackBtn.mcAlbumDescription.mcName._x = mcBack.mcBackBtn.mcAlbumDescription.mcTitle._x + mcBack.mcBackBtn.mcAlbumDescription.mcTitle._width + 5;		mcBack.mcBackBtn.mcAlbumDescription._x = 10;		mcBack.mcBackBtn.mcAlbumDescription._y = Math.round(mcBack.mcBackBtn.mcAuthor._y + mcBack.mcBackBtn.mcAuthor._height + 15);		mcBack.mcBackBtn.mcAlbumDescription.mcMask._x = mcBack.mcBackBtn.mcAlbumDescription.mcTitle._x + mcBack.mcBackBtn.mcAlbumDescription.mcTitle._width + 5;		mcBack.mcBackBtn.mcAlbumDescription.mcMask._y = 2;		mcBack.mcBackBtn.mcAlbumDescription.mcMask._width = mcBack.mcBackBtn.mcBackground._width - mcBack.mcBackBtn.mcShape._width - 50 - mcBack.mcBackBtn.mcAlbumDescription.mcTitle._width - 5;				mcBack.mcBackBtn.mcSongDescription.mcName.txt.textColor = albumNameTextColor;		mcBack.mcBackBtn.mcSongDescription.mcTitle.txt.textColor = albumNameTextColor;		mcBack.mcBackBtn.mcSongDescription.mcName.txt.autoSize = true;		mcBack.mcBackBtn.mcSongDescription.mcName.txt.embedFonts = true;		mcBack.mcBackBtn.mcSongDescription.mcTitle.txt.embedFonts = true;		mcBack.mcBackBtn.mcSongDescription.mcTitle.txt.autoSize = true;		mcBack.mcBackBtn.mcSongDescription.mcTitle._y = 2;		mcBack.mcBackBtn.mcSongDescription.mcTitle.txt.text = "Now playing: ";		mcBack.mcBackBtn.mcSongDescription.mcName._x = mcBack.mcBackBtn.mcSongDescription.mcTitle._x + mcBack.mcBackBtn.mcSongDescription.mcTitle._width + 5;		mcBack.mcBackBtn.mcSongDescription._x = 10;		mcBack.mcBackBtn.mcSongDescription._y = Math.round(mcBack.mcBackBtn.mcAuthor._y + mcBack.mcBackBtn.mcAuthor._height + 35);		mcBack.mcBackBtn.mcSongDescription.mcMask._x = mcBack.mcBackBtn.mcSongDescription.mcTitle._x + mcBack.mcBackBtn.mcSongDescription.mcTitle._width + 5;		mcBack.mcBackBtn.mcSongDescription.mcMask._y = 2;		mcBack.mcBackBtn.mcSongDescription.mcMask._width = mcBack.mcBackBtn.mcBackground._width - mcBack.mcBackBtn.mcShape._width - 50 - mcBack.mcBackBtn.mcSongDescription.mcTitle._width - 5;				mcBack.mcBackBtn.mcMask._y = Math.round(mcBack.mcBackBtn.mcAuthor._y + mcBack.mcBackBtn.mcAuthor._height + 15);		mcBack.mcBackBtn.mcMask._x = 10;		mcBack.mcBackBtn.mcMask._width = mcBack.mcBackBtn.mcBackground._width - mcBack.mcBackBtn.mcShape._width - 50;						mcBack.mcBackBtn.mcAlbumDescription._alpha = 0;		mcBack.mcBackBtn.mcSongDescription._alpha = 0;		mcBack.mcBackBtn.mcAuthor._alpha = 0;				caurina.transitions.Tweener.addTween(mcMask, {_y : 0, _height : sHeight, time:1, transition:"easeOutExpo"});				for(var i = 0; i < albumsNumber; i++)		{			albumImage[i] = xmlData.firstChild.childNodes[i].attributes.imageUrl;			titles[i] = xmlData.firstChild.childNodes[i].attributes.name;			authors[i] = xmlData.firstChild.childNodes[i].attributes.author;						var mc : MovieClip = mcContainer.attachMovie("mcAlbumImage", "mcAlbumImage" + i, i);						mc.mcInfo._visible = false;			mc.mcInfo._alpha = 0;			mc.mcInfo.setColor(albumInfoColor);			mc.mcInfo._x = Math.round(imagesBorder + 5);			mc.mcInfo._y = Math.round(imageHeight - mc.mcInfo._height - imagesBorder - 3);						mc.mcLeftArrow.mcBackground.setColor(albumArrowBackgroundColor);			mc.mcLeftArrow.mcArrow.setColor(albumArrowColor);			mc.mcRightArrow.mcBackground.setColor(albumArrowBackgroundColor);			mc.mcRightArrow.mcArrow.setColor(albumArrowColor);			mc.mcLeftArrow._x = imagesBorder - 1;			mc.mcLeftArrow._y = Math.round((2*imagesBorder + imageHeight - mc.mcLeftArrow._height)/2);			mc.mcRightArrow._x = Math.round(imagesBorder + imageWidth - mc.mcRightArrow._width + 1);			mc.mcRightArrow._y = Math.round((2*imagesBorder + imageHeight - mc.mcRightArrow._height)/2);			mc.mcRightArrow._visible = false;			mc.mcLeftArrow._visible = false;			mc.mcLeftArrow._alpha = 0;			mc.mcRightArrow._alpha = 0;						mc.mcLeftArrow.onRollOver = Proxy.create(this, arrowRollOver, mc.mcLeftArrow);			mc.mcLeftArrow.onRollOut = Proxy.create(this, arrowRollOut, mc.mcLeftArrow);			mc.mcLeftArrow.onRelease = Proxy.create(this, arrowRelease, mc.mcLeftArrow);			mc.mcRightArrow.onRollOver = Proxy.create(this, arrowRollOver, mc.mcRightArrow);			mc.mcRightArrow.onRollOut = Proxy.create(this, arrowRollOut, mc.mcRightArrow);			mc.mcRightArrow.onRelease = Proxy.create(this, arrowRelease, mc.mcRightArrow);						mc.mcInfo.onRollOver = Proxy.create(this, infoRollOver, mc);			mc.mcInfo.onRollOut = Proxy.create(this, infoRollOut, mc);			mc.mcInfo.onRelease = Proxy.create(this, infoRelease, mc);						mc._y = topMargin;						if(albumsNumber * (imageWidth + imagesBorder * 2) + imagesBorder * (albumsNumber - 1) > sWidth)			{				mc._x = Math.round(imageWidth* i + distanceBetweenImages * i);			}			else			{				mc._x = Math.round((sWidth - (imageWidth + 2 * imagesBorder) * albumsNumber - imagesBorder * (albumsNumber - 1))/2 + imageWidth* i + distanceBetweenImages * i);			}						mc.mcImage._x = imagesBorder;			mc.mcMask._x = imagesBorder;			mc.mcImage._y = imagesBorder;			mc.mcMask._y = imagesBorder;			mc.mcBackground._alpha = 100;			caurina.transitions.Tweener.addTween(mc.mcBackground, {_color : imagesBorderColor, time : 0.1, transition:"easeOutExpo"});			mc.mcBackground._width = Math.round(imageWidth + imagesBorder * 2);			mc.mcBackground._height = Math.round(imageHeight + imagesBorder * 2);			mc.mcHitBackground._width = Math.round(imageWidth + imagesBorder * 2);			mc.mcHitBackground._height = Math.round(imageHeight + imagesBorder * 2);			mc.mcMask._width = Math.round(imageWidth);			mc.mcMask._height = Math.round(imageHeight);						loadImage(pathTo + "/" + albumImage[i], mc.mcImage, imageWidth, imageHeight);						mc.mcHitBackground.onRelease = Proxy.create(this, onAlbumRelease, mc);			mc.mcHitBackground.onRollOver = Proxy.create(this, onAlbumRollOver, mc);			mc.mcHitBackground.onRollOut = mc.mcHitBackground.onReleaseOutside = Proxy.create(this, onAlbumRollOut, mc);						mc.cacheAsBitmap = true;		}				if(albumsNumber * (imageWidth + imagesBorder * 2) + imagesBorder * (albumsNumber - 1) > sWidth)		{			mcScrollbar = this.attachMovie("mcScrollbar", "mcScrollbar", this.getNextHighestDepth());			mcScrollbar.init(mcContainer, mcMask, sWidth - 2* playerMargin - 1, 10, true, scrollBtnHeight, scrollBgHeight, scrollBgLargeHeight, scrollButtonBeginColor, scrollButtonEndColor, scrollBgBeginColor, scrollBgMiddleColor, scrollBgEndColor, scrollLargeBgBeginColor, scrollLargeBgEndColor, scrollbarControlLinesColor, scrollbarControlBeginColor, scrollbarControlEndColor, scrollBgLargeStrokeColor, scrollBgStrokeColor);						//start autoscrolling if the value is true			if(autoscrollBegin.toLowerCase() == "true")			{					_global['clearTimeout'](albumTimeout);				albumTimeout = _global['setTimeout'](this, 'beginAutoSlide', Main.getInstance().mcAlbums.autoslidePause * 1000, true, Main.getInstance().mcAlbums.sWidth);			}			mcScrollbar._x = imagesBorder;			mcScrollbar._y = sHeight;//sHeight - mcScrollbar._height - 1 - imagesBorder;			caurina.transitions.Tweener.addTween(mcScrollbar, {_y : sHeight - mcScrollbar._height - 1 - playerMargin, time : 1, transition:"easeOutExpo"});		}				//back to albums release		mcBack.mcBackBtn.mcShape.onRelease = Proxy.create(this, backBtnRelease);		mcBack.mcBackBtn.mcShape.onRollOver = Proxy.create(this, backBtnRollOver);		mcBack.mcBackBtn.mcShape.onRollOut = Proxy.create(this, backBtnRollOut);						if(tooltipVisibility == "true")		{			mcTooltip = this.createEmptyMovieClip("mcTooltip", this.getNextHighestDepth());			mcTooltip.attachMovie("mcTooltipShape", "mcTooltipShape", mcTooltip.getNextHighestDepth());			mcTooltip.mcTooltipShape.mcTooltipBackground.cacheAsBitmap = true;			mcTooltip.mcTooltipShape.mcTooltipBackground.setColor(tooltipBackgroundColor);			mcTooltip.mcTooltipShape.mcTooltipSign.setColor(tooltipBackgroundColor);			mcTooltip.mcTooltipShape.mcTooltipText.setColor(tooltipTextColor);			mcTooltip.mcTooltipShape.mcRightRound.setColor(tooltipRoundsColor);			mcTooltip.mcTooltipShape.mcLeftRound.setColor(tooltipRoundsColor);			mcTooltip.mcTooltipShape.mcTooltipText.txt.autoSize = true;			mcTooltip.mcTooltipShape.mcTooltipText.txt.embedFonts = true;			mcTooltip._alpha = 0;			var dropShadow : DropShadowFilter = new DropShadowFilter(2, 45, 0x000000, 0.5, 4, 4, 2, 3);    		mcTooltip.filters = [dropShadow]		}	}		public function beginAutoSlide() : Void	{		mcScrollbar.autoScroll(true, sWidth);	}		/**	 * animate sonng and album title	 */	private function animateTitle() : Void	{		if(isAlbum == true)		{			caurina.transitions.Tweener.addTween(mcBack.mcBackBtn.mcAlbumDescription, {_y:mcBack.mcBackBtn.mcMask._y - 18, time:0.5, onComplete:function(){this._y += 35;}, transition:"easeOutExpo"});			caurina.transitions.Tweener.addTween(mcBack.mcBackBtn.mcSongDescription, {_y:Math.round(mcBack.mcBackBtn.mcMask._y), time:0.5, transition:"easeOutExpo"});			isAlbum = false;		}		else		{			caurina.transitions.Tweener.addTween(mcBack.mcBackBtn.mcSongDescription, {_y:mcBack.mcBackBtn.mcMask._y - 18, time:0.5, onComplete:function(){this._y += 35;}, transition:"easeOutExpo"});			caurina.transitions.Tweener.addTween(mcBack.mcBackBtn.mcAlbumDescription, {_y:Math.round(mcBack.mcBackBtn.mcMask._y), time:0.5, transition:"easeOutExpo"});			isAlbum = true;		}	}		/**	 * album arrows roll over	 */	private function arrowRollOver(mc : MovieClip) : Void	{		caurina.transitions.Tweener.addTween(mc.mcArrow,{_color:albumArrowOverColor, time:0.5, transition:"easeOutExpo"});	}		/**	 * album arrows roll out	 */	private function arrowRollOut(mc : MovieClip) : Void	{		var title : String = mc._parent._name;		var albumIndex : Number = Number(title.substring(title.lastIndexOf("e")+1,title.length));		if(mc == mcContainer["mcAlbumImage" + albumIndex].mcLeftArrow)		{			if(albumIndex > 0)			{				caurina.transitions.Tweener.addTween(mc.mcArrow,{_color:albumArrowColor, time:0.5, transition:"easeOutExpo"});			}		}		if(mc == mcContainer["mcAlbumImage" + albumIndex].mcRightArrow)		{			if(albumIndex < albumsNumber - 1)			{				caurina.transitions.Tweener.addTween(mc.mcArrow,{_color:albumArrowColor, time:0.5, transition:"easeOutExpo"});			}		}	}		/**	 * album arrows release	 */	private function arrowRelease(mc : MovieClip) : Void	{		var title : String = mc._parent._name;		var albumIndex : Number = Number(title.substring(title.lastIndexOf("e")+1,title.length));				if(mc == mcContainer["mcAlbumImage" + albumIndex].mcLeftArrow)		{			if(albumIndex > 0)			{				onAlbumRelease(mcContainer["mcAlbumImage" + (albumIndex - 1)]);				if(albumIndex == albumsNumber - 1)				{					mcContainer["mcAlbumImage" + (albumsNumber - 1)].mcRightArrow.useHandCursor = true;					caurina.transitions.Tweener.addTween(mcContainer["mcAlbumImage" + (albumsNumber - 1)].mcRightArrow.mcArrow,{_color:albumArrowColor, time:0.5, transition:"easeOutExpo"});				}				if(albumIndex - 1 == 0)				{					mcContainer["mcAlbumImage" + (albumIndex - 1)].mcLeftArrow.useHandCursor = false;					caurina.transitions.Tweener.addTween(mcContainer["mcAlbumImage" + (albumIndex - 1)].mcLeftArrow.mcArrow,{_color:albumArrowOverColor, time:0.5, transition:"easeOutExpo"});				}			}		}				if(mc == mcContainer["mcAlbumImage" + albumIndex].mcRightArrow)		{			if(albumIndex < albumsNumber - 1)			{				onAlbumRelease(mcContainer["mcAlbumImage" + (albumIndex + 1)]);				if(albumIndex == 0)				{					mcContainer["mcAlbumImage" + 0].mcLeftArrow.useHandCursor = true;					caurina.transitions.Tweener.addTween(mcContainer["mcAlbumImage" + 0].mcLeftArrow.mcArrow,{_color:albumArrowColor, time:0.5, transition:"easeOutExpo"});				}				if(albumIndex + 1 == albumsNumber - 1)				{					mcContainer["mcAlbumImage" + (albumsNumber - 1)].mcRightArrow.useHandCursor = false;					caurina.transitions.Tweener.addTween(mcContainer["mcAlbumImage" + (albumsNumber - 1)].mcRightArrow.mcArrow,{_color:albumArrowOverColor, time:0.5, transition:"easeOutExpo"});				}			}		}	}			/**	 * album info button roll over	 */	private function infoRollOver(mc : MovieClip) : Void	{		caurina.transitions.Tweener.addTween(mc.mcInfo,{_color:albumInfoOverColor, time:0.5, transition:"easeOutExpo"});	}		/**	 * album info button roll out	 */	private function infoRollOut(mc : MovieClip) : Void	{		var title : String = mc._parent._name;		var albumIndex : Number = Number(title.substring(title.lastIndexOf("e")+1,title.length));		caurina.transitions.Tweener.addTween(mc.mcInfo,{_color:albumInfoColor, time:0.5, transition:"easeOutExpo"});	}		/**	 * album info button release	 */	private function infoRelease(mc : MovieClip) : Void	{		var title : String = mc._name;		var albumIndex : Number = Number(title.substring(title.lastIndexOf("e")+1,title.length));		//trace(xmlData.firstChild.childNodes[albumIndex].attributes.link);		getURL(xmlData.firstChild.childNodes[albumIndex].attributes.link, "_blank");		//trace(xmlData.firstChild.childNodes[albumIndex].attributes.link);	}	/**	 * back button rollover, rollout	 */	private function backBtnRollOver() : Void	{		caurina.transitions.Tweener.addTween(mcBack.mcBackBtn.mcText, {_color:backButtonOverColor, time:0.5, transition:"easeOutExpo"});	}	private function backBtnRollOut() : Void	{		caurina.transitions.Tweener.addTween(mcBack.mcBackBtn.mcText, {_color:null, time:0.5, transition:"easeOutExpo"});	}		/**	 * back to all albums function	 */	private function backBtnRelease() : Void	{		clickOnAlbum = false;		clearInterval(titleAnimation);				//delete mcBack.mcBackBtn.mcSongDescription.onEnterFrame;		//delete mcBack.mcBackBtn.mcAlbumDescription.onEnterFrame;		_global['clearInterval'](mcBack.mcBackBtn.mcSongDescription.interval);		_global['clearTimeout'](mcBack.mcBackBtn.mcSongDescription.timeout);		_global['clearInterval'](mcBack.mcBackBtn.mcAlbumDescription.interval);		_global['clearTimeout'](mcBack.mcBackBtn.mcAlbumDescription.timeout);				mcBack.mcBackBtn.mcAlbumDescription.mcName._x = mcBack.mcBackBtn.mcAlbumDescription.mcMask._x;				embedButtonsRelease(mcEmbedCode.mcCloseBtn.mcCloseEmbed.mcBackground);		playlistVisible = false;		caurina.transitions.Tweener.addTween(mcContainer["mcAlbumImage" + lastAlbumClicked].mcBackground, {_color:imagesBorderColor, _y : 0, time:0.5, transition:"easeOutExpo"});		caurina.transitions.Tweener.addTween(mcContainer["mcAlbumImage" + lastAlbumClicked], {_y:topMargin, time:0.5, transition:"easeOutExpo"});				mcPlaylist.deletePlaylist(xmlData.firstChild.childNodes[lastAlbumClicked].childNodes.length);		for(var i = 0; i < albumsNumber; i++)		{			if(i != lastAlbumClicked)			{				caurina.transitions.Tweener.addTween(mcContainer["mcAlbumImage" + i],{_y:topMargin, time:0.5, transition:"easeOutExpo"});			}		}		mcScrollbar._visible = true;		mcContainer["mcAlbumImage" + lastAlbumClicked].mcHitBackground.useHandCursor = true;		caurina.transitions.Tweener.addTween(mcContainer["mcAlbumImage" + lastAlbumClicked].mcInfo, {_alpha:0, time:0.5, onComplete:function(){this._visible = false;}, transition:"easeOutExpo"});		caurina.transitions.Tweener.addTween(mcContainer["mcAlbumImage" + lastAlbumClicked].mcLeftArrow, {_alpha:0, time:0.5, onComplete:function(){this._visible = false;}, transition:"easeOutExpo"});		caurina.transitions.Tweener.addTween(mcContainer["mcAlbumImage" + lastAlbumClicked].mcRightArrow, {_alpha:0, time:0.5, onComplete:function(){this._visible = false;}, transition:"easeOutExpo"});		caurina.transitions.Tweener.addTween(mcContainer["mcAlbumImage" + lastAlbumClicked].reflection_mc,{_alpha:100, time:0.5, transition:"easeOutExpo"});		caurina.transitions.Tweener.addTween(mcBack.mcBackBtn.mcBackground,{_alpha:0, time:0.5, transition:"easeOutExpo"});		caurina.transitions.Tweener.addTween(mcBack.mcBackBtn.mcShape,{_alpha:0, time:0.5, transition:"easeOutExpo"});		caurina.transitions.Tweener.addTween(mcBack.mcBackBtn.mcText,{_alpha:0, time:0.5, onComplete:function(){this._parent._parent._visible = false;}, transition:"easeOutExpo"});		caurina.transitions.Tweener.addTween(mcBack.mcBackBtn.mcAlbumDescription,{_alpha:0, time:0.5, onComplete:function(){this._parent._parent._visible = false;}, transition:"easeOutExpo"});		caurina.transitions.Tweener.addTween(mcBack.mcBackBtn.mcSongDescription,{_alpha:0, time:0.5, onComplete:function(){this._parent._parent._visible = false;}, transition:"easeOutExpo"});		caurina.transitions.Tweener.addTween(mcBack.mcBackBtn.mcAuthor,{_alpha:0, time:0.5, onComplete:function(){this._parent._parent._visible = false;}, transition:"easeOutExpo"});		caurina.transitions.Tweener.addTween(mcContainer,{_x:playerMargin, time:0.5, transition:"easeOutExpo"});		caurina.transitions.Tweener.addTween(mcScrollbar,{_alpha:100, _y:sHeight - mcScrollbar._height - playerMargin - 1, time:0.5, transition:"easeOutExpo"});		caurina.transitions.Tweener.addTween(mcControls,{_alpha:0, _y:sHeight, time:0.5, onComplete:function(){this._visible = false;}, transition:"easeOutExpo"});				_global['clearTimeout'](albumTimeout);		//mcScrollbar.resetScroll();		if(autoscrollBegin.toLowerCase() == "true")		{			albumTimeout = _global['setTimeout'](this, 'callAutoscroll', 500 + autoslidePause * 1000, sWidth);		}		_global['setTimeout'](this, 'setClickToAlbum', 500);	}		/**	 * autoscroll albums	 */	private function callAutoscroll(no : Number) : Void	{		mcScrollbar.autoScroll(true, no);	}		/**	 * set clickAlbum to true	 */	private function setClickToAlbum() : Void	{		clickOnAlbum = true;		albumsOrPlaylist = true;	}		/**	 * album realease function	 */	private function onAlbumRelease(mc : MovieClip) : Void	{		_global['clearTimeout'](albumTimeout);		_global['clearTimeout'](Main.getInstance().mcAlbums.mcScrollbar.releaseBgTimeout);		_global['clearTimeout'](Main.getInstance().mcAlbums.mcScrollbar.autoscrollTimeout);				if(albumsOrPlaylist == true)		{			if(clickOnAlbum == true)			{				delete mcBack.mcBackBtn.mcAlbumDescription.onEnterFrame;				mcBack.mcBackBtn.mcAlbumDescription.mcName._x = mcBack.mcBackBtn.mcAlbumDescription.mcMask._x;								clearInterval(titleAnimation);				titleAnimation = _global['setInterval'](this, 'animateTitle', albumSongTime * 1000);								caurina.transitions.Tweener.addTween(mcTooltip,{_alpha:0, time:0.5, transition:"easeOutExpo"});				mcBack._visible = true;				var title : String = mc._name;				index = Number(title.substring(title.lastIndexOf("e")+1,title.length));								//set top author and album title				mcBack.mcBackBtn.mcAuthor.txt.text =  authors[index];				mcBack.mcBackBtn.mcAlbumDescription.mcName.txt.text = titles[index];								//begin sliding animation for album title				if(mcBack.mcBackBtn.mcAlbumDescription.mcName._width > mcBack.mcBackBtn.mcAlbumDescription.mcMask._width)				{					mcBack.mcBackBtn.mcAlbumDescription.direction = 0;					_global['clearInterval'](mcBack.mcBackBtn.mcAlbumDescription.interval);					mcBack.mcBackBtn.mcAlbumDescription.interval = _global['setInterval'](this, 'titleEnterFrame', 75, mcBack.mcBackBtn.mcAlbumDescription, 0);				}				//********								delete mcContainer.onEnterFrame;				delete mcScrollbar.onEnterFrame;				mcControls._visible = true;				caurina.transitions.Tweener.addTween(mcContainer,{_x:-index*(imageWidth + distanceBetweenImages) + playerMargin + sidewaysGalleryMargin, time:0.5, onComplete:deleteOtherAlbums(index), transition:"easeOutExpo"});				caurina.transitions.Tweener.addTween(mcScrollbar,{_alpha:0, _y:sHeight, time:0.2, onComplete:function(){this._visible = false; this.resetScroll();}, transition:"easeOutExpo"});					caurina.transitions.Tweener.addTween(mcControls,{_alpha:100, _y:Math.round(sHeight - controlsHeight - playerMargin - 7), time:0.5, transition:"easeOutExpo"});				var songs : Array = new Array();				var durations : Array = new Array();				var songsList : Array = new Array();				var buyArray : Array = new Array();				var downloadArray : Array = new Array();				var songsLocation : Array = new Array();				for(var i = 0; i < xmlData.firstChild.childNodes[index].childNodes.length; i++)				{					songs[i] = xmlData.firstChild.childNodes[index].childNodes[i].attributes.name;					durations[i] = xmlData.firstChild.childNodes[index].childNodes[i].attributes.duration;					songsList[i] = xmlData.firstChild.childNodes[index].childNodes[i].firstChild.nodeValue;					buyArray[i] = xmlData.firstChild.childNodes[index].childNodes[i].attributes.buy;					downloadArray[i] = xmlData.firstChild.childNodes[index].childNodes[i].attributes.download;					songsLocation[i] = xmlData.firstChild.childNodes[index].childNodes[i].attributes.downloadSource;				}				mcPlaylist.initPlaylist(xmlData.firstChild.childNodes[index].childNodes.length, sWidth - imageWidth - 2* imagesBorder - 3* playerMargin - 2* sidewaysGalleryMargin, imageHeight + 2* imagesBorder - 1, songs, durations, songsList, playlistBackgroundColor, playlistBackgroundStrokeColor, playlistOddButtonColor, playlistEvenButtonBeginColor, playlistEvenButtonEndColor, playlistButtonStrokeColor, playlistButtonTextColor, playlistOverButtonTextColor, playlistOverButtonColor, playlistOverButtonStrokeColor, playlistPressedButtonBeginColor, playlistPressedButtonEndColor, playlistPressedButtonTextColor, playlistPressedButtonStrokeColor, buyButtonBeginColor, buyButtonEndColor, buyButtonStrokeColor, buyButtonOverBeginColor, buyButtonOverEndColor, buyButtonOverStrokeColor, buyButtonPressedBeginColor, buyButtonPressedEndColor, buyButtonPressedStrokeColor, buyButtonSignColor, buyArray, downloadArray, songsLocation);								caurina.transitions.Tweener.addTween(mc, {_y:Math.round(sHeight - 2 * playerMargin - 2 * imagesBorder - imageHeight - controlsHeight - 7), time:0.5, transition:"easeOutExpo"});				caurina.transitions.Tweener.addTween(mc.mcBackground, {_color:imagesBorderOverColor, _y : 0, time:0.5, transition:"easeOutExpo"});				caurina.transitions.Tweener.addTween(mc.reflection_mc, {_y:Math.round(((imageHeight+2* imagesBorder)*2) + imagesBorder), _alpha : 0, time:1, transition:"easeOutExpo"});				caurina.transitions.Tweener.addTween(mc.mcImage, {_y:imagesBorder, time:1, transition:"easeOutExpo"});				caurina.transitions.Tweener.addTween(mc.mcMask, {_y:imagesBorder, time:1, transition:"easeOutExpo"});								//set arrows visibility				if(index == 0)				{					mcContainer["mcAlbumImage" + index].mcLeftArrow.useHandCursor = false;					caurina.transitions.Tweener.addTween(mcContainer["mcAlbumImage" + index].mcLeftArrow.mcArrow,{_color:albumArrowOverColor, time:0.5, transition:"easeOutExpo"});				}				if(index == albumsNumber - 1)				{					mcContainer["mcAlbumImage" + index].mcRightArrow.useHandCursor = false;					caurina.transitions.Tweener.addTween(mcContainer["mcAlbumImage" + index].mcRightArrow.mcArrow,{_color:albumArrowOverColor, time:0.5, transition:"easeOutExpo"});				}			}			lastAlbumClicked = index;			albumsOrPlaylist = false;			playlistVisible = true;		}		else		{			if(clickOnAlbum == true)			{								var title : String = mc._name;				var index = Number(title.substring(title.lastIndexOf("e")+1,title.length));								delete mcBack.mcBackBtn.mcAlbumDescription.onEnterFrame;				mcBack.mcBackBtn.mcAlbumDescription.mcName._x = mcBack.mcBackBtn.mcAlbumDescription.mcMask._x;								if(lastAlbumClicked != index)				{					//simulate back button					caurina.transitions.Tweener.addTween(mcContainer["mcAlbumImage" + lastAlbumClicked].mcBackground, {_color:imagesBorderColor, _y : 0, time:0.5, transition:"easeOutExpo"});					caurina.transitions.Tweener.addTween(mcContainer["mcAlbumImage" + lastAlbumClicked], {_y:topMargin, time:0.5, transition:"easeOutExpo"});										mcPlaylist.deletePlaylist(xmlData.firstChild.childNodes[lastAlbumClicked].childNodes.length);					for(var i = 0; i < albumsNumber; i++)					{						if(i != index)						{							caurina.transitions.Tweener.addTween(mcContainer["mcAlbumImage" + i],{_y:topMargin, time:0.5, transition:"easeOutExpo"});						}					}										//begin sliding animation for album title					if(mcBack.mcBackBtn.mcAlbumDescription.mcName._width > mcBack.mcBackBtn.mcAlbumDescription.mcMask._width)					{						mcBack.mcBackBtn.mcAlbumDescription.direction = 0;						//mcBack.mcBackBtn.mcAlbumDescription.onEnterFrame = Proxy.create(this, titleEnterFrame, mcBack.mcBackBtn.mcAlbumDescription);						_global['clearInterval'](mcBack.mcBackBtn.mcAlbumDescription.interval);						mcBack.mcBackBtn.mcAlbumDescription.interval = _global['setInterval'](this, 'titleEnterFrame', 75, mcBack.mcBackBtn.mcAlbumDescription, 0);					}					//********										mcContainer["mcAlbumImage" + lastAlbumClicked].mcHitBackground.useHandCursor = true;					caurina.transitions.Tweener.addTween(mcContainer["mcAlbumImage" + lastAlbumClicked].mcInfo, {_alpha:0, time:0.5, onComplete:function(){this._visible = false;}, transition:"easeOutExpo"});					caurina.transitions.Tweener.addTween(mcContainer["mcAlbumImage" + lastAlbumClicked].mcLeftArrow, {_alpha:0, time:0.5, onComplete:function(){this._visible = false;}, transition:"easeOutExpo"});					caurina.transitions.Tweener.addTween(mcContainer["mcAlbumImage" + lastAlbumClicked].mcRightArrow, {_alpha:0, time:0.5, onComplete:function(){this._visible = false;}, transition:"easeOutExpo"});								caurina.transitions.Tweener.addTween(mcContainer["mcAlbumImage" + lastAlbumClicked].reflection_mc,{_alpha:100, time:0.5, transition:"easeOutExpo"});															clearInterval(titleAnimation);					titleAnimation = _global['setInterval'](this, 'animateTitle', albumSongTime * 1000);										caurina.transitions.Tweener.addTween(mcTooltip,{_alpha:0, time:0.5, transition:"easeOutExpo"});					mcBack._visible = true;					mcBack.mcBackBtn.mcAuthor.txt.text =  authors[index];					mcBack.mcBackBtn.mcAlbumDescription.mcName.txt.text = titles[index];										delete mcContainer.onEnterFrame;					delete mcScrollbar.onEnterFrame;					mcControls._visible = true;					caurina.transitions.Tweener.addTween(mcContainer,{_x:-index*(imageWidth + distanceBetweenImages) + playerMargin + sidewaysGalleryMargin, time:0.5, onComplete:deleteOtherAlbums(index), transition:"easeOutExpo"});					caurina.transitions.Tweener.addTween(mcScrollbar,{_alpha:0, _y:sHeight, time:0.2, onComplete:function(){this._visible = false; this.resetScroll();}, transition:"easeOutExpo"});						caurina.transitions.Tweener.addTween(mcControls,{_alpha:100, _y:Math.round(sHeight - controlsHeight - playerMargin - 7), time:0.5, transition:"easeOutExpo"});					var songs : Array = new Array();					var durations : Array = new Array();					var songsList : Array = new Array();					var buyArray : Array = new Array();					var downloadArray : Array = new Array();					var songsLocation : Array = new Array();					for(var i = 0; i < xmlData.firstChild.childNodes[index].childNodes.length; i++)					{						songs[i] = xmlData.firstChild.childNodes[index].childNodes[i].attributes.name;						durations[i] = xmlData.firstChild.childNodes[index].childNodes[i].attributes.duration;						songsList[i] = xmlData.firstChild.childNodes[index].childNodes[i].firstChild.nodeValue;						buyArray[i] = xmlData.firstChild.childNodes[index].childNodes[i].attributes.buy;						downloadArray[i] = xmlData.firstChild.childNodes[index].childNodes[i].attributes.download;						songsLocation[i] = xmlData.firstChild.childNodes[index].childNodes[i].attributes.downloadSource;					}					mcPlaylist.initPlaylist(xmlData.firstChild.childNodes[index].childNodes.length, sWidth - imageWidth - 4* imagesBorder - sidewaysGalleryMargin, imageHeight + 2* imagesBorder - 1, songs, durations, songsList, playlistBackgroundColor, playlistBackgroundStrokeColor, playlistOddButtonColor, playlistEvenButtonBeginColor, playlistEvenButtonEndColor, playlistButtonStrokeColor, playlistButtonTextColor, playlistOverButtonTextColor, playlistOverButtonColor, playlistOverButtonStrokeColor, playlistPressedButtonBeginColor, playlistPressedButtonEndColor, playlistPressedButtonTextColor, playlistPressedButtonStrokeColor, buyButtonBeginColor, buyButtonEndColor, buyButtonStrokeColor, buyButtonOverBeginColor, buyButtonOverEndColor, buyButtonOverStrokeColor, buyButtonPressedBeginColor, buyButtonPressedEndColor, buyButtonPressedStrokeColor, buyButtonSignColor, buyArray, downloadArray, songsLocation);										caurina.transitions.Tweener.addTween(mc, {_y:Math.round(sHeight - 2 * playerMargin - 2 * imagesBorder - imageHeight - controlsHeight - 7), time:0.5, transition:"easeOutExpo"});					caurina.transitions.Tweener.addTween(mc.mcBackground, {_color:imagesBorderOverColor, _y : 0, time:0.5, transition:"easeOutExpo"});					caurina.transitions.Tweener.addTween(mc.reflection_mc, {_y:Math.round(((imageHeight+2* imagesBorder)*2) + imagesBorder), _alpha : 0, time:1, transition:"easeOutExpo"});					caurina.transitions.Tweener.addTween(mc.mcImage, {_y:imagesBorder, time:1, transition:"easeOutExpo"});					caurina.transitions.Tweener.addTween(mc.mcMask, {_y:imagesBorder, time:1, transition:"easeOutExpo"});										//set arrows visibility					if(index == 0)					{						mcContainer["mcAlbumImage" + index].mcLeftArrow.useHandCursor = false;						caurina.transitions.Tweener.addTween(mcContainer["mcAlbumImage" + index].mcLeftArrow.mcArrow,{_color:albumArrowOverColor, time:0.5, transition:"easeOutExpo"});					}					if(index == albumsNumber - 1)					{						mcContainer["mcAlbumImage" + index].mcRightArrow.useHandCursor = false;						caurina.transitions.Tweener.addTween(mcContainer["mcAlbumImage" + index].mcRightArrow.mcArrow,{_color:albumArrowOverColor, time:0.5, transition:"easeOutExpo"});					}					lastAlbumClicked = index;				}			}			albumsOrPlaylist = false;			playlistVisible = true;		}	}		/**	 * author name enter frame move	 */	public function titleEnterFrame(mc : MovieClip, dir : Number) : Void	{		if(dir == 0)		{			mc.mcName._x --;						if(mc.mcName._x < mc.mcMask._x + mc.mcMask._width - mc.mcName._width)			{				dir = 1;				mc.mcName._x = mc.mcMask._x + mc.mcMask._width - mc.mcName._width;			}		}		else		{			mc.mcName._x ++;						if(mc.mcName._x > mc.mcMask._x)			{				mc.mcName._x = mc.mcMask._x;				dir = 0;			}		}	}		/**	 * delete the other albums besides the selected one	 */	public function deleteOtherAlbums(nbr : Number) : Void	{		mcContainer["mcAlbumImage" + nbr].mcHitBackground.useHandCursor = false;		if(xmlData.firstChild.childNodes[nbr].attributes.link != undefined && xmlData.firstChild.childNodes[nbr].attributes.link != "")		{			mcContainer["mcAlbumImage" + nbr].mcInfo._visible = true;			caurina.transitions.Tweener.addTween(mcContainer["mcAlbumImage" + nbr].mcInfo, {_alpha:100, time:0.5, transition:"easeOutExpo"});		}		mcContainer["mcAlbumImage" + nbr].mcLeftArrow._visible = true;		caurina.transitions.Tweener.addTween(mcContainer["mcAlbumImage" + nbr].mcLeftArrow, {_alpha:100, time:0.5, transition:"easeOutExpo"});		mcContainer["mcAlbumImage" + nbr].mcRightArrow._visible = true;		caurina.transitions.Tweener.addTween(mcContainer["mcAlbumImage" + nbr].mcRightArrow, {_alpha:100, time:0.5, transition:"easeOutExpo"});				caurina.transitions.Tweener.addTween(mcBack.mcBackBtn.mcBackground,{_alpha:100, time:0.5, transition:"easeOutExpo"});		caurina.transitions.Tweener.addTween(mcBack.mcBackBtn.mcText,{_alpha:100, time:0.5, transition:"easeOutExpo"});		caurina.transitions.Tweener.addTween(mcBack.mcBackBtn.mcShape,{_alpha:100, time:0.5, transition:"easeOutExpo"});		caurina.transitions.Tweener.addTween(mcBack.mcBackBtn.mcAlbumDescription,{_alpha:100, time:0.5, transition:"easeOutExpo"});		caurina.transitions.Tweener.addTween(mcBack.mcBackBtn.mcSongDescription,{_alpha:100, time:0.5, transition:"easeOutExpo"});		caurina.transitions.Tweener.addTween(mcBack.mcBackBtn.mcAuthor,{_alpha:100, time:0.5, transition:"easeOutExpo"});				for(var i = 0; i < albumsNumber; i++)		{			if(i != nbr)			{				caurina.transitions.Tweener.addTween(mcContainer["mcAlbumImage" + i], {_y:sHeight, time:0.5, transition:"easeOutExpo"});			}		}	}		/**	 * load images function	 */	private function loadImage(url:String, target : MovieClip, iwidth:Number, iheight:Number):Void 	{		target.createEmptyMovieClip("bmc", target.getNextHighestDepth());		target.createEmptyMovieClip("mcImageLoader", target.getNextHighestDepth());		target.mcImageLoader.attachMovie("mcLoader", "mcLoader", target.mcImageLoader.getNextHighestDepth());				target.bmc._alpha = 0;				target.mcImageLoader.mcLoader._alpha = 100;		target.mcImageLoader._x = (iwidth - target.mcImageLoader.mcLoader._width)/2;		target.mcImageLoader._y = (iheight - target.mcImageLoader.mcLoader._height)/2;							var listener : Object = new Object();		listener.onLoadInit = Proxy.create(this, loadInit, target);		var loader : MovieClipLoader = new MovieClipLoader();		loader.addListener(listener);				loader.loadClip(url, target.bmc);			}	 	 /**	  * load init event	  */	private function loadInit(mov:MovieClip):Void	{		var ref : String = boolReflect;		var reflectionS : Number = reflectionSize;		var reflectionA : Number = reflectionAlpha;		var distanceR : Number = imagesBorder;		mov._parent._parent.ref = 0;		caurina.transitions.Tweener.addTween(mov,{_alpha:100, time:1, onComplete:function(){if(ref == "true"){this._parent._parent.imageref = new Reflect({mc:this._parent._parent, alpha:30, ratio:255, distance:distanceR, updateTime:0, reflectionAlpha:reflectionA, reflectionDropoff : reflectionS}); mov._parent._parent.reflection_mc._alpha = 100; mov._parent._parent.ref = 1;}}, transition:"easeOutExpo"});		caurina.transitions.Tweener.addTween(mov._parent.mcImageLoader,{_alpha:0,time:1,transition:"easeOutExpo"});			caurina.transitions.Tweener.addTween(mov._parent._parent,{_alpha:100, time:1,transition:"easeOutExpo"});	}				/**	 * roll over on album function	 */	private function onAlbumRollOver(mc : MovieClip) : Void	{		if(mc.ref == 1)		{			if(albumsOrPlaylist == true)			{				var title : String = mc._name;				var indexA : Number = Number(title.substring(title.lastIndexOf("e")+1,title.length));						mcTooltip.mcTooltipShape.mcTooltipText.txt.text = xmlData.firstChild.childNodes[indexA].attributes.author;				if(mcTooltip.mcTooltipShape.mcTooltipText._width > 80)				{					mcTooltip.mcTooltipShape.mcTooltipBackground._width = mcTooltip.mcTooltipShape.mcTooltipText._width + 30;					mcTooltip.mcTooltipShape.mcTooltipText._x = Math.round((mcTooltip.mcTooltipShape.mcTooltipBackground._width - mcTooltip.mcTooltipShape.mcTooltipText._width)/2);					mcTooltip.mcTooltipShape.mcRightRound._x = Math.round(mcTooltip.mcTooltipShape.mcTooltipBackground._width - 5 - mcTooltip.mcTooltipShape.mcRightRound._width);				}				else				{					mcTooltip.mcTooltipShape.mcTooltipBackground._width = 110;					mcTooltip.mcTooltipShape.mcTooltipText._x = Math.round((mcTooltip.mcTooltipShape.mcTooltipBackground._width - mcTooltip.mcTooltipShape.mcTooltipText._width)/2);					mcTooltip.mcTooltipShape.mcRightRound._x = Math.round(mcTooltip.mcTooltipShape.mcTooltipBackground._width - 5 - mcTooltip.mcTooltipShape.mcRightRound._width);				}												if(this._xmouse < playerMargin + distanceBetweenImages + mcTooltip.mcTooltipShape.mcTooltipBackground._width)				{					mcTooltip.mcTooltipShape.mcTooltipSign._xscale = 100;					mcTooltip.mcTooltipShape.mcTooltipSign._x = 10;					xTooltip = 10;				}				else				{					if(this._xmouse > sWidth - playerMargin - distanceBetweenImages - mcTooltip.mcTooltipShape.mcTooltipBackground._width)					{						mcTooltip.mcTooltipShape.mcTooltipSign._xscale = -100;						mcTooltip.mcTooltipShape.mcTooltipSign._x = mcTooltip.mcTooltipShape.mcTooltipBackground._width - 10;						xTooltip = mcTooltip.mcTooltipShape.mcTooltipBackground._width - 10;					}					else					{						mcTooltip.mcTooltipShape.mcTooltipSign._xscale = 100;						mcTooltip.mcTooltipShape.mcTooltipSign._x = 80;						xTooltip = 80;					}				}								tooltipMove();				caurina.transitions.Tweener.addTween(mcTooltip,{_alpha:100, time:0.5, transition:"easeOutExpo"});								this.onMouseMove = Proxy.create(this, tooltipMove);								if(stopMoving == "true")				{					mcScrollbar.albumOverStopMove();				}								//mc.mcBackground._height = Math.round(imageHeight + imagesBorder * 2);				caurina.transitions.Tweener.addTween(mc.mcBackground, {_color:imagesBorderOverColor, _y : Math.round(-2 * imagesBorder), time:0.5, transition:"easeOutExpo"});				caurina.transitions.Tweener.addTween(mc.mcHitBackground, {_y : Math.round(-2 * imagesBorder), time:0.5, transition:"easeOutExpo"});				caurina.transitions.Tweener.addTween(mc.mcHitBackground, {_height:Math.round(imageHeight + imagesBorder * 4), time:0.5, transition:"easeOutExpo"});				caurina.transitions.Tweener.addTween(mc.x, {_y:Math.round(((imageHeight+2* imagesBorder)*2) + 2* imagesBorder), time:1, transition:"easeOutElastic"});				caurina.transitions.Tweener.addTween(mc.mcImage, {_y:Math.round(-imagesBorder), time:1, transition:"easeOutElastic"});				caurina.transitions.Tweener.addTween(mc.mcMask, {_y:Math.round(-imagesBorder), time:1, transition:"easeOutElastic"});			}		}	}		/**	 * start moving the tooltip	 */	private function tooltipMove() : Void	{		caurina.transitions.Tweener.addTween(mcTooltip,{_alpha:100, time:0.5, transition:"easeOutExpo"});		if(this._ymouse > 50)		{			mcTooltip._y = Math.round(this._ymouse - 50);		}		else		{			mcTooltip._y = playerMargin;		}				mcTooltip._x = Math.round(this._xmouse - xTooltip);		if(mcTooltip._x > playerMargin)		{			if(mcTooltip._x > sWidth - 2* playerMargin - mcTooltip._width)			{				mcTooltip._x = sWidth - playerMargin - mcTooltip._width;			}			else			{				mcTooltip._x = Math.round(this._xmouse - xTooltip);			}		}		else		{			mcTooltip._x = playerMargin;		}	}		/**	 * rollout on album function	 */	private function onAlbumRollOut(mc : MovieClip) : Void	{		if(stopMoving == "true")		{			mcScrollbar.albumOutBeginMove();		}		delete this.onMouseMove;		caurina.transitions.Tweener.addTween(mcTooltip,{_alpha:0, time:0.5, onComplete:function(){mcTooltip.mcTooltipShape.mcTooltipBackground._width = 110; mcTooltip.mcTooltipShape.mcTooltipText.txt.text = "";}, transition:"easeOutExpo"});		if(playlistVisible != true)		{			caurina.transitions.Tweener.addTween(mc.mcBackground, {_color:imagesBorderColor, _y : 0, time:0.5, transition:"easeOutExpo"});		}		caurina.transitions.Tweener.addTween(mc.mcHitBackground, {_y : 0, time:0.5, transition:"easeOutExpo"});		caurina.transitions.Tweener.addTween(mc.mcHitBackground, {_height:Math.round(imageHeight + imagesBorder * 2), time:0.5, transition:"easeOutExpo"});		//caurina.transitions.Tweener.addTween(mc.reflection_mc, {_y:Math.round(((imageHeight+2* imagesBorder)*2) + imagesBorder), time:1, transition:"easeOutElastic"});		caurina.transitions.Tweener.addTween(mc.mcImage, {_y:imagesBorder, time:1, transition:"easeOutElastic"});		caurina.transitions.Tweener.addTween(mc.mcMask, {_y:imagesBorder, time:1, transition:"easeOutElastic"});	}		/**	 * resize images function	 */	public function resizeImage(mc : MovieClip, pWidth : Number, pHeight : Number) : Void     {    	var proc1 : Number = pWidth / mc._width;        var proc2 : Number = pHeight / mc._height;                    if (proc1 >= proc2)         {        	mc._height = pHeight;            mc._width = proc2 * mc._width;        }        else         {            mc._width = pWidth;            mc._height = proc1 * mc._height;        }        // reposition        mc._x = Math.floor((pWidth - mc._width) / 2);        mc._y = Math.floor((pHeight - mc._height) / 2);    }}