/** * * www.FLABELL.com * New Flash Components Every Week! * * * Flash Mp3 Player v1.0 (03/23/2009) <http://www.flabell.com/> *  * Copyright (c) 2009 Vuzum Media <http://www.vuzum.com/> * For information about licencing, please visit <http://www.flabell.com/terms> * * * email: support@flabell.com * */ import com.vuzum.utils.*;import com.vuzum.Main;import caurina.*;import flash.filters.*;class com.vuzum.Controls extends MovieClip {	//internal members	public var mcContent : MovieClip;	public var soundStatus : Boolean;	public var soundPosition : Number;	public var timeInterval : Number;		private var timep : Number;	private var displayHours : Boolean;	private var audioInterval : Number;	private var rememberValue : Number;	private var inactiveColor : Number;	public var soundHearing : Boolean;	private var maskHeight : Number;	private var pressedSlider : Boolean = false;	public var barLength : Number;	public var soundPublicVolume : Number;	private var embedOver : Number;	private var embedColor : Number;	public var soundActivePlaying : Boolean = true;	public var allSoundsVolume : Number;	private var glowFilter : GlowFilter;	public var embedCanPress : Boolean = true;	private var glowEmbedFilter : GlowFilter;	private var shuffleBtnColor : Number;	private var shuffleBtnOverColor : Number;	private var shufflePressed : Boolean = false;	public var embedButtonVisibility : Boolean = false;	private var progressPressed : Boolean = true;	private var tooltipTimeout : Number;		//class constructor	public function Controls()	{		mcContent = this.createEmptyMovieClip("mcContent", this.getNextHighestDepth());		soundStatus = true; // sound is plaiyng		displayHours = false;		rememberValue = 0;				caurina.transitions.properties.ColorShortcuts.init();		caurina.transitions.properties.SoundShortcuts.init();			}		/**	 * initialize controls, for acces from albums class	 */	public function initControls(width : Number, backgroundHeight : Number, backgroundBeginColor : Number, backgroundEndColor : Number, backgroundStrokeColor : Number, progressTimeBeginColor : Number, progressTimeEndColor : Number, barHeight : Number, backgroundBarBeginColor : Number, backgroundBarMiddleColor : Number, backgroundBarEndColor : Number, backgroundBarStrokeColor : Number, loadingBarColor : Number, timeTextColor : Number, buttonBackgroundColor : Number, buttonBackgroundOverColor : Number, buttonBackgroundStrokeColor : Number, buttonBeginColor : Number, buttonMiddleColor : Number, buttonEndColor : Number, activeButtonBeginColor : Number, activeButtonMiddleColor : Number, activeButtonEndColor : Number, volumeShapeBeginColor : Number, volumeShapeEndColor : Number, volumeShapeInactiveColor : Number, volumeSliderStrokeBeginColor : Number, volumeSliderStrokeEndColor : Number, volumeSliderMainBackColor : Number, volumeSliderMainBackStrokeColor : Number, volumeSliderBeginColor : Number, volumeSliderEndColor : Number, mainSliderColor : Number, embedButtonStrokeColor : Number, embedButtonBeginColor : Number, embedButtonMiddleColor : Number, embedButtonEndColor : Number, embedButtonSymbolColor : Number, embedButtonSymbolOverColor : Number, buttonsStrokeColor : Number, shuffleColor : Number, shuffleOverColor : Number, embedVisibility : String, volumeButtonNormalBeginColor : Number, volumeButtonNormalEndColor : Number)	{				mcContent.attachMovie("mcControlsBtns", "mcControlsBtns", mcContent.getNextHighestDepth());		mcContent.mcControlsBtns.mcPlay._visible = false;		inactiveColor = volumeShapeInactiveColor;		if(embedVisibility == "true")		{			barLength = width - 250;		}		else		{			barLength = width - 250 + mcContent.mcControlsBtns.mcEmbed.mcEmbedSymbol._width + 14;		}		embedOver = embedButtonSymbolOverColor;		embedColor = embedButtonSymbolColor;				shuffleBtnColor = shuffleColor;		shuffleBtnOverColor = shuffleOverColor;				glowFilter = new GlowFilter(buttonsStrokeColor, 1, 1.1, 1.1, 20, 15, false, false);		var filterArray : Array = new Array();		filterArray.push(glowFilter);				var colArrayPauseButton:Array = [activeButtonBeginColor, activeButtonMiddleColor, activeButtonEndColor, activeButtonEndColor];				//************ mc controls background		var boxProperties:Object = {x:0, y:0, w:2, h:2}; // x and y defining x and y positions, w and h defining width and height of your box		var colArrayBack:Array = [backgroundBeginColor, backgroundEndColor]; // your colors		var alpArray:Array = [100, 100]; // your alphas		var sprArray:Array = [0, 255]; // gradient spread		var matrixDataBack:Object = {matrixType:"box", x:0, y:0, w:2, h:2, r:90/180*Math.PI};//imageHeight + imagesBorder + topMargin				//set background of the controls		mcContent.mcControlsBtns.mcControlsBackground.lineStyle(0.25, backgroundStrokeColor);				with (mcContent.mcControlsBtns.mcControlsBackground) 		{ // yourMovieClipInstance is the instance of movie clip you wish to draw to			moveTo(boxProperties.x, boxProperties.y);			beginGradientFill("linear", colArrayBack, alpArray, sprArray, matrixDataBack);			lineTo(boxProperties.x + boxProperties.w, boxProperties.y);			lineTo(boxProperties.x + boxProperties.w, boxProperties.y + boxProperties.h);			lineTo(boxProperties.x, boxProperties.y + boxProperties.h);			lineTo(boxProperties.x, boxProperties.y);			endFill();		}		mcContent.mcControlsBtns.mcControlsBackground._width = width;		mcContent.mcControlsBtns.mcControlsBackground._height = backgroundHeight;		//***********************				//***************mc time progress		var colArrayProgress:Array = [progressTimeBeginColor, progressTimeEndColor]; // your colors		var matrixDataProgress:Object = {matrixType:"box", x:0, y:0, w:2, h:2, r:0};//imageHeight + imagesBorder + topMargin				with (mcContent.mcControlsBtns.mcProgressTimeSound) 		{ // yourMovieClipInstance is the instance of movie clip you wish to draw to			moveTo(boxProperties.x, boxProperties.y);			beginGradientFill("linear", colArrayProgress, alpArray, sprArray, matrixDataProgress);			lineTo(boxProperties.x + boxProperties.w, boxProperties.y);			lineTo(boxProperties.x + boxProperties.w, boxProperties.y + boxProperties.h);			lineTo(boxProperties.x, boxProperties.y + boxProperties.h);			lineTo(boxProperties.x, boxProperties.y);			endFill();		}		mcContent.mcControlsBtns.mcProgressTimeSound._width = 1;		mcContent.mcControlsBtns.mcProgressTimeSound._height = barHeight;		//***********************				//***************mc time background bar 		var colArrayProgressBack:Array = [backgroundBarBeginColor, backgroundBarMiddleColor, backgroundBarEndColor]; // your colors		var alpArrayProgressBack:Array = [100, 100, 100]; // your alphas		var sprArrayBack:Array = [0, 100, 255]; // gradient spread		mcContent.mcControlsBtns.mcTimeSound.lineStyle(0.25, backgroundBarStrokeColor);				with (mcContent.mcControlsBtns.mcTimeSound) 		{ // yourMovieClipInstance is the instance of movie clip you wish to draw to			moveTo(boxProperties.x, boxProperties.y);			beginGradientFill("linear", colArrayProgressBack, alpArrayProgressBack, sprArrayBack, matrixDataBack);			lineTo(boxProperties.x + boxProperties.w, boxProperties.y);			lineTo(boxProperties.x + boxProperties.w, boxProperties.y + boxProperties.h);			lineTo(boxProperties.x, boxProperties.y + boxProperties.h);			lineTo(boxProperties.x, boxProperties.y);			endFill();		}		mcContent.mcControlsBtns.mcTimeSound._width = barLength;		mcContent.mcControlsBtns.mcTimeSound._height = barHeight;		//***********************				//***************mc time background bar 		with (mcContent.mcControlsBtns.mcProgressLoadingSound) 		{ // yourMovieClipInstance is the instance of movie clip you wish to draw to			moveTo(0, 0);			beginFill(loadingBarColor);			lineTo(width - 250, 0);			lineTo(width - 250, barHeight);			lineTo(0, barHeight);			lineTo(0, 0);			endFill();		}		mcContent.mcControlsBtns.mcProgressLoadingSound._width = 1;		mcContent.mcControlsBtns.mcProgressLoadingSound._height = barHeight;		//***********************				//***************mc previous background bar 		mcContent.mcControlsBtns.mcPreviousBackground.lineStyle(0.25, buttonBackgroundStrokeColor);				with (mcContent.mcControlsBtns.mcPreviousBackground) 		{ // yourMovieClipInstance is the instance of movie clip you wish to draw to			moveTo(boxProperties.x, boxProperties.y);			beginFill(buttonBackgroundColor);			lineTo(boxProperties.x + boxProperties.w, boxProperties.y);			lineTo(boxProperties.x + boxProperties.w, boxProperties.y + boxProperties.h);			lineTo(boxProperties.x, boxProperties.y + boxProperties.h);			lineTo(boxProperties.x, boxProperties.y);			endFill();		}		mcContent.mcControlsBtns.mcPreviousBackground._width = backgroundHeight - 10;		mcContent.mcControlsBtns.mcPreviousBackground._height = backgroundHeight - 10;		mcContent.mcControlsBtns.mcPreviousBackground._x = 5;		mcContent.mcControlsBtns.mcPreviousBackground._y = 5;		//***********************				//***************mc previous background bar 		mcContent.mcControlsBtns.mcPlayBackground.lineStyle(0.25, buttonBackgroundStrokeColor);				with (mcContent.mcControlsBtns.mcPlayBackground) 		{ // yourMovieClipInstance is the instance of movie clip you wish to draw to			moveTo(boxProperties.x, boxProperties.y);			beginFill(buttonBackgroundColor);			lineTo(boxProperties.x + boxProperties.w, boxProperties.y);			lineTo(boxProperties.x + boxProperties.w, boxProperties.y + boxProperties.h);			lineTo(boxProperties.x, boxProperties.y + boxProperties.h);			lineTo(boxProperties.x, boxProperties.y);			endFill();		}		mcContent.mcControlsBtns.mcPlayBackground._width = backgroundHeight - 10;		mcContent.mcControlsBtns.mcPlayBackground._height = backgroundHeight - 10;		mcContent.mcControlsBtns.mcPlayBackground._x = mcContent.mcControlsBtns.mcPreviousBackground._x + mcContent.mcControlsBtns.mcPreviousBackground._width + 5;		mcContent.mcControlsBtns.mcPlayBackground._y = 5;		//***********************						//***************mc previous background bar 		mcContent.mcControlsBtns.mcNextBackground.lineStyle(0.25, buttonBackgroundStrokeColor);				with (mcContent.mcControlsBtns.mcNextBackground) 		{ // yourMovieClipInstance is the instance of movie clip you wish to draw to			moveTo(boxProperties.x, boxProperties.y);			beginFill(buttonBackgroundColor);			lineTo(boxProperties.x + boxProperties.w, boxProperties.y);			lineTo(boxProperties.x + boxProperties.w, boxProperties.y + boxProperties.h);			lineTo(boxProperties.x, boxProperties.y + boxProperties.h);			lineTo(boxProperties.x, boxProperties.y);			endFill();		}		mcContent.mcControlsBtns.mcNextBackground._width = backgroundHeight - 10;		mcContent.mcControlsBtns.mcNextBackground._height = backgroundHeight - 10;		mcContent.mcControlsBtns.mcNextBackground._x = mcContent.mcControlsBtns.mcPlayBackground._x + mcContent.mcControlsBtns.mcPlayBackground._width + 5;		mcContent.mcControlsBtns.mcNextBackground._y = 5;		//***********************				mcContent.mcControlsBtns.mcTimeSound._x = mcContent.mcControlsBtns.mcNextBackground._x + mcContent.mcControlsBtns.mcNextBackground._width + 10;		mcContent.mcControlsBtns.mcProgressLoadingSound._x = mcContent.mcControlsBtns.mcTimeSound._x;		mcContent.mcControlsBtns.mcProgressTimeSound._x = mcContent.mcControlsBtns.mcTimeSound._x;		mcContent.mcControlsBtns.mcTimeSound._y = Math.round((backgroundHeight - mcContent.mcControlsBtns.mcTimeSound._height)/2);		mcContent.mcControlsBtns.mcProgressLoadingSound._y = mcContent.mcControlsBtns.mcTimeSound._y;		mcContent.mcControlsBtns.mcProgressTimeSound._y = mcContent.mcControlsBtns.mcTimeSound._y;				//************ mc previous button		var boxPropertiesButton:Object = {x:0, y:0, w:Math.round((backgroundHeight - 25)/3), h:backgroundHeight - 22}; // x and y defining x and y positions, w and h defining width and height of your box		var colArrayButton:Array = [buttonBeginColor, buttonMiddleColor, buttonEndColor, buttonEndColor]; // your colors		var alpArrayButton:Array = [100, 100, 100, 100]; // your alphas		var sprArrayButton:Array = [0, 122, 123, 255]; // gradient spread		var matrixDataButton:Object = {matrixType:"box", x:0, y:0, w:Math.round((backgroundHeight - 25)/3), h:backgroundHeight - 22, r:90/180*Math.PI};//imageHeight + imagesBorder + topMargin				//mcContent.mcControlsBtns.mcBackward.lineStyle(1, buttonsStrokeColor, 1, true, "none", "round", "round", 2);		mcContent.mcControlsBtns.mcBackward.createEmptyMovieClip("mcNormal", mcContent.mcControlsBtns.mcBackward.getNextHighestDepth());		mcContent.mcControlsBtns.mcBackward.createEmptyMovieClip("mcOver", mcContent.mcControlsBtns.mcBackward.getNextHighestDepth());		mcContent.mcControlsBtns.mcBackward.mcNormal.filters = filterArray;		mcContent.mcControlsBtns.mcBackward.mcOver.filters = filterArray;		with (mcContent.mcControlsBtns.mcBackward.mcNormal) 		{ // yourMovieClipInstance is the instance of movie clip you wish to draw to			moveTo(boxPropertiesButton.x, boxPropertiesButton.y);			beginGradientFill("linear", colArrayButton, alpArrayButton, sprArrayButton, matrixDataButton);			lineTo(boxPropertiesButton.x + boxPropertiesButton.w, boxPropertiesButton.y);			lineTo(boxPropertiesButton.x + boxPropertiesButton.w, boxPropertiesButton.y + boxPropertiesButton.h);			lineTo(boxPropertiesButton.x, boxPropertiesButton.y + boxPropertiesButton.h);			lineTo(boxPropertiesButton.x, boxPropertiesButton.y);						moveTo(boxPropertiesButton.x + boxPropertiesButton.w + 2, boxPropertiesButton.y + boxPropertiesButton.h/2);			lineTo(boxPropertiesButton.x + 3 *boxPropertiesButton.w + 2, boxPropertiesButton.y);			lineTo(boxPropertiesButton.x + 3 *boxPropertiesButton.w + 2, boxPropertiesButton.y + boxPropertiesButton.h);			lineTo(boxPropertiesButton.x + boxPropertiesButton.w + 2, boxPropertiesButton.y + boxPropertiesButton.h/2);			endFill();		}				with (mcContent.mcControlsBtns.mcBackward.mcOver) 		{ // yourMovieClipInstance is the instance of movie clip you wish to draw to			moveTo(boxPropertiesButton.x, boxPropertiesButton.y);			beginGradientFill("linear", colArrayPauseButton, alpArrayButton, sprArrayButton, matrixDataButton);			lineTo(boxPropertiesButton.x + boxPropertiesButton.w, boxPropertiesButton.y);			lineTo(boxPropertiesButton.x + boxPropertiesButton.w, boxPropertiesButton.y + boxPropertiesButton.h);			lineTo(boxPropertiesButton.x, boxPropertiesButton.y + boxPropertiesButton.h);			lineTo(boxPropertiesButton.x, boxPropertiesButton.y);						moveTo(boxPropertiesButton.x + boxPropertiesButton.w + 2, boxPropertiesButton.y + boxPropertiesButton.h/2);			lineTo(boxPropertiesButton.x + 3 *boxPropertiesButton.w + 2, boxPropertiesButton.y);			lineTo(boxPropertiesButton.x + 3 *boxPropertiesButton.w + 2, boxPropertiesButton.y + boxPropertiesButton.h);			lineTo(boxPropertiesButton.x + boxPropertiesButton.w + 2, boxPropertiesButton.y + boxPropertiesButton.h/2);			endFill();		}		mcContent.mcControlsBtns.mcBackward._x = Math.round((mcContent.mcControlsBtns.mcPreviousBackground._x + mcContent.mcControlsBtns.mcPreviousBackground._width - mcContent.mcControlsBtns.mcBackward._width)/2 + 3);		mcContent.mcControlsBtns.mcBackward._y = Math.round((mcContent.mcControlsBtns.mcPreviousBackground._y + mcContent.mcControlsBtns.mcPreviousBackground._height - mcContent.mcControlsBtns.mcBackward._height)/2 + 2);		//***********************				//************ mc forward button		//mcContent.mcControlsBtns.mcForward.lineStyle(0.25, buttonsStrokeColor);		mcContent.mcControlsBtns.mcForward.createEmptyMovieClip("mcNormal", mcContent.mcControlsBtns.mcForward.getNextHighestDepth());		mcContent.mcControlsBtns.mcForward.createEmptyMovieClip("mcOver", mcContent.mcControlsBtns.mcForward.getNextHighestDepth());		mcContent.mcControlsBtns.mcForward.mcNormal.filters = filterArray;		mcContent.mcControlsBtns.mcForward.mcOver.filters = filterArray;		with (mcContent.mcControlsBtns.mcForward.mcNormal) 		{ // yourMovieClipInstance is the instance of movie clip you wish to draw to			moveTo(boxPropertiesButton.x, boxPropertiesButton.y);			beginGradientFill("linear", colArrayButton, alpArrayButton, sprArrayButton, matrixDataButton);			lineTo(boxPropertiesButton.x + 2 * boxPropertiesButton.w, boxPropertiesButton.y + boxPropertiesButton.h/2);			lineTo(boxPropertiesButton.x, boxPropertiesButton.y + boxPropertiesButton.h);			lineTo(boxPropertiesButton.x, boxPropertiesButton.y);						moveTo(boxPropertiesButton.x + boxPropertiesButton.w + 5, boxPropertiesButton.y);			lineTo(boxPropertiesButton.x + 2 *boxPropertiesButton.w + 5, boxPropertiesButton.y);			lineTo(boxPropertiesButton.x + 2 *boxPropertiesButton.w + 5, boxPropertiesButton.y + boxPropertiesButton.h);			lineTo(boxPropertiesButton.x + boxPropertiesButton.w + 5, boxPropertiesButton.y + boxPropertiesButton.h);			lineTo(boxPropertiesButton.x + boxPropertiesButton.w + 5, boxPropertiesButton.y);			endFill();		}		with (mcContent.mcControlsBtns.mcForward.mcOver) 		{ // yourMovieClipInstance is the instance of movie clip you wish to draw to			moveTo(boxPropertiesButton.x, boxPropertiesButton.y);			beginGradientFill("linear", colArrayPauseButton, alpArrayButton, sprArrayButton, matrixDataButton);			lineTo(boxPropertiesButton.x + 2 * boxPropertiesButton.w, boxPropertiesButton.y + boxPropertiesButton.h/2);			lineTo(boxPropertiesButton.x, boxPropertiesButton.y + boxPropertiesButton.h);			lineTo(boxPropertiesButton.x, boxPropertiesButton.y);						moveTo(boxPropertiesButton.x + boxPropertiesButton.w + 5, boxPropertiesButton.y);			lineTo(boxPropertiesButton.x + 2 *boxPropertiesButton.w + 5, boxPropertiesButton.y);			lineTo(boxPropertiesButton.x + 2 *boxPropertiesButton.w + 5, boxPropertiesButton.y + boxPropertiesButton.h);			lineTo(boxPropertiesButton.x + boxPropertiesButton.w + 5, boxPropertiesButton.y + boxPropertiesButton.h);			lineTo(boxPropertiesButton.x + boxPropertiesButton.w + 5, boxPropertiesButton.y);			endFill();		}		mcContent.mcControlsBtns.mcForward._x = Math.round((mcContent.mcControlsBtns.mcNextBackground._x + mcContent.mcControlsBtns.mcNextBackground._width - mcContent.mcControlsBtns.mcForward._width)/2 + 33);		mcContent.mcControlsBtns.mcForward._y = Math.round((mcContent.mcControlsBtns.mcNextBackground._y + mcContent.mcControlsBtns.mcNextBackground._height - mcContent.mcControlsBtns.mcForward._height)/2 + 2);		//***********************				//************ mc play button		//mcContent.mcControlsBtns.mcPlay.lineStyle(0.25, buttonsStrokeColor);		mcContent.mcControlsBtns.mcPlay.createEmptyMovieClip("mcNormal", mcContent.mcControlsBtns.mcPlay.getNextHighestDepth());		mcContent.mcControlsBtns.mcPlay.createEmptyMovieClip("mcOver", mcContent.mcControlsBtns.mcPlay.getNextHighestDepth());		mcContent.mcControlsBtns.mcPlay.mcNormal.filters = filterArray;		mcContent.mcControlsBtns.mcPlay.mcOver.filters = filterArray;		with (mcContent.mcControlsBtns.mcPlay.mcNormal) 		{ // yourMovieClipInstance is the instance of movie clip you wish to draw to			moveTo(boxPropertiesButton.x, boxPropertiesButton.y);			beginGradientFill("linear", colArrayButton, alpArrayButton, sprArrayButton, matrixDataButton);			lineTo(boxPropertiesButton.x + 2 * boxPropertiesButton.w, boxPropertiesButton.y + boxPropertiesButton.h/2);			lineTo(boxPropertiesButton.x, boxPropertiesButton.y + boxPropertiesButton.h);			lineTo(boxPropertiesButton.x, boxPropertiesButton.y);			endFill();		}				with (mcContent.mcControlsBtns.mcPlay.mcOver) 		{ // yourMovieClipInstance is the instance of movie clip you wish to draw to			moveTo(boxPropertiesButton.x, boxPropertiesButton.y);			beginGradientFill("linear", colArrayPauseButton, alpArrayButton, sprArrayButton, matrixDataButton);			lineTo(boxPropertiesButton.x + 2 * boxPropertiesButton.w, boxPropertiesButton.y + boxPropertiesButton.h/2);			lineTo(boxPropertiesButton.x, boxPropertiesButton.y + boxPropertiesButton.h);			lineTo(boxPropertiesButton.x, boxPropertiesButton.y);			endFill();		}		mcContent.mcControlsBtns.mcPlay._x = Math.round((mcContent.mcControlsBtns.mcNextBackground._x + mcContent.mcControlsBtns.mcNextBackground._width - mcContent.mcControlsBtns.mcPlay._width)/2 + 4);		mcContent.mcControlsBtns.mcPlay._y = Math.round((mcContent.mcControlsBtns.mcNextBackground._y + mcContent.mcControlsBtns.mcNextBackground._height - mcContent.mcControlsBtns.mcPlay._height)/2 + 2);		//***********************				//************ mc pause button		//mcContent.mcControlsBtns.mcPause.lineStyle(0.25, buttonsStrokeColor);		mcContent.mcControlsBtns.mcPause.createEmptyMovieClip("mcNormal", mcContent.mcControlsBtns.mcPause.getNextHighestDepth());		mcContent.mcControlsBtns.mcPause.createEmptyMovieClip("mcOver", mcContent.mcControlsBtns.mcPause.getNextHighestDepth());		mcContent.mcControlsBtns.mcPause.mcNormal.filters = filterArray;		mcContent.mcControlsBtns.mcPause.mcOver.filters = filterArray;		with (mcContent.mcControlsBtns.mcPause.mcNormal) 		{ // yourMovieClipInstance is the instance of movie clip you wish to draw to			moveTo(boxPropertiesButton.x, boxPropertiesButton.y);			beginGradientFill("linear", colArrayButton, alpArrayButton, sprArrayButton, matrixDataButton);			lineTo(boxPropertiesButton.x + boxPropertiesButton.w, boxPropertiesButton.y);			lineTo(boxPropertiesButton.x + boxPropertiesButton.w, boxPropertiesButton.y + boxPropertiesButton.h);			lineTo(boxPropertiesButton.x, boxPropertiesButton.y + boxPropertiesButton.h);			lineTo(boxPropertiesButton.x, boxPropertiesButton.y);						moveTo(boxPropertiesButton.x + boxPropertiesButton.w + 2, boxPropertiesButton.y);			lineTo(boxPropertiesButton.x + 2 *boxPropertiesButton.w + 2, boxPropertiesButton.y);			lineTo(boxPropertiesButton.x + 2 *boxPropertiesButton.w + 2, boxPropertiesButton.y + boxPropertiesButton.h);			lineTo(boxPropertiesButton.x + boxPropertiesButton.w + 2, boxPropertiesButton.y + boxPropertiesButton.h);			lineTo(boxPropertiesButton.x + + boxPropertiesButton.w + 2, boxPropertiesButton.y);			endFill();		}		with (mcContent.mcControlsBtns.mcPause.mcOver) 		{ // yourMovieClipInstance is the instance of movie clip you wish to draw to			moveTo(boxPropertiesButton.x, boxPropertiesButton.y);			beginGradientFill("linear", colArrayPauseButton, alpArrayButton, sprArrayButton, matrixDataButton);			lineTo(boxPropertiesButton.x + boxPropertiesButton.w, boxPropertiesButton.y);			lineTo(boxPropertiesButton.x + boxPropertiesButton.w, boxPropertiesButton.y + boxPropertiesButton.h);			lineTo(boxPropertiesButton.x, boxPropertiesButton.y + boxPropertiesButton.h);			lineTo(boxPropertiesButton.x, boxPropertiesButton.y);						moveTo(boxPropertiesButton.x + boxPropertiesButton.w + 2, boxPropertiesButton.y);			lineTo(boxPropertiesButton.x + 2 *boxPropertiesButton.w + 2, boxPropertiesButton.y);			lineTo(boxPropertiesButton.x + 2 *boxPropertiesButton.w + 2, boxPropertiesButton.y + boxPropertiesButton.h);			lineTo(boxPropertiesButton.x + boxPropertiesButton.w + 2, boxPropertiesButton.y + boxPropertiesButton.h);			lineTo(boxPropertiesButton.x + + boxPropertiesButton.w + 2, boxPropertiesButton.y);			endFill();		}		mcContent.mcControlsBtns.mcPause._x = Math.round((mcContent.mcControlsBtns.mcNextBackground._x + mcContent.mcControlsBtns.mcNextBackground._width - mcContent.mcControlsBtns.mcPause._width)/2 + 3);		mcContent.mcControlsBtns.mcPause._y = Math.round((mcContent.mcControlsBtns.mcNextBackground._y + mcContent.mcControlsBtns.mcNextBackground._height - mcContent.mcControlsBtns.mcPause._height)/2 + 2);		//***********************				mcContent.mcControlsBtns.mcBackward.mcOver._alpha = 0;		mcContent.mcControlsBtns.mcForward.mcOver._alpha = 0;		mcContent.mcControlsBtns.mcPlay.mcOver._alpha = 0;		mcContent.mcControlsBtns.mcPause.mcOver._alpha = 0;		mcContent.mcControlsBtns.mcPause.cacheAsBitmap = true;		mcContent.mcControlsBtns.mcPlay.cacheAsBitmap = true;		mcContent.mcControlsBtns.mcForward.cacheAsBitmap = true;		mcContent.mcControlsBtns.mcBackward.cacheAsBitmap = true;				//************** create volume shape		var boxPropertiesShape:Object = {x:0, y:0, w:barHeight/2, h:barHeight}; // x and y defining x and y positions, w and h defining width and height of your box		var colArrayShapeOver:Array = [volumeShapeBeginColor, volumeShapeEndColor]; // your colors		var colArrayShapeNormal:Array = [volumeButtonNormalBeginColor, volumeButtonNormalEndColor];		var alpArrayShape:Array = [100, 100]; // your alphas		var sprArrayShape:Array = [0, 255]; // gradient spread		var matrixDataShape:Object = {matrixType:"box", x:0, y:0, w:barHeight/2, h:barHeight, r:90/180*Math.PI};//imageHeight + imagesBorder + topMargin				with(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcVolumeShape.mcNormal)		{			moveTo(boxPropertiesShape.x, boxPropertiesShape.y);						beginFill(0x000000, 0);			lineTo(boxPropertiesShape.x + 2* boxPropertiesShape.w, boxPropertiesShape.y);			lineTo(boxPropertiesShape.x + 2* boxPropertiesShape.w, boxPropertiesShape.y + 2 *boxPropertiesShape.h);			lineTo(boxPropertiesShape.x, boxPropertiesShape.y + 2* boxPropertiesShape.h);			lineTo(boxPropertiesShape.x, boxPropertiesShape.y);						beginGradientFill("linear", colArrayShapeNormal, alpArrayShape, sprArrayShape, matrixDataShape);			lineTo(boxPropertiesShape.x + boxPropertiesShape.w, boxPropertiesShape.y);			lineTo(boxPropertiesShape.x + boxPropertiesShape.w, boxPropertiesShape.y + boxPropertiesShape.h);			lineTo(boxPropertiesShape.x, boxPropertiesShape.y + boxPropertiesShape.h);			lineTo(boxPropertiesShape.x, boxPropertiesShape.y);						moveTo(boxPropertiesShape.x + boxPropertiesShape.w + 1, boxPropertiesShape.y);			lineTo(boxPropertiesShape.x + boxPropertiesShape.w + 6, boxPropertiesShape.y - 2);			lineTo(boxPropertiesShape.x + boxPropertiesShape.w + 6, boxPropertiesShape.y + boxPropertiesShape.h + 2);			lineTo(boxPropertiesShape.x + boxPropertiesShape.w + 1, boxPropertiesShape.y + boxPropertiesShape.h);			lineTo(boxPropertiesShape.x + boxPropertiesShape.w + 1, boxPropertiesShape.y);		}				with(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcVolumeShape.mcOver)		{			moveTo(boxPropertiesShape.x, boxPropertiesShape.y);						beginFill(0x000000, 0);			lineTo(boxPropertiesShape.x + 2* boxPropertiesShape.w, boxPropertiesShape.y);			lineTo(boxPropertiesShape.x + 2* boxPropertiesShape.w, boxPropertiesShape.y + 2 *boxPropertiesShape.h);			lineTo(boxPropertiesShape.x, boxPropertiesShape.y + 2* boxPropertiesShape.h);			lineTo(boxPropertiesShape.x, boxPropertiesShape.y);						beginGradientFill("linear", colArrayShapeOver, alpArrayShape, sprArrayShape, matrixDataShape);			lineTo(boxPropertiesShape.x + boxPropertiesShape.w, boxPropertiesShape.y);			lineTo(boxPropertiesShape.x + boxPropertiesShape.w, boxPropertiesShape.y + boxPropertiesShape.h);			lineTo(boxPropertiesShape.x, boxPropertiesShape.y + boxPropertiesShape.h);			lineTo(boxPropertiesShape.x, boxPropertiesShape.y);						moveTo(boxPropertiesShape.x + boxPropertiesShape.w + 1, boxPropertiesShape.y);			lineTo(boxPropertiesShape.x + boxPropertiesShape.w + 6, boxPropertiesShape.y - 2);			lineTo(boxPropertiesShape.x + boxPropertiesShape.w + 6, boxPropertiesShape.y + boxPropertiesShape.h + 2);			lineTo(boxPropertiesShape.x + boxPropertiesShape.w + 1, boxPropertiesShape.y + boxPropertiesShape.h);			lineTo(boxPropertiesShape.x + boxPropertiesShape.w + 1, boxPropertiesShape.y);		}		mcContent.mcControlsBtns.mcSoundVolumeSlider.mcVolumeShape.mcOver._alpha = 0;				mcContent.mcControlsBtns.mcSoundVolumeSlider._y = mcContent.mcControlsBtns.mcTimeSound._y;				mcContent.mcControlsBtns.mcTimeControl._x = Math.round(mcContent.mcControlsBtns.mcTimeSound._x + mcContent.mcControlsBtns.mcTimeSound._width) + 8;		//***************				//*********slider shapes		var boxPropertiesSlider:Object = {x:0, y:0, w:2, h:2}; // x and y defining x and y positions, w and h defining width and height of your box		var colArraySlider:Array = [volumeSliderStrokeBeginColor, volumeSliderStrokeEndColor, volumeSliderStrokeEndColor]; // your colors		var alpArraySlider:Array = [100, 100, 0]; // your alphas		var sprArraySlider:Array = [0, 200, 255]; // gradient spread		var matrixDataSlider:Object = {matrixType:"box", x:0, y:0, w:2, h:2, r:90/180*Math.PI};//imageHeight + imagesBorder + topMargin				with(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBackground)		{			moveTo(boxPropertiesSlider.x, boxPropertiesSlider.y);			beginGradientFill("linear", colArraySlider, alpArraySlider, sprArraySlider, matrixDataSlider);			lineTo(boxPropertiesSlider.x + boxPropertiesSlider.w, boxPropertiesSlider.y);			lineTo(boxPropertiesSlider.x + boxPropertiesSlider.w, boxPropertiesSlider.y + boxPropertiesSlider.h);			lineTo(boxPropertiesSlider.x, boxPropertiesSlider.y + boxPropertiesSlider.h);			lineTo(boxPropertiesSlider.x, boxPropertiesSlider.y);		}				mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBackground._width = mcContent.mcControlsBtns.mcSoundVolumeSlider.mcVolumeShape._width * 2;		mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBackground._x = Math.round(-(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBackground._width - mcContent.mcControlsBtns.mcSoundVolumeSlider.mcVolumeShape._width)/2);		mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBackground._height = 3* backgroundHeight/2;		mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBackground._y = Math.round(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcVolumeShape._y);				var boxPropertiesMainBack:Object = {x:0, y:0, w:2, h:2}; // x and y defining x and y positions, w and h defining width and height of your box		var colArrayMainBack:Array = [mainSliderColor, mainSliderColor, mainSliderColor]; // your colors		var alpArrayMainBack:Array = [100, 100, 0]; // your alphas		var sprArrayMainBack:Array = [0, 200, 255]; // gradient spread		var matrixDataMainBack:Object = {matrixType:"box", x:0, y:0, w:2, h:2, r:90/180*Math.PI};//imageHeight + imagesBorder + topMargin				with(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcMainBackground)		{			moveTo(boxPropertiesSlider.x, boxPropertiesSlider.y);			beginGradientFill("linear", colArrayMainBack, alpArrayMainBack, sprArrayMainBack, matrixDataMainBack);			lineTo(boxPropertiesMainBack.x + boxPropertiesMainBack.w, boxPropertiesMainBack.y);			lineTo(boxPropertiesMainBack.x + boxPropertiesMainBack.w, boxPropertiesMainBack.y + boxPropertiesMainBack.h);			lineTo(boxPropertiesMainBack.x, boxPropertiesMainBack.y + boxPropertiesMainBack.h);			lineTo(boxPropertiesMainBack.x, boxPropertiesMainBack.y);		}				mcContent.mcControlsBtns.mcSoundVolumeSlider.mcMainBackground._width = mcContent.mcControlsBtns.mcSoundVolumeSlider.mcVolumeShape._width * 2 - 2;		mcContent.mcControlsBtns.mcSoundVolumeSlider.mcMainBackground._x = Math.round(-(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBackground._width - mcContent.mcControlsBtns.mcSoundVolumeSlider.mcVolumeShape._width)/2 + 1);		mcContent.mcControlsBtns.mcSoundVolumeSlider.mcMainBackground._height = 3* backgroundHeight/2 - 1;		mcContent.mcControlsBtns.mcSoundVolumeSlider.mcMainBackground._y = Math.round(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcVolumeShape._y);						mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBack.lineStyle(0.25, volumeSliderMainBackStrokeColor);				var boxPropertiesMainSliderBack:Object = {x:0, y:0, w:2, h:3* backgroundHeight/2 - 10};		with(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBack)		{			moveTo(boxPropertiesSlider.x, boxPropertiesSlider.y);			beginFill(volumeSliderMainBackColor);			lineTo(boxPropertiesMainBack.x + boxPropertiesMainBack.w, boxPropertiesMainBack.y);			lineTo(boxPropertiesMainBack.x + boxPropertiesMainBack.w, boxPropertiesMainBack.y + boxPropertiesMainSliderBack.h);			lineTo(boxPropertiesMainBack.x, boxPropertiesMainBack.y + boxPropertiesMainSliderBack.h);			lineTo(boxPropertiesMainBack.x, boxPropertiesMainBack.y);		}				mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBack._width = (mcContent.mcControlsBtns.mcSoundVolumeSlider.mcVolumeShape._width * 2)/3;		mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBack._x = Math.round(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBackground._x + (mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBackground._width - mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBack._width)/2);		//mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBack._height = 3* backgroundHeight/2 - 10;		mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBack._y = Math.round(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcVolumeShape._y);						var boxPropertiesSliderObj:Object = {x:0, y:0, w:2, h:2}; // x and y defining x and y positions, w and h defining width and height of your box		var colArraySliderObj:Array = [volumeSliderBeginColor, volumeSliderEndColor]; // your colors		var alpArraySliderObj:Array = [100, 100]; // your alphas		var sprArraySliderObj:Array = [0, 255]; // gradient spread		var matrixDataSliderObj:Object = {matrixType:"box", x:0, y:0, w:2, h:2, r:90/180*Math.PI};//imageHeight + imagesBorder + topMargin				with(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSlider)		{			moveTo(boxPropertiesSliderObj.x, boxPropertiesSliderObj.y);			beginGradientFill("linear", colArraySliderObj, alpArraySliderObj, sprArraySliderObj, matrixDataSliderObj);			lineTo(boxPropertiesSliderObj.x + boxPropertiesSliderObj.w, boxPropertiesSliderObj.y);			lineTo(boxPropertiesSliderObj.x + boxPropertiesSliderObj.w, boxPropertiesSliderObj.y + boxPropertiesSliderObj.h);			lineTo(boxPropertiesSliderObj.x, boxPropertiesSliderObj.y + boxPropertiesSliderObj.h);			lineTo(boxPropertiesSliderObj.x, boxPropertiesSliderObj.y);		}				mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSlider._width = (mcContent.mcControlsBtns.mcSoundVolumeSlider.mcVolumeShape._width * 2)/3;		mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSlider._x = Math.round(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBackground._x + (mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBackground._width - mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBack._width)/2) + 0.25;				//set slider to sound volume		mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSlider._height = Main.getInstance().mcAlbums.mcPlaylist.sound.getVolume()/100 * (3* backgroundHeight/2 - 10);		mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSlider._y = Math.round(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcVolumeShape._y);				mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderButton._alpha = 0;		with(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderButton)		{			moveTo(boxPropertiesSlider.x, boxPropertiesSlider.y);			beginFill(volumeSliderMainBackColor);			lineTo(boxPropertiesMainBack.x + boxPropertiesMainBack.w, boxPropertiesMainBack.y);			lineTo(boxPropertiesMainBack.x + boxPropertiesMainBack.w, boxPropertiesMainBack.y + boxPropertiesMainSliderBack.h);			lineTo(boxPropertiesMainBack.x, boxPropertiesMainBack.y + boxPropertiesMainSliderBack.h);			lineTo(boxPropertiesMainBack.x, boxPropertiesMainBack.y);		}				mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderButton._width = (mcContent.mcControlsBtns.mcSoundVolumeSlider.mcVolumeShape._width * 2)/3;		mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderButton._x = Math.round(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBackground._x + (mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBackground._width - mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBack._width)/2);		//mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBack._height = 3* backgroundHeight/2 - 10;		mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderButton._y = Math.round(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcVolumeShape._y - mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBackground._height + 1);		//****************				//************ slider mask		var boxPropertiesSlider:Object = {x:0, y:0, w:2, h:2}; // x and y defining x and y positions, w and h defining width and height of your box		var colArraySlider:Array = [volumeSliderStrokeBeginColor, volumeSliderStrokeEndColor, volumeSliderStrokeEndColor]; // your colors		var alpArraySlider:Array = [100, 100, 100]; // your alphas		var sprArraySlider:Array = [0, 200, 255]; // gradient spread		var matrixDataSlider:Object = {matrixType:"box", x:0, y:0, w:2, h:2, r:90/180*Math.PI};//imageHeight + imagesBorder + topMargin				with(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcMask)		{			moveTo(boxPropertiesSlider.x, boxPropertiesSlider.y);			beginGradientFill("linear", colArraySlider, alpArraySlider, sprArraySlider, matrixDataSlider);			lineTo(boxPropertiesSlider.x + boxPropertiesSlider.w, boxPropertiesSlider.y);			lineTo(boxPropertiesSlider.x + boxPropertiesSlider.w, boxPropertiesSlider.y + boxPropertiesSlider.h);			lineTo(boxPropertiesSlider.x, boxPropertiesSlider.y + boxPropertiesSlider.h);			lineTo(boxPropertiesSlider.x, boxPropertiesSlider.y);		}				mcContent.mcControlsBtns.mcSoundVolumeSlider.mcMask._width = mcContent.mcControlsBtns.mcSoundVolumeSlider.mcVolumeShape._width * 2;		mcContent.mcControlsBtns.mcSoundVolumeSlider.mcMask._x = Math.round(-(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBackground._width - mcContent.mcControlsBtns.mcSoundVolumeSlider.mcVolumeShape._width)/2);		mcContent.mcControlsBtns.mcSoundVolumeSlider.mcMask._height = 3* backgroundHeight/2;		mcContent.mcControlsBtns.mcSoundVolumeSlider.mcMask._y = Math.round(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcVolumeShape._y - mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBackground._height - 5);		//************				//************ mc hit		var boxPropertiesSlider:Object = {x:0, y:0, w:2, h:2}; // x and y defining x and y positions, w and h defining width and height of your box		var colArraySlider:Array = [volumeSliderStrokeBeginColor, volumeSliderStrokeEndColor, volumeSliderStrokeEndColor]; // your colors		var alpArraySlider:Array = [100, 100, 100]; // your alphas		var sprArraySlider:Array = [0, 200, 255]; // gradient spread		var matrixDataSlider:Object = {matrixType:"box", x:0, y:0, w:2, h:2, r:90/180*Math.PI};//imageHeight + imagesBorder + topMargin				mcContent.mcControlsBtns.mcSoundVolumeSlider.mcHit._alpha = 0;		var wid : Number = mcContent.mcControlsBtns.mcSoundVolumeSlider.mcVolumeShape._width * 2;		var heig : Number = 3* backgroundHeight/2 + 20;		with(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcHit)		{			moveTo(boxPropertiesSlider.x, boxPropertiesSlider.y);			beginGradientFill("linear", colArraySlider, alpArraySlider, sprArraySlider, matrixDataSlider);			lineTo(boxPropertiesSlider.x + wid, boxPropertiesSlider.y);			lineTo(boxPropertiesSlider.x + wid, boxPropertiesSlider.y + heig);			lineTo(boxPropertiesSlider.x, boxPropertiesSlider.y + heig);			lineTo(boxPropertiesSlider.x, boxPropertiesSlider.y);		}				mcContent.mcControlsBtns.mcSoundVolumeSlider.mcHit._x = Math.round(-(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBackground._width - mcContent.mcControlsBtns.mcSoundVolumeSlider.mcVolumeShape._width)/2);		mcContent.mcControlsBtns.mcSoundVolumeSlider.mcHit._y = Math.round(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcVolumeShape._y - mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBackground._height - 5);				mcContent.mcControlsBtns.mcSoundVolumeSlider.mcMainBackground.onRollOver = Proxy.create(this, sliderBackRollOver);		mcContent.mcControlsBtns.mcSoundVolumeSlider.mcMainBackground.useHandCursor = false;		//************				//*************embed button		var boxPropertiesEmbed:Object = {x:0, y:0, w:2, h:2}; // x and y defining x and y positions, w and h defining width and height of your box		var colArrayEmbed:Array = [embedButtonBeginColor, embedButtonBeginColor, embedButtonMiddleColor, embedButtonEndColor]; // your colors		var alpArrayEmbed:Array = [100, 100, 100, 100]; // your alphas		var sprArrayEmbed:Array = [0, 122, 123, 255]; // gradient spread		var matrixDataEmbed:Object = {matrixType:"box", x:0, y:0, w:2, h:2, r:90/180*Math.PI};//imageHeight + imagesBorder + topMargin				mcContent.mcControlsBtns.mcEmbed.mcEmbedSymbol.txt.embedFonts = true;		mcContent.mcControlsBtns.mcEmbed.mcEmbedSymbol.txt.autoSize = true;				//mcContent.mcControlsBtns.mcEmbed.mcEmbedBackground.lineStyle(0.25, embedButtonStrokeColor);		with(mcContent.mcControlsBtns.mcEmbed.mcEmbedBackground)		{				moveTo(5, 0);			beginGradientFill("linear", colArrayEmbed, alpArrayEmbed, sprArrayEmbed, matrixDataEmbed);			lineTo(this.mcContent.mcControlsBtns.mcEmbed.mcEmbedSymbol._width, 0);			curveTo(this.mcContent.mcControlsBtns.mcEmbed.mcEmbedSymbol._width + 5, 0, this.mcContent.mcControlsBtns.mcEmbed.mcEmbedSymbol._width + 5, 5);			lineTo(this.mcContent.mcControlsBtns.mcEmbed.mcEmbedSymbol._width + 5, this.mcContent.mcControlsBtns.mcEmbed.mcEmbedSymbol._height - 5);			curveTo(this.mcContent.mcControlsBtns.mcEmbed.mcEmbedSymbol._width + 5, this.mcContent.mcControlsBtns.mcEmbed.mcEmbedSymbol._height, this.mcContent.mcControlsBtns.mcEmbed.mcEmbedSymbol._width, this.mcContent.mcControlsBtns.mcEmbed.mcEmbedSymbol._height);			lineTo(5, this.mcContent.mcControlsBtns.mcEmbed.mcEmbedSymbol._height);			curveTo(0, this.mcContent.mcControlsBtns.mcEmbed.mcEmbedSymbol._height, 0, this.mcContent.mcControlsBtns.mcEmbed.mcEmbedSymbol._height - 5);			lineTo(0, 5);			curveTo(0, 0, 5, 0);			endFill();		}				mcContent.mcControlsBtns.mcEmbed.mcEmbedSymbol._x = Math.round((mcContent.mcControlsBtns.mcEmbed.mcEmbedBackground._width - mcContent.mcControlsBtns.mcEmbed.mcEmbedSymbol._width)/2 - 2);				glowEmbedFilter = new GlowFilter(embedButtonStrokeColor, 0.25, 1.1, 1.1, 20, 15, false, false);		var filterArray : Array = new Array();		filterArray.push(glowEmbedFilter);		mcContent.mcControlsBtns.mcEmbed.mcEmbedBackground.filters = filterArray;		mcContent.mcControlsBtns.mcEmbed.mcEmbedBackground.cacheAsBitmap = true;		mcContent.mcControlsBtns.mcEmbed.mcEmbedBackground.forceSmoothing = true;						//mcContent.mcControlsBtns.mcEmbed.mcEmbedSymbol._x = Math.round((mcContent.mcControlsBtns.mcEmbed.mcEmbedBackground._width - mcContent.mcControlsBtns.mcEmbed.mcEmbedSymbol._width)/2 - 2);		mcContent.mcControlsBtns.mcEmbed.mcEmbedSymbol._y = Math.round((mcContent.mcControlsBtns.mcEmbed.mcEmbedBackground._height - mcContent.mcControlsBtns.mcEmbed.mcEmbedSymbol._height)/2 + 2);		caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcEmbed.mcEmbedSymbol, {_color:embedButtonSymbolColor, time:0.1, onComplete:function(){mcContent.mcControlsBtns.mcEmbed.mcEmbedSymbol.filters = filterArray;}, transition:"easeOutExpo"});		mcContent.mcControlsBtns.mcEmbed._x = width - mcContent.mcControlsBtns.mcEmbed._width - 7;		mcContent.mcControlsBtns.mcEmbed._y = Math.round((backgroundHeight - mcContent.mcControlsBtns.mcEmbed._height)/2 + 1);		//*************				maskHeight = 3* backgroundHeight/2;				mcContent.mcControlsBtns.mcTimeControl.txt.autoSize = true;		mcContent.mcControlsBtns.mcTimeControl.txt.embedFonts = true;		mcContent.mcControlsBtns.mcTimeControl.txt.textColor = timeTextColor;				//mcContent.mcControlsBtns.mcTimeControl._x = width - 58 - mcContent.mcControlsBtns.mcTimeControl._width;		mcContent.mcControlsBtns.mcTimeControl._y = Math.round((backgroundHeight - mcContent.mcControlsBtns.mcTimeControl._height)/2 + 2);				var diffBar : Number = width - mcContent.mcControlsBtns.mcTimeControl._x - mcContent.mcControlsBtns.mcTimeControl._width - mcContent.mcControlsBtns.mcEmbed._width - 5;				if(embedVisibility == "true")		{			mcContent.mcControlsBtns.mcSoundVolumeSlider._x = Math.round(mcContent.mcControlsBtns.mcTimeControl._x + mcContent.mcControlsBtns.mcTimeControl._width + diffBar/8);		}		else		{			mcContent.mcControlsBtns.mcSoundVolumeSlider._x = Math.round(mcContent.mcControlsBtns.mcTimeControl._x + mcContent.mcControlsBtns.mcTimeControl._width + 5);		}				//set embed button visibility		if(embedVisibility == "false")		{			mcContent.mcControlsBtns.mcEmbed._visible = false;		}				//mc tooltip		mcContent.mcControlsBtns.mcTooltip.mcTooltipText.txt.embedFonts = true;		mcContent.mcControlsBtns.mcTooltip.mcTooltipText.txt.autoSize = true;		mcContent.mcControlsBtns.mcTooltip._alpha = 0;				mcContent.mcControlsBtns.mcTooltip.mcTooltipBackground.cacheAsBitmap = true;		mcContent.mcControlsBtns.mcTooltip.mcTooltipSign.cacheAsBitmap = true;		mcContent.mcControlsBtns.mcTooltip.mcTooltipBackground.setColor(Main.getInstance().mcAlbums.tooltipBackgroundColor);		mcContent.mcControlsBtns.mcTooltip.mcTooltipSign.setColor(Main.getInstance().mcAlbums.tooltipBackgroundColor);		mcContent.mcControlsBtns.mcTooltip.mcTooltipText.setColor(Main.getInstance().mcAlbums.tooltipTextColor);				var dropShadow : DropShadowFilter = new DropShadowFilter(2, 45, 0x000000, 0.5, 4, 4, 2, 3);    	mcContent.mcControlsBtns.mcTooltip.filters = [dropShadow];				if(Main.getInstance().mcAlbums.tooltipVisibility != "true")		{			mcContent.mcControlsBtns.mcTooltip._visible = false;		}						//set shuffle position		mcContent.mcControlsBtns.mcShuffle._x = Math.round(mcContent.mcControlsBtns.mcTimeControl._x + mcContent.mcControlsBtns.mcTimeControl._width + mcContent.mcControlsBtns.mcSoundVolumeSlider._width + diffBar/18);		mcContent.mcControlsBtns.mcShuffle._y = Math.round((backgroundHeight - mcContent.mcControlsBtns.mcShuffle._height)/2 + 1);		mcContent.mcControlsBtns.mcShuffle.setColor(shuffleColor);		mcContent.mcControlsBtns.mcShuffle.cacheAsBitmap = true;				mcContent.mcControlsBtns.mcShuffle.onRollOver = Proxy.create(this, shuffleOver);		mcContent.mcControlsBtns.mcShuffle.onRollOut = mcContent.mcControlsBtns.mcShuffle.onReleaseOutside = Proxy.create(this, shuffleOut);		mcContent.mcControlsBtns.mcShuffle.onRelease = Proxy.create(this, shuffleRelease);				mcContent.mcControlsBtns.mcEmbed.onRollOver = Proxy.create(this, embedRollOver);		mcContent.mcControlsBtns.mcEmbed.onRollOut = mcContent.mcControlsBtns.mcEmbed.onReleaseOutside = Proxy.create(this, embedRollOut);		mcContent.mcControlsBtns.mcEmbed.onRelease = Proxy.create(this, embedRelease);				mcContent.mcControlsBtns.mcPlayBackground.onRelease = Proxy.create(this, playOnRelease, mcContent.mcControlsBtns.mcPlayBackground);		mcContent.mcControlsBtns.mcNextBackground.onRelease = Proxy.create(this, forwardOnRelease, mcContent.mcControlsBtns.mcNextBackground);		mcContent.mcControlsBtns.mcPreviousBackground.onRelease = Proxy.create(this, backwardOnRelease, mcContent.mcControlsBtns.mcPreviousBackground);		mcContent.mcControlsBtns.mcNextBackground.onRollOver = Proxy.create(this, controlOnRollOver, mcContent.mcControlsBtns.mcForward);		mcContent.mcControlsBtns.mcPreviousBackground.onRollOver = Proxy.create(this, controlOnRollOver, mcContent.mcControlsBtns.mcBackward);		mcContent.mcControlsBtns.mcPlayBackground.onRollOver = Proxy.create(this, controlOnRollOver, mcContent.mcControlsBtns.mcPlay);		mcContent.mcControlsBtns.mcNextBackground.onRollOut = mcContent.mcControlsBtns.mcNextBackground.onReleaseOutside = Proxy.create(this, controlOnRollOut, mcContent.mcControlsBtns.mcForward);		mcContent.mcControlsBtns.mcPreviousBackground.onRollOut = mcContent.mcControlsBtns.mcPreviousBackground.onReleaseOutside = Proxy.create(this, controlOnRollOut, mcContent.mcControlsBtns.mcBackward);		mcContent.mcControlsBtns.mcPlayBackground.onRollOut = mcContent.mcControlsBtns.mcPlayBackground.onReleaseOutside = Proxy.create(this, controlOnRollOut, mcContent.mcControlsBtns.mcPlay);		mcContent.mcControlsBtns.mcSoundVolumeSlider.mcVolumeShape.onRelease = Proxy.create(this, volumeOnRelease);				mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderButton.onRelease = mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderButton.onReleaseOutside = Proxy.create(this, sliderOnRelease);		mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderButton.onPress = Proxy.create(this, sliderOnPress);				mcContent.mcControlsBtns.mcSoundVolumeSlider.mcVolumeShape.onRollOver = Proxy.create(this, sliderRollOver);		mcContent.mcControlsBtns.mcSoundVolumeSlider.mcVolumeShape.onRollOut = mcContent.mcControlsBtns.mcSoundVolumeSlider.mcVolumeShape.onReleaseOutside = Proxy.create(this, volumeShapeOut);		//mcContent.mcControlsBtns.mcProgressLoadingSound.useHandCursor = false;		mcContent.mcControlsBtns.mcProgressLoadingSound.onPress = Proxy.create(this, beginSoundSliding);		mcContent.mcControlsBtns.mcProgressLoadingSound.onRelease = mcContent.mcControlsBtns.mcProgressLoadingSound.onReleaseOutside = Proxy.create(this, setSoundToPosition);	}		/**	 * slider back over	 */	private function sliderBackRollOver() : Void	{			}		/**	 * shuffle roll over, out, release	 */	private function shuffleOver() : Void	{		caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcShuffle, {_color:shuffleBtnOverColor, time:0.5, transition:"easeOutExpo"});				_global['clearTimeout'](tooltipTimeout);		tooltipTimeout = _global['setTimeout'](this, 'showTooltip', 1000);		mcContent.mcControlsBtns.mcTooltip._alpha = 0;		mcContent.mcControlsBtns.mcTooltip.mcTooltipText.txt.text = "shuffle";		mcContent.mcControlsBtns.mcTooltip.mcTooltipBackground._width = mcContent.mcControlsBtns.mcTooltip.mcTooltipText._width + 10;		mcContent.mcControlsBtns.mcTooltip.mcTooltipText._x = 6;		mcContent.mcControlsBtns.mcTooltip._x = Math.round(mcContent.mcControlsBtns.mcShuffle._x + 5);		mcContent.mcControlsBtns.mcTooltip._y = Math.round(mcContent.mcControlsBtns.mcShuffle._y - mcContent.mcControlsBtns.mcTooltip._height + 2);	}	private function shuffleOut() : Void	{		_global['clearTimeout'](tooltipTimeout);		mcContent.mcControlsBtns.mcTooltip._alpha = 0;		//caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcTooltip, {_alpha:0, time:0.5, transition:"easeOutExpo"});		if(shufflePressed == false)		{			caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcShuffle, {_color:shuffleBtnColor, time:0.5, transition:"easeOutExpo"});		}	}	private function shuffleRelease() : Void	{		if(shufflePressed == false)		{			shufflePressed = true;			caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcShuffle, {_color:shuffleBtnOverColor, time:0.5, transition:"easeOutExpo"});			Main.getInstance().mcAlbums.mcPlaylist.randomizeArray(Main.getInstance().mcAlbums.mcPlaylist.songsRandom);		}		else		{			shufflePressed = false;			caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcShuffle, {_color:shuffleBtnColor, time:0.5, transition:"easeOutExpo"});			Main.getInstance().mcAlbums.mcPlaylist.songsRandom = Main.getInstance().mcAlbums.mcPlaylist.songsArranged;		}	}		/**	 * controls sound roll over, roll out	 */	private function controlOnRollOver(mc : MovieClip) : Void	{		_global['clearTimeout'](tooltipTimeout);		tooltipTimeout = _global['setTimeout'](this, 'showTooltip', 1000);		mcContent.mcControlsBtns.mcTooltip._alpha = 0;				if(mc == mcContent.mcControlsBtns.mcPlay)		{			mcContent.mcControlsBtns.mcTooltip.mcTooltipText.txt.text = "play";			mcContent.mcControlsBtns.mcTooltip.mcTooltipBackground._width = mcContent.mcControlsBtns.mcTooltip.mcTooltipText._width + 10;			mcContent.mcControlsBtns.mcTooltip.mcTooltipText._x = 6;			mcContent.mcControlsBtns.mcTooltip._x = Math.round(mcContent.mcControlsBtns.mcPlay._x);			mcContent.mcControlsBtns.mcTooltip._y = Math.round(mcContent.mcControlsBtns.mcPlay._y - mcContent.mcControlsBtns.mcTooltip._height - 6);		}		if(mc == mcContent.mcControlsBtns.mcPause)		{			mcContent.mcControlsBtns.mcTooltip.mcTooltipText.txt.text = "pause";			mcContent.mcControlsBtns.mcTooltip.mcTooltipBackground._width = mcContent.mcControlsBtns.mcTooltip.mcTooltipText._width + 10;			mcContent.mcControlsBtns.mcTooltip.mcTooltipText._x = 6;			mcContent.mcControlsBtns.mcTooltip._x = Math.round(mcContent.mcControlsBtns.mcPause._x);			mcContent.mcControlsBtns.mcTooltip._y = Math.round(mcContent.mcControlsBtns.mcPause._y - mcContent.mcControlsBtns.mcTooltip._height - 6);		}		if(mc == mcContent.mcControlsBtns.mcForward)		{			mcContent.mcControlsBtns.mcTooltip.mcTooltipText.txt.text = "next";			mcContent.mcControlsBtns.mcTooltip.mcTooltipBackground._width = mcContent.mcControlsBtns.mcTooltip.mcTooltipText._width + 10;			mcContent.mcControlsBtns.mcTooltip.mcTooltipText._x = 6;			mcContent.mcControlsBtns.mcTooltip._x = Math.round(mcContent.mcControlsBtns.mcForward._x);			mcContent.mcControlsBtns.mcTooltip._y = Math.round(mcContent.mcControlsBtns.mcForward._y - mcContent.mcControlsBtns.mcTooltip._height - 6);		}		if(mc == mcContent.mcControlsBtns.mcBackward)		{			mcContent.mcControlsBtns.mcTooltip.mcTooltipText.txt.text = "previous";			mcContent.mcControlsBtns.mcTooltip.mcTooltipBackground._width = mcContent.mcControlsBtns.mcTooltip.mcTooltipText._width + 10;			mcContent.mcControlsBtns.mcTooltip.mcTooltipText._x = 6;			mcContent.mcControlsBtns.mcTooltip._x = Math.round(mcContent.mcControlsBtns.mcBackward._x);			mcContent.mcControlsBtns.mcTooltip._y = Math.round(mcContent.mcControlsBtns.mcBackward._y - mcContent.mcControlsBtns.mcTooltip._height - 6);		}				if(mc != mcContent.mcControlsBtns.mcPlay)		{			caurina.transitions.Tweener.addTween(mc.mcOver, {_alpha:100, time:0.5, transition:"easeOutExpo"});			caurina.transitions.Tweener.addTween(mc.mcNormal, {_alpha:0, time:0.5, transition:"easeOutExpo"});		}		else		{			if(mcContent.mcControlsBtns.mcPlay._visible == false)			{				caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcPause.mcOver, {_alpha:100, time:0.5, transition:"easeOutExpo"});				caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcPause.mcNormal, {_alpha:0, time:0.5, transition:"easeOutExpo"});			}			else			{				caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcPlay.mcOver, {_alpha:100, time:0.5, transition:"easeOutExpo"});				caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcPlay.mcNormal, {_alpha:0, time:0.5, transition:"easeOutExpo"});			}		}	}	private function controlOnRollOut(mc : MovieClip) : Void	{		_global['clearTimeout'](tooltipTimeout);		mcContent.mcControlsBtns.mcTooltip._alpha = 0;		//caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcTooltip, {_alpha:0, time:0.5, transition:"easeOutExpo"});				if(mc != mcContent.mcControlsBtns.mcPlay)		{			caurina.transitions.Tweener.addTween(mc.mcOver, {_alpha:0, time:0.5, transition:"easeOutExpo"});			caurina.transitions.Tweener.addTween(mc.mcNormal, {_alpha:100, time:0.5, transition:"easeOutExpo"});		}		else		{			if(mcContent.mcControlsBtns.mcPlay._visible == false)			{				caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcPause.mcOver, {_alpha:0, time:0.5, transition:"easeOutExpo"});				caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcPause.mcNormal, {_alpha:100, time:0.5, transition:"easeOutExpo"});			}			else			{				caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcPlay.mcOver, {_alpha:0, time:0.5, transition:"easeOutExpo"});				caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcPlay.mcNormal, {_alpha:100, time:0.5, transition:"easeOutExpo"});			}		}	}		private function embedRollOver() : Void	{		if(embedCanPress == true)		{			mcContent.mcControlsBtns.mcEmbed.useHandCursor = true;			caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcEmbed.mcEmbedSymbol, {_color:embedOver, time:0.5, transition:"easeOutExpo"});		}		else		{			mcContent.mcControlsBtns.mcEmbed.useHandCursor = false;		}	}	private function embedRollOut() : Void	{		caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcEmbed.mcEmbedSymbol, {_color:embedColor, time:0.5, transition:"easeOutExpo"});	}	private function embedRelease() : Void	{		if(embedCanPress == true)		{			mcContent.mcControlsBtns.mcEmbed.useHandCursor = false;			Main.getInstance().mcAlbums.mcEmbedCode._visible = true;			Main.getInstance().mcAlbums.mcEmbedCode.swapDepths(Main.getInstance().mcAlbums.getNextHighestDepth());			embedCanPress = false;		}		//caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcEmbed.mcEmbedSymbol, {_color:embedOver, time:0.5, transition:"easeOutExpo"});	}		/**	 * show volume slider	 */	private function sliderRollOver() : Void	{		mcContent.onEnterFrame = Proxy.create(this, rollOut);		//caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcMask, {_height : maskHeight, _y : Math.round(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcVolumeShape._y - mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBackground._height - 5), time:0.5, transition:"easeOutExpo"});				caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSlider, { _y : Math.round(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcVolumeShape._y - mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSlider._height - 9), time:0.5, transition:"easeOutExpo"});		caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBack, { _y : Math.round(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcVolumeShape._y - mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBackground._height + 1), time:0.5, transition:"easeOutExpo"});		caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcMainBackground, { _y : Math.round(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcVolumeShape._y - mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBackground._height - 5 + 1), time:0.5, transition:"easeOutExpo"});		caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBackground, { _y : Math.round(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcVolumeShape._y - mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBackground._height - 5), time:0.5, transition:"easeOutExpo"});				_global['clearTimeout'](tooltipTimeout);		tooltipTimeout = _global['setTimeout'](this, 'showTooltip', 1000);		mcContent.mcControlsBtns.mcTooltip.mcTooltipText.txt.text = "volume";		mcContent.mcControlsBtns.mcTooltip._alpha = 0;		mcContent.mcControlsBtns.mcTooltip.mcTooltipBackground._width = mcContent.mcControlsBtns.mcTooltip.mcTooltipText._width + 10;		mcContent.mcControlsBtns.mcTooltip.mcTooltipText._x = 6;		mcContent.mcControlsBtns.mcTooltip._x = Math.round(mcContent.mcControlsBtns.mcSoundVolumeSlider._x);		mcContent.mcControlsBtns.mcTooltip._y = Math.round(mcContent.mcControlsBtns.mcSoundVolumeSlider._y - mcContent.mcControlsBtns.mcTooltip._height - 6);				//caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcTooltip, {_alpha:0, time:0.5, delay : 1, transition:"easeOutExpo"});		caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcVolumeShape.mcOver, {_alpha:100, time:0.5, transition:"easeOutExpo"});	}//	//	/**//	 * remove volume slider//	 *///	private function sliderRollOut() : Void//	{//		mcContent.onEnterFrame = Proxy.create(this, rollOut);//	}	/**	 * show tooltip	 */	private function showTooltip() : Void	{		mcContent.mcControlsBtns.mcTooltip._alpha = 0;		caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcTooltip, {_alpha:100, time:0.5, transition:"easeOutExpo"});	}		private function rollOut() : Void	{				if(!mcContent.mcControlsBtns.mcSoundVolumeSlider.hitTest(_root._xmouse, _root._ymouse, true) && pressedSlider == false)		{			caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcTooltip, {_alpha:0, time:0.5, transition:"easeOutExpo"});			caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSlider, { _y : Math.round(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcVolumeShape._y), time:0.5, transition:"easeOutExpo"});			caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBack, { _y : Math.round(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcVolumeShape._y), time:0.5, transition:"easeOutExpo"});			caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcMainBackground, { _y : Math.round(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcVolumeShape._y), time:0.5, transition:"easeOutExpo"});			caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBackground, { _y : Math.round(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcVolumeShape._y), time:0.5, transition:"easeOutExpo"});			//caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcMask, {_height : 1, _y : Math.round(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcVolumeShape._y - 5), time:0.5, transition:"easeOutExpo"});			delete mcContent.onEnterFrame;		}	}		private function volumeShapeOut() : Void	{		_global['clearTimeout'](tooltipTimeout);		mcContent.mcControlsBtns.mcTooltip._alpha = 0;		//caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcTooltip, {_alpha:0, time:0.5, transition:"easeOutExpo"});		caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcVolumeShape.mcOver, {_alpha:0, time:0.5, transition:"easeOutExpo"});	}		/**	 * drag slider	 */	private function sliderOnPress() : Void	{		pressedSlider = true;		mcContent.mcControlsBtns.mcSoundVolumeSlider.onMouseMove = Proxy.create(this, beginSliding);	}		private function beginSliding() : Void	{		var percent : Number;				if(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderButton._ymouse <= 0)		{			percent = 100;			caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSlider, {_height:mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBack._height, time:0.5, transition:"easeOutExpo"});			caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSlider, {_y:mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBack._y, time:0.5, transition:"easeOutExpo"});			//caurina.transitions.Tweener.addTween(Main.getInstance().mcAlbums.mcPlaylist.sound, {_sound_volume:percent, time:0.5, transition:"linear"});			allSoundsVolume = percent;			//Main.getInstance().mcAlbums.mcPlaylist.sound.setVolume(allSoundsVolume);			soundPublicVolume = percent;			//Main.getInstance().mcAlbums.mcPlaylist.sound_volume.clear();			Main.getInstance().mcAlbums.mcPlaylist.sound_volume.data.sv = percent;			Main.getInstance().mcAlbums.mcPlaylist.sound_volume.flush();			soundHearing = true;		}		else		{			if(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderButton._ymouse >= mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderButton._height)			{				caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcVolumeShape, {_color:inactiveColor, time:0.5, transition:"easeOutExpo"});				soundHearing = false;				percent = 0;				caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSlider, {_height:0, time:0.5, transition:"easeOutExpo"});				caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSlider, {_y:mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBack._y + mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBack._height, time:0.5, transition:"easeOutExpo"});				//caurina.transitions.Tweener.addTween(Main.getInstance().mcAlbums.mcPlaylist.sound, {_sound_volume:percent, time:0.5, transition:"linear"});				allSoundsVolume = percent;				//Main.getInstance().mcAlbums.mcPlaylist.sound.setVolume(allSoundsVolume);				soundPublicVolume = percent;				//Main.getInstance().mcAlbums.mcPlaylist.sound_volume.clear();				Main.getInstance().mcAlbums.mcPlaylist.sound_volume.data.sv = percent;				Main.getInstance().mcAlbums.mcPlaylist.sound_volume.flush();			}			else			{				percent = Math.round(((mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBack._height - mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBack._ymouse)/mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBack._height)*100);				caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSlider, {_height:mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBack._height - mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBack._ymouse, time:0.5, transition:"easeOutExpo"});				caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSlider, {_y:mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBack._y + mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBack._ymouse, time:0.5, transition:"easeOutExpo"});				//caurina.transitions.Tweener.addTween(Main.getInstance().mcAlbums.mcPlaylist.sound, {_sound_volume:percent, time:0.5, transition:"linear"});								soundPublicVolume = percent;				allSoundsVolume = percent;				//Main.getInstance().mcAlbums.mcPlaylist.sound.setVolume(allSoundsVolume);								//Main.getInstance().mcAlbums.mcPlaylist.sound_volume.clear();				Main.getInstance().mcAlbums.mcPlaylist.sound_volume.data.sv = percent;				Main.getInstance().mcAlbums.mcPlaylist.sound_volume.flush();								caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcVolumeShape, {_color:null, time:0.5, transition:"easeOutExpo"});				soundHearing = true;			}		}		Main.getInstance().mcAlbums.mcPlaylist.sound.setVolume(allSoundsVolume);	}		/**	 * change sound volume	 */	 private function sliderOnRelease() : Void	 {	 	pressedSlider = false;				if(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderButton._ymouse <= 0)		{			var percent : Number = 100;			caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSlider, {_height:mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBack._height, time:0.5, transition:"easeOutExpo"});			caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSlider, {_y:mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBack._y, time:0.5, transition:"easeOutExpo"});			//caurina.transitions.Tweener.addTween(Main.getInstance().mcAlbums.mcPlaylist.sound, {_sound_volume:percent, time:0.5, transition:"linear"});			Main.getInstance().mcAlbums.mcPlaylist.sound.setVolume(percent);			soundPublicVolume = percent;			Main.getInstance().mcAlbums.mcPlaylist.sound_volume.clear();			Main.getInstance().mcAlbums.mcPlaylist.sound_volume.data.sv = percent;			Main.getInstance().mcAlbums.mcPlaylist.sound_volume.flush();			soundHearing = true;			allSoundsVolume = percent;		}		else		{			if(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderButton._ymouse >= mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderButton._height)			{				caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcVolumeShape, {_color:inactiveColor, time:0.5, transition:"easeOutExpo"});				soundHearing = false;				var percent : Number = 0;				caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSlider, {_height:0, time:0.5, transition:"easeOutExpo"});				caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSlider, {_y:mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBack._y + mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBack._height, time:0.5, transition:"easeOutExpo"});				//caurina.transitions.Tweener.addTween(Main.getInstance().mcAlbums.mcPlaylist.sound, {_sound_volume:percent, time:0.5, transition:"linear"});				Main.getInstance().mcAlbums.mcPlaylist.sound.setVolume(percent);				Main.getInstance().mcAlbums.mcPlaylist.sound_volume.clear();				Main.getInstance().mcAlbums.mcPlaylist.sound_volume.data.sv = percent;				Main.getInstance().mcAlbums.mcPlaylist.sound_volume.flush();				soundPublicVolume = percent;				allSoundsVolume = percent;			}			else			{				var percent : Number = Math.round(((mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBack._height - mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBack._ymouse)/mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBack._height)*100);				caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSlider, {_height:mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBack._height - mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBack._ymouse, time:0.5, transition:"easeOutExpo"});				caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSlider, {_y:mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBack._y + mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBack._ymouse, time:0.5, transition:"easeOutExpo"});				//caurina.transitions.Tweener.addTween(Main.getInstance().mcAlbums.mcPlaylist.sound, {_sound_volume:percent, time:0.5, transition:"linear"});				Main.getInstance().mcAlbums.mcPlaylist.sound.setVolume(percent);								Main.getInstance().mcAlbums.mcPlaylist.sound_volume.clear();				Main.getInstance().mcAlbums.mcPlaylist.sound_volume.data.sv = percent;				Main.getInstance().mcAlbums.mcPlaylist.sound_volume.flush();								caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcVolumeShape, {_color:null, time:0.5, transition:"easeOutExpo"});				soundHearing = true;				soundPublicVolume = percent;				allSoundsVolume = percent;			}		}		delete mcContent.mcControlsBtns.mcSoundVolumeSlider.onMouseMove;	 }		/**	 * change slider size	 */	 public function updateSlider() : Void	 {	 	caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSlider, {_height:Main.getInstance().mcAlbums.mcPlaylist.sound.getVolume()/100 * mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBack._height, time:0.5, transition:"easeOutExpo"});	 	caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSlider, {_y:mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBack._height + mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBack._y - mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSlider._height, time:0.5, transition:"easeOutExpo"});	 	if(allSoundsVolume == 0)	 	{	 		caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcVolumeShape, {_color:inactiveColor, time:1, transition:"easeOutExpo"});	 	}	 }		/**	 * fade volume on press	 */	private function volumeOnRelease() : Void	{		switch(soundHearing)		{			case true :			caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSlider, {_height:0, time:0.5, transition:"easeOutExpo"});	 		caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSlider, {_y:mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBack._height + mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBack._y, time:0.5, transition:"easeOutExpo"});			//caurina.transitions.Tweener.addTween(Main.getInstance().mcAlbums.mcPlaylist.sound, {_sound_volume:0, time:1, transition:"linear"});			Main.getInstance().mcAlbums.mcPlaylist.sound.setVolume(0);			caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcVolumeShape, {_color:inactiveColor, time:1, transition:"easeOutExpo"});			Main.getInstance().mcAlbums.mcPlaylist.sound_volume.clear();			Main.getInstance().mcAlbums.mcPlaylist.sound_volume.data.sv = 0;			Main.getInstance().mcAlbums.mcPlaylist.sound_volume.flush();			soundHearing = false;			allSoundsVolume = 0;			break;						case false :			caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSlider, {_height:(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBack._height * soundPublicVolume)/100 , time:0.5, transition:"easeOutExpo"});	 		caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSlider, {_y:mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBack._height + mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBack._y - (mcContent.mcControlsBtns.mcSoundVolumeSlider.mcSliderBack._height * soundPublicVolume)/100, time:0.5, transition:"easeOutExpo"});	 		Main.getInstance().mcAlbums.mcPlaylist.sound.setVolume(soundPublicVolume);			//caurina.transitions.Tweener.addTween(Main.getInstance().mcAlbums.mcPlaylist.sound, {_sound_volume:soundPublicVolume, time:1, onComplete:function(){/*trace("sound volume complete");*/}, transition:"linear"});			caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcSoundVolumeSlider.mcVolumeShape, {_color:null, time:1, transition:"easeOutExpo"});			Main.getInstance().mcAlbums.mcPlaylist.sound_volume.clear();			Main.getInstance().mcAlbums.mcPlaylist.sound_volume.data.sv = soundPublicVolume;			Main.getInstance().mcAlbums.mcPlaylist.sound_volume.flush();			soundHearing = true;			allSoundsVolume = soundPublicVolume;			break;		}	}		/**	 * remove loading bar	 */	public function removeLoadingBar() : Void	{		caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcProgressLoadingSound, {_alpha:100, time:1, transition:"easeOutExpo"});	}		/**	 * init loading bar	 */	public function initializeLoadingBar() : Void	{		mcContent.mcControlsBtns.mcProgressTimeSound._width = 0;		mcContent.mcControlsBtns.mcProgressLoadingSound._width = 1;		caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcProgressLoadingSound, {_alpha:100, time:0.1, transition:"easeOutExpo"});	}		private function forwardOnRelease() : Void	{		if(Main.getInstance().mcAlbums.mcPlaylist.songListIndex < Main.getInstance().mcAlbums.mcPlaylist.songsNumber - 1)		{			Main.getInstance().mcAlbums.mcPlaylist.songListIndex++;			Main.getInstance().mcAlbums.mcPlaylist.songOnRelease(Main.getInstance().mcAlbums.mcPlaylist.mcContent["mcPlaylistButton" + Main.getInstance().mcAlbums.mcPlaylist.songsRandom[Main.getInstance().mcAlbums.mcPlaylist.songListIndex]]);						if(Main.getInstance().mcAlbums.mcPlaylist.songListIndex < Main.getInstance().mcAlbums.mcPlaylist.songsNumber - 1)			{				mcContent.mcControlsBtns.mcNextBackground.useHandCursor = true;			}			else			{				mcContent.mcControlsBtns.mcNextBackground.useHandCursor = false;			}		}	}		private function backwardOnRelease() : Void	{		if(Main.getInstance().mcAlbums.mcPlaylist.songListIndex > 0)		{			Main.getInstance().mcAlbums.mcPlaylist.songListIndex--;			Main.getInstance().mcAlbums.mcPlaylist.songOnRelease(Main.getInstance().mcAlbums.mcPlaylist.mcContent["mcPlaylistButton" + Main.getInstance().mcAlbums.mcPlaylist.songListIndex]);			if(Main.getInstance().mcAlbums.mcPlaylist.songListIndex > 0)			{				mcContent.mcControlsBtns.mcPreviousBackground.useHandCursor = true;			}			else			{				mcContent.mcControlsBtns.mcPreviousBackground.useHandCursor = false;			}		}	}		private function forwardOnRollOver() : Void	{		if(Main.getInstance().mcAlbums.mcPlaylist.songListIndex < Main.getInstance().mcAlbums.mcPlaylist.songsNumber - 1)		{			mcContent.mcControlsBtns.mcNextBackground.useHandCursor = true;		}		else		{			mcContent.mcControlsBtns.mcNextBackground.useHandCursor = false;		}	}	private function backwardOnRollOver() : Void	{		if(Main.getInstance().mcAlbums.mcPlaylist.songListIndex > 0)		{			mcContent.mcControlsBtns.mcPreviousBackground.useHandCursor = true;		}		else		{			mcContent.mcControlsBtns.mcPreviousBackground.useHandCursor = false;		}	}		public function setTime(str : String) : Void	{		mcContent.mcControlsBtns.mcTimeControl.txt.text = str;	}		public function initProgressLoadingBar(width : Number)	{		mcContent.mcControlsBtns.mcProgressLoadingSound._width = width;	}		public function setProgressTimeBar(width : Number)	{		mcContent.mcControlsBtns.mcProgressTimeSound._width = width;	}		private function playOnRelease(mc : MovieClip) : Void	{		switch(soundActivePlaying)		{			case true :				mcContent.mcControlsBtns.mcPlay._visible = true;				mcContent.mcControlsBtns.mcPause._visible = false;				Main.getInstance().mcAlbums.mcPlaylist.sound.stop();				soundPosition = Main.getInstance().mcAlbums.mcPlaylist.sound.position;				clearInterval(timeInterval);				soundStatus = false;				soundActivePlaying = false;				break;							case false :				mcContent.mcControlsBtns.mcPlay._visible = false;				mcContent.mcControlsBtns.mcPause._visible = true;				if(Main.getInstance().mcAlbums.mcPlaylist.loadSound == false)				{					Main.getInstance().mcAlbums.mcPlaylist.loadSound = true;					//trace("let's load");					Main.getInstance().mcAlbums.mcPlaylist.interval = setInterval(Main.getInstance().mcAlbums.mcPlaylist.checkProgress, 100, Main.getInstance().mcAlbums.mcPlaylist.sound);					Main.getInstance().mcAlbums.mcPlaylist.soundLoadEvent(Main.getInstance().mcAlbums.pathTo + "/" + Main.getInstance().mcAlbums.mcPlaylist.songsList[Main.getInstance().mcAlbums.mcPlaylist.songPublicIndex]);					//Main.getInstance().mcAlbums.mcPlaylist.sound.loadSound(Main.getInstance().mcAlbums.pathTo + "/" + Main.getInstance().mcAlbums.mcPlaylist.songsList[Main.getInstance().mcAlbums.mcPlaylist.songPublicIndex], true);				}				Main.getInstance().mcAlbums.mcPlaylist.sound.start(int(soundPosition/1000));				timeInterval = _global['setInterval'](this, 'showTimeProgress', 1000, Main.getInstance().mcAlbums.mcPlaylist.sound);				soundStatus = true;				soundPosition = null;				soundActivePlaying = true;				break;		}	}		private function pauseOnRelease(mc : MovieClip) : Void	{		trace("pause sound");		mcContent.mcControlsBtns.mcPlay._visible = true;		mcContent.mcControlsBtns.mcPause._visible = false;		Main.getInstance().mcAlbums.mcPlaylist.sound.stop();		soundPosition = Main.getInstance().mcAlbums.mcPlaylist.sound.position;		clearInterval(timeInterval);		soundStatus = false;	}		public function progressTimeBar(width : Number) : Void	{	    mcContent.mcControlsBtns.mcProgressTimeSound._width = width;	}		public function playSong(soundObj : Object) : Void	{		timep = 0;		clearInterval(timeInterval);		setProgressTimeBar(1);		timeInterval = _global['setInterval'](this, 'showTimeProgress', 1000, soundObj);	}		private function beginSoundSliding() : Void	{		progressPressed = true;		mcContent.mcControlsBtns.mcProgressLoadingSound.onMouseMove = Proxy.create(this, progressMouseMove);	}		private function progressMouseMove() : Void	{		if(mcContent.mcControlsBtns.mcProgressLoadingSound._xmouse < mcContent.mcControlsBtns.mcProgressLoadingSound._width)		{			caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcProgressTimeSound, {_width:mcContent.mcControlsBtns.mcProgressLoadingSound._xmouse, time:0.2, transition:"easeOutExpo"});			var soundObj = Main.getInstance().mcAlbums.mcPlaylist.sound;			if(soundStatus == true)			{				soundObj.start((mcContent.mcControlsBtns.mcProgressLoadingSound._xmouse/mcContent.mcControlsBtns.mcProgressLoadingSound._width)*(soundObj.duration/1000));			}			else			{				soundObj.start((mcContent.mcControlsBtns.mcProgressLoadingSound._xmouse/mcContent.mcControlsBtns.mcProgressLoadingSound._width)*(soundObj.duration/1000));				soundObj.stop();			}			soundPosition = soundObj.position;			timep = soundObj.position;			setTime(videoTimeConvert(timep/1000));		}		if(mcContent.mcControlsBtns.mcProgressLoadingSound._xmouse < 0)		{			caurina.transitions.Tweener.addTween(mcContent.mcControlsBtns.mcProgressTimeSound, {_width:0, time:0.2, transition:"easeOutExpo"});			var soundObj = Main.getInstance().mcAlbums.mcPlaylist.sound;			if(soundStatus == true)			{				soundObj.start((mcContent.mcControlsBtns.mcProgressLoadingSound._xmouse/mcContent.mcControlsBtns.mcProgressLoadingSound._width)*(soundObj.duration/1000));			}			else			{				soundObj.start((mcContent.mcControlsBtns.mcProgressLoadingSound._xmouse/mcContent.mcControlsBtns.mcProgressLoadingSound._width)*(soundObj.duration/1000));				soundObj.stop();			}			soundPosition = soundObj.position;			timep = soundObj.position;			setTime(videoTimeConvert(timep/1000));		}	}		private function setSoundToPosition() : Void	{		delete mcContent.mcControlsBtns.mcProgressLoadingSound.onMouseMove;		progressPressed = false;				var soundObj = Main.getInstance().mcAlbums.mcPlaylist.sound;		if(soundStatus == true)		{			trace("Set sound position.");			soundObj.start((mcContent.mcControlsBtns.mcProgressLoadingSound._xmouse/mcContent.mcControlsBtns.mcProgressLoadingSound._width)*(soundObj.duration/1000));		}		else		{			soundObj.start((mcContent.mcControlsBtns.mcProgressLoadingSound._xmouse/mcContent.mcControlsBtns.mcProgressLoadingSound._width)*(soundObj.duration/1000));			soundObj.stop();		}		soundPosition = soundObj.position;		timep = soundObj.position;		setTime(videoTimeConvert(timep/1000));		progressTimeBar((soundObj.position/soundObj.duration)* mcContent.mcControlsBtns.mcProgressLoadingSound._width);	}		public function showTimeProgress(soundObj : Object) : Void	{		if(soundObj.duration >= 0)		{			timep = soundObj.position;			setTime(videoTimeConvert(timep/1000));		    progressTimeBar((timep/soundObj.duration)* mcContent.mcControlsBtns.mcProgressLoadingSound._width);		}	}		/**	 * conver audio lngth to hours, minutes and seconds	 */	public function videoTimeConvert(time : Number) : String 	{		// minutes		var minutes : String = "";		var minutesNr = Math.floor(time / 60); ////trace("Minutes: " + minutesNr);		if (minutesNr < 10)		{	  		minutes = "0" + minutesNr + " : ";		}	  	else	  	{	   		minutes += minutesNr + " : ";	  	}		  	// seconds	  	var seconds : String = "";	  	var secondsNr = Math.round(time % 60 ); ////trace("Seconds: " + secondsNr);	  	if (secondsNr < 10) 	  	{	    	seconds = "0" + secondsNr;	  	}	  	else	  	{	    	seconds += secondsNr;  	  	}		  	// hours	  	var hours : String = "";	  	var hoursNr = Math.floor(minutesNr / 60);	  	if (displayHours) 	  	{	    	if (hoursNr < 10)	    	{	      		hours = "0" + hoursNr + " : ";	    	}	    	else	    	{	      		hours += hoursNr + " : ";	    	}	  	}		  	var currentTimeConverted : String = hours + minutes + seconds;	  	return currentTimeConverted;	}}